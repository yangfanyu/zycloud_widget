// ignore_for_file: avoid_function_literals_in_foreach_calls
// ignore_for_file: deprecated_member_use
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: invalid_use_of_protected_member
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: unnecessary_constructor_name

import 'package:shelf_easy/shelf_easy.dart';
import 'package:zycloud_client/zycloud_client.dart';

///
///zyclient库桥接类
///
class ZyclientLibrary {
  ///class Business
  static final classBusiness = VmClass<Business>(
    identifier: 'Business',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Business.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Business.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Business.fromString),
      'adminIds': VmProxy(identifier: 'adminIds', externalInstancePropertyReader: (Business instance) => instance.adminIds, externalInstancePropertyWriter: (Business instance, value) => instance.adminIds = value),
      'aliamapAndroidKey': VmProxy(identifier: 'aliamapAndroidKey', externalInstancePropertyReader: (Business instance) => instance.aliamapAndroidKey, externalInstancePropertyWriter: (Business instance, value) => instance.aliamapAndroidKey = value),
      'aliamapIosKey': VmProxy(identifier: 'aliamapIosKey', externalInstancePropertyReader: (Business instance) => instance.aliamapIosKey, externalInstancePropertyWriter: (Business instance, value) => instance.aliamapIosKey = value),
      'aliamapWebKey': VmProxy(identifier: 'aliamapWebKey', externalInstancePropertyReader: (Business instance) => instance.aliamapWebKey, externalInstancePropertyWriter: (Business instance, value) => instance.aliamapWebKey = value),
      'alipayAesKey': VmProxy(identifier: 'alipayAesKey', externalInstancePropertyReader: (Business instance) => instance.alipayAesKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayAesKey = value),
      'alipayAppId': VmProxy(identifier: 'alipayAppId', externalInstancePropertyReader: (Business instance) => instance.alipayAppId, externalInstancePropertyWriter: (Business instance, value) => instance.alipayAppId = value),
      'alipayAppPrivateKey': VmProxy(identifier: 'alipayAppPrivateKey', externalInstancePropertyReader: (Business instance) => instance.alipayAppPrivateKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayAppPrivateKey = value),
      'alipayCertAppPublicKey': VmProxy(identifier: 'alipayCertAppPublicKey', externalInstancePropertyReader: (Business instance) => instance.alipayCertAppPublicKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayCertAppPublicKey = value),
      'alipayCertPublicKey': VmProxy(identifier: 'alipayCertPublicKey', externalInstancePropertyReader: (Business instance) => instance.alipayCertPublicKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayCertPublicKey = value),
      'alipayCertRootKey': VmProxy(identifier: 'alipayCertRootKey', externalInstancePropertyReader: (Business instance) => instance.alipayCertRootKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayCertRootKey = value),
      'alipayPublicKey': VmProxy(identifier: 'alipayPublicKey', externalInstancePropertyReader: (Business instance) => instance.alipayPublicKey, externalInstancePropertyWriter: (Business instance, value) => instance.alipayPublicKey = value),
      'alismsAccessKeyId': VmProxy(identifier: 'alismsAccessKeyId', externalInstancePropertyReader: (Business instance) => instance.alismsAccessKeyId, externalInstancePropertyWriter: (Business instance, value) => instance.alismsAccessKeyId = value),
      'alismsAccessKeySecret': VmProxy(identifier: 'alismsAccessKeySecret', externalInstancePropertyReader: (Business instance) => instance.alismsAccessKeySecret, externalInstancePropertyWriter: (Business instance, value) => instance.alismsAccessKeySecret = value),
      'alismsApiVersion': VmProxy(identifier: 'alismsApiVersion', externalInstancePropertyReader: (Business instance) => instance.alismsApiVersion, externalInstancePropertyWriter: (Business instance, value) => instance.alismsApiVersion = value),
      'alismsEndpoint': VmProxy(identifier: 'alismsEndpoint', externalInstancePropertyReader: (Business instance) => instance.alismsEndpoint, externalInstancePropertyWriter: (Business instance, value) => instance.alismsEndpoint = value),
      'alismsSignName': VmProxy(identifier: 'alismsSignName', externalInstancePropertyReader: (Business instance) => instance.alismsSignName, externalInstancePropertyWriter: (Business instance, value) => instance.alismsSignName = value),
      'alismsTemplateCode': VmProxy(identifier: 'alismsTemplateCode', externalInstancePropertyReader: (Business instance) => instance.alismsTemplateCode, externalInstancePropertyWriter: (Business instance, value) => instance.alismsTemplateCode = value),
      'appleAppSiteAssociation': VmProxy(identifier: 'appleAppSiteAssociation', externalInstancePropertyReader: (Business instance) => instance.appleAppSiteAssociation, externalInstancePropertyWriter: (Business instance, value) => instance.appleAppSiteAssociation = value),
      'appleAuthClientId': VmProxy(identifier: 'appleAuthClientId', externalInstancePropertyReader: (Business instance) => instance.appleAuthClientId, externalInstancePropertyWriter: (Business instance, value) => instance.appleAuthClientId = value),
      'appleAuthKeyId': VmProxy(identifier: 'appleAuthKeyId', externalInstancePropertyReader: (Business instance) => instance.appleAuthKeyId, externalInstancePropertyWriter: (Business instance, value) => instance.appleAuthKeyId = value),
      'appleAuthRedirectUri': VmProxy(identifier: 'appleAuthRedirectUri', externalInstancePropertyReader: (Business instance) => instance.appleAuthRedirectUri, externalInstancePropertyWriter: (Business instance, value) => instance.appleAuthRedirectUri = value),
      'appleAuthTeamId': VmProxy(identifier: 'appleAuthTeamId', externalInstancePropertyReader: (Business instance) => instance.appleAuthTeamId, externalInstancePropertyWriter: (Business instance, value) => instance.appleAuthTeamId = value),
      'appleKeyP8': VmProxy(identifier: 'appleKeyP8', externalInstancePropertyReader: (Business instance) => instance.appleKeyP8, externalInstancePropertyWriter: (Business instance, value) => instance.appleKeyP8 = value),
      'appleKeyP8Public': VmProxy(identifier: 'appleKeyP8Public', externalInstancePropertyReader: (Business instance) => instance.appleKeyP8Public, externalInstancePropertyWriter: (Business instance, value) => instance.appleKeyP8Public = value),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Business instance) => instance.buildTarget),
      'cashoutRate': VmProxy(identifier: 'cashoutRate', externalInstancePropertyReader: (Business instance) => instance.cashoutRate, externalInstancePropertyWriter: (Business instance, value) => instance.cashoutRate = value),
      'cashStyleList': VmProxy(identifier: 'cashStyleList', externalInstancePropertyReader: (Business instance) => instance.cashStyleList, externalInstancePropertyWriter: (Business instance, value) => instance.cashStyleList = value),
      'customXAdminNos': VmProxy(identifier: 'customXAdminNos', externalInstancePropertyReader: (Business instance) => instance.customXAdminNos, externalInstancePropertyWriter: (Business instance, value) => instance.customXAdminNos = value),
      'customXOwnerNos': VmProxy(identifier: 'customXOwnerNos', externalInstancePropertyReader: (Business instance) => instance.customXOwnerNos, externalInstancePropertyWriter: (Business instance, value) => instance.customXOwnerNos = value),
      'customXStateNos': VmProxy(identifier: 'customXStateNos', externalInstancePropertyReader: (Business instance) => instance.customXStateNos, externalInstancePropertyWriter: (Business instance, value) => instance.customXStateNos = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyReader: (Business instance) => instance.desc, externalInstancePropertyWriter: (Business instance, value) => instance.desc = value),
      'email': VmProxy(identifier: 'email', externalInstancePropertyReader: (Business instance) => instance.email, externalInstancePropertyWriter: (Business instance, value) => instance.email = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Business instance) => instance.extra),
      'groupIds': VmProxy(identifier: 'groupIds', externalInstancePropertyReader: (Business instance) => instance.groupIds, externalInstancePropertyWriter: (Business instance, value) => instance.groupIds = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Business instance) => instance.hashCode),
      'iceServerList': VmProxy(identifier: 'iceServerList', externalInstancePropertyReader: (Business instance) => instance.iceServerList, externalInstancePropertyWriter: (Business instance, value) => instance.iceServerList = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyReader: (Business instance) => instance.icon, externalInstancePropertyWriter: (Business instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Business instance) => instance.id),
      'language': VmProxy(identifier: 'language', externalInstancePropertyReader: (Business instance) => instance.language, externalInstancePropertyWriter: (Business instance, value) => instance.language = value),
      'minsdkv': VmProxy(identifier: 'minsdkv', externalInstancePropertyReader: (Business instance) => instance.minsdkv, externalInstancePropertyWriter: (Business instance, value) => instance.minsdkv = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyReader: (Business instance) => instance.nick, externalInstancePropertyWriter: (Business instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyReader: (Business instance) => instance.no, externalInstancePropertyWriter: (Business instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Business instance) => instance.noSuchMethod),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyReader: (Business instance) => instance.phone, externalInstancePropertyWriter: (Business instance, value) => instance.phone = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyReader: (Business instance) => instance.pwd, externalInstancePropertyWriter: (Business instance, value) => instance.pwd = value),
      'rechargeGoodsList': VmProxy(identifier: 'rechargeGoodsList', externalInstancePropertyReader: (Business instance) => instance.rechargeGoodsList, externalInstancePropertyWriter: (Business instance, value) => instance.rechargeGoodsList = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Business instance) => instance.runtimeType),
      'secret': VmProxy(identifier: 'secret', externalInstancePropertyReader: (Business instance) => instance.secret, externalInstancePropertyWriter: (Business instance, value) => instance.secret = value),
      'staffIds': VmProxy(identifier: 'staffIds', externalInstancePropertyReader: (Business instance) => instance.staffIds, externalInstancePropertyWriter: (Business instance, value) => instance.staffIds = value),
      'systemUid': VmProxy(identifier: 'systemUid', externalInstancePropertyReader: (Business instance) => instance.systemUid, externalInstancePropertyWriter: (Business instance, value) => instance.systemUid = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Business instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Business instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Business instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Business instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Business instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Business instance) => instance.updateByKValues),
      'version': VmProxy(identifier: 'version', externalInstancePropertyReader: (Business instance) => instance.version, externalInstancePropertyWriter: (Business instance, value) => instance.version = value),
      'virvalueGoodsList': VmProxy(identifier: 'virvalueGoodsList', externalInstancePropertyReader: (Business instance) => instance.virvalueGoodsList, externalInstancePropertyWriter: (Business instance, value) => instance.virvalueGoodsList = value),
      'vritualRate': VmProxy(identifier: 'vritualRate', externalInstancePropertyReader: (Business instance) => instance.vritualRate, externalInstancePropertyWriter: (Business instance, value) => instance.vritualRate = value),
      'wechatAppId': VmProxy(identifier: 'wechatAppId', externalInstancePropertyReader: (Business instance) => instance.wechatAppId, externalInstancePropertyWriter: (Business instance, value) => instance.wechatAppId = value),
      'wechatAppSecret': VmProxy(identifier: 'wechatAppSecret', externalInstancePropertyReader: (Business instance) => instance.wechatAppSecret, externalInstancePropertyWriter: (Business instance, value) => instance.wechatAppSecret = value),
      'wechatMchId': VmProxy(identifier: 'wechatMchId', externalInstancePropertyReader: (Business instance) => instance.wechatMchId, externalInstancePropertyWriter: (Business instance, value) => instance.wechatMchId = value),
      'wechatMchSecret': VmProxy(identifier: 'wechatMchSecret', externalInstancePropertyReader: (Business instance) => instance.wechatMchSecret, externalInstancePropertyWriter: (Business instance, value) => instance.wechatMchSecret = value),
    },
  );

  ///class BusinessDirty
  static final classBusinessDirty = VmClass<BusinessDirty>(
    identifier: 'BusinessDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => BusinessDirty.new),
      'adminIds': VmProxy(identifier: 'adminIds', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.adminIds = value),
      'aliamapAndroidKey': VmProxy(identifier: 'aliamapAndroidKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.aliamapAndroidKey = value),
      'aliamapIosKey': VmProxy(identifier: 'aliamapIosKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.aliamapIosKey = value),
      'aliamapWebKey': VmProxy(identifier: 'aliamapWebKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.aliamapWebKey = value),
      'alipayAesKey': VmProxy(identifier: 'alipayAesKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayAesKey = value),
      'alipayAppId': VmProxy(identifier: 'alipayAppId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayAppId = value),
      'alipayAppPrivateKey': VmProxy(identifier: 'alipayAppPrivateKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayAppPrivateKey = value),
      'alipayCertAppPublicKey': VmProxy(identifier: 'alipayCertAppPublicKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayCertAppPublicKey = value),
      'alipayCertPublicKey': VmProxy(identifier: 'alipayCertPublicKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayCertPublicKey = value),
      'alipayCertRootKey': VmProxy(identifier: 'alipayCertRootKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayCertRootKey = value),
      'alipayPublicKey': VmProxy(identifier: 'alipayPublicKey', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alipayPublicKey = value),
      'alismsAccessKeyId': VmProxy(identifier: 'alismsAccessKeyId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsAccessKeyId = value),
      'alismsAccessKeySecret': VmProxy(identifier: 'alismsAccessKeySecret', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsAccessKeySecret = value),
      'alismsApiVersion': VmProxy(identifier: 'alismsApiVersion', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsApiVersion = value),
      'alismsEndpoint': VmProxy(identifier: 'alismsEndpoint', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsEndpoint = value),
      'alismsSignName': VmProxy(identifier: 'alismsSignName', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsSignName = value),
      'alismsTemplateCode': VmProxy(identifier: 'alismsTemplateCode', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.alismsTemplateCode = value),
      'appleAppSiteAssociation': VmProxy(identifier: 'appleAppSiteAssociation', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleAppSiteAssociation = value),
      'appleAuthClientId': VmProxy(identifier: 'appleAuthClientId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleAuthClientId = value),
      'appleAuthKeyId': VmProxy(identifier: 'appleAuthKeyId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleAuthKeyId = value),
      'appleAuthRedirectUri': VmProxy(identifier: 'appleAuthRedirectUri', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleAuthRedirectUri = value),
      'appleAuthTeamId': VmProxy(identifier: 'appleAuthTeamId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleAuthTeamId = value),
      'appleKeyP8': VmProxy(identifier: 'appleKeyP8', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleKeyP8 = value),
      'appleKeyP8Public': VmProxy(identifier: 'appleKeyP8Public', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.appleKeyP8Public = value),
      'cashoutRate': VmProxy(identifier: 'cashoutRate', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.cashoutRate = value),
      'cashStyleList': VmProxy(identifier: 'cashStyleList', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.cashStyleList = value),
      'customXAdminNos': VmProxy(identifier: 'customXAdminNos', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.customXAdminNos = value),
      'customXOwnerNos': VmProxy(identifier: 'customXOwnerNos', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.customXOwnerNos = value),
      'customXStateNos': VmProxy(identifier: 'customXStateNos', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.customXStateNos = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (BusinessDirty instance) => instance.data),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.desc = value),
      'email': VmProxy(identifier: 'email', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.email = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.extra = value),
      'groupIds': VmProxy(identifier: 'groupIds', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.groupIds = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (BusinessDirty instance) => instance.hashCode),
      'iceServerList': VmProxy(identifier: 'iceServerList', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.iceServerList = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.id = value),
      'language': VmProxy(identifier: 'language', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.language = value),
      'minsdkv': VmProxy(identifier: 'minsdkv', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.minsdkv = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (BusinessDirty instance) => instance.noSuchMethod),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.phone = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.pwd = value),
      'rechargeGoodsList': VmProxy(identifier: 'rechargeGoodsList', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.rechargeGoodsList = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (BusinessDirty instance) => instance.runtimeType),
      'secret': VmProxy(identifier: 'secret', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.secret = value),
      'staffIds': VmProxy(identifier: 'staffIds', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.staffIds = value),
      'systemUid': VmProxy(identifier: 'systemUid', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.systemUid = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (BusinessDirty instance) => instance.toString),
      'version': VmProxy(identifier: 'version', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.version = value),
      'virvalueGoodsList': VmProxy(identifier: 'virvalueGoodsList', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.virvalueGoodsList = value),
      'vritualRate': VmProxy(identifier: 'vritualRate', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.vritualRate = value),
      'wechatAppId': VmProxy(identifier: 'wechatAppId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.wechatAppId = value),
      'wechatAppSecret': VmProxy(identifier: 'wechatAppSecret', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.wechatAppSecret = value),
      'wechatMchId': VmProxy(identifier: 'wechatMchId', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.wechatMchId = value),
      'wechatMchSecret': VmProxy(identifier: 'wechatMchSecret', externalInstancePropertyWriter: (BusinessDirty instance, value) => instance.wechatMchSecret = value),
    },
  );

  ///class CodeFile
  static final classCodeFile = VmClass<CodeFile>(
    identifier: 'CodeFile',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CodeFile.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => CodeFile.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => CodeFile.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (CodeFile instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (CodeFile instance) => instance.buildTarget),
      'content': VmProxy(identifier: 'content', externalInstancePropertyReader: (CodeFile instance) => instance.content, externalInstancePropertyWriter: (CodeFile instance, value) => instance.content = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (CodeFile instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CodeFile instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (CodeFile instance) => instance.id),
      'md5key': VmProxy(identifier: 'md5key', externalInstancePropertyReader: (CodeFile instance) => instance.md5key, externalInstancePropertyWriter: (CodeFile instance, value) => instance.md5key = value),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (CodeFile instance) => instance.name, externalInstancePropertyWriter: (CodeFile instance, value) => instance.name = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CodeFile instance) => instance.noSuchMethod),
      'order': VmProxy(identifier: 'order', externalInstancePropertyReader: (CodeFile instance) => instance.order, externalInstancePropertyWriter: (CodeFile instance, value) => instance.order = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CodeFile instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (CodeFile instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (CodeFile instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (CodeFile instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CodeFile instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (CodeFile instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (CodeFile instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (CodeFile instance) => instance.updateByKValues),
      'version': VmProxy(identifier: 'version', externalInstancePropertyReader: (CodeFile instance) => instance.version, externalInstancePropertyWriter: (CodeFile instance, value) => instance.version = value),
    },
  );

  ///class CodeFileDirty
  static final classCodeFileDirty = VmClass<CodeFileDirty>(
    identifier: 'CodeFileDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CodeFileDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.bsid = value),
      'content': VmProxy(identifier: 'content', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.content = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (CodeFileDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CodeFileDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.id = value),
      'md5key': VmProxy(identifier: 'md5key', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.md5key = value),
      'name': VmProxy(identifier: 'name', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.name = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CodeFileDirty instance) => instance.noSuchMethod),
      'order': VmProxy(identifier: 'order', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.order = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CodeFileDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CodeFileDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.trans = value),
      'version': VmProxy(identifier: 'version', externalInstancePropertyWriter: (CodeFileDirty instance, value) => instance.version = value),
    },
  );

  ///class ComPage
  static final classComPage = VmClass<ComPage>(
    identifier: 'ComPage',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ComPage.new),
      'copyCustomXPage': VmProxy(identifier: 'copyCustomXPage', externalStaticPropertyReader: () => ComPage.copyCustomXPage),
      'newBusinessPage': VmProxy(identifier: 'newBusinessPage', externalStaticPropertyReader: () => ComPage.newBusinessPage),
      'newConstantPage': VmProxy(identifier: 'newConstantPage', externalStaticPropertyReader: () => ComPage.newConstantPage),
      'newCusincXPage': VmProxy(identifier: 'newCusincXPage', externalStaticPropertyReader: () => ComPage.newCusincXPage),
      'newCusmarkPage': VmProxy(identifier: 'newCusmarkPage', externalStaticPropertyReader: () => ComPage.newCusmarkPage),
      'newCusstarPage': VmProxy(identifier: 'newCusstarPage', externalStaticPropertyReader: () => ComPage.newCusstarPage),
      'newCustomXPage': VmProxy(identifier: 'newCustomXPage', externalStaticPropertyReader: () => ComPage.newCustomXPage),
      'newLocationPage': VmProxy(identifier: 'newLocationPage', externalStaticPropertyReader: () => ComPage.newLocationPage),
      'newLogErrorPage': VmProxy(identifier: 'newLogErrorPage', externalStaticPropertyReader: () => ComPage.newLogErrorPage),
      'newLogLoginPage': VmProxy(identifier: 'newLogLoginPage', externalStaticPropertyReader: () => ComPage.newLogLoginPage),
      'newLogReportPage': VmProxy(identifier: 'newLogReportPage', externalStaticPropertyReader: () => ComPage.newLogReportPage),
      'newMessagePage': VmProxy(identifier: 'newMessagePage', externalStaticPropertyReader: () => ComPage.newMessagePage),
      'newMetadataPage': VmProxy(identifier: 'newMetadataPage', externalStaticPropertyReader: () => ComPage.newMetadataPage),
      'newPayGoodsPage': VmProxy(identifier: 'newPayGoodsPage', externalStaticPropertyReader: () => ComPage.newPayGoodsPage),
      'newPaymentPage': VmProxy(identifier: 'newPaymentPage', externalStaticPropertyReader: () => ComPage.newPaymentPage),
      'newRandcodePage': VmProxy(identifier: 'newRandcodePage', externalStaticPropertyReader: () => ComPage.newRandcodePage),
      'newTeamPage': VmProxy(identifier: 'newTeamPage', externalStaticPropertyReader: () => ComPage.newTeamPage),
      'newTeamShipPage': VmProxy(identifier: 'newTeamShipPage', externalStaticPropertyReader: () => ComPage.newTeamShipPage),
      'newUserPage': VmProxy(identifier: 'newUserPage', externalStaticPropertyReader: () => ComPage.newUserPage),
      'newUserShipPage': VmProxy(identifier: 'newUserShipPage', externalStaticPropertyReader: () => ComPage.newUserShipPage),
      'newValidatorPage': VmProxy(identifier: 'newValidatorPage', externalStaticPropertyReader: () => ComPage.newValidatorPage),
      'repeatWindowSize': VmProxy(identifier: 'repeatWindowSize', externalStaticPropertyReader: () => ComPage.repeatWindowSize, externalStaticPropertyWriter: (value) => ComPage.repeatWindowSize = value),
      'append': VmProxy(identifier: 'append', externalInstancePropertyReader: (ComPage instance) => instance.append, externalInstanceFunctionCaller: (ComPage instance, a0, a1) => instance.append(a0, (b0, b1) => a1(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ComPage instance) => instance.hashCode),
      'no': VmProxy(identifier: 'no', externalInstancePropertyReader: (ComPage instance) => instance.no),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ComPage instance) => instance.noSuchMethod),
      'page': VmProxy(identifier: 'page', externalInstancePropertyReader: (ComPage instance) => instance.page, externalInstancePropertyWriter: (ComPage instance, value) => instance.page = value),
      'pgasync': VmProxy(identifier: 'pgasync', externalInstancePropertyReader: (ComPage instance) => instance.pgasync, externalInstancePropertyWriter: (ComPage instance, value) => instance.pgasync = value),
      'pgcache': VmProxy(identifier: 'pgcache', externalInstancePropertyReader: (ComPage instance) => instance.pgcache),
      'pgloaded': VmProxy(identifier: 'pgloaded', externalInstancePropertyReader: (ComPage instance) => instance.pgloaded, externalInstancePropertyWriter: (ComPage instance, value) => instance.pgloaded = value),
      'pgskip': VmProxy(identifier: 'pgskip', externalInstancePropertyReader: (ComPage instance) => instance.pgskip, externalInstancePropertyWriter: (ComPage instance, value) => instance.pgskip = value),
      'resetPgStates': VmProxy(identifier: 'resetPgStates', externalInstancePropertyReader: (ComPage instance) => instance.resetPgStates),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ComPage instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ComPage instance) => instance.toString),
      'total': VmProxy(identifier: 'total', externalInstancePropertyReader: (ComPage instance) => instance.total, externalInstancePropertyWriter: (ComPage instance, value) => instance.total = value),
    },
  );

  ///class ComTools
  static final classComTools = VmClass<ComTools>(
    identifier: 'ComTools',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ComTools.new),
      'createRedpackNoticeForReturn': VmProxy(identifier: 'createRedpackNoticeForReturn', externalStaticPropertyReader: () => ComTools.createRedpackNoticeForReturn),
      'createRedpackNoticeForSnatch': VmProxy(identifier: 'createRedpackNoticeForSnatch', externalStaticPropertyReader: () => ComTools.createRedpackNoticeForSnatch),
      'formatCNcharacters': VmProxy(identifier: 'formatCNcharacters', externalStaticPropertyReader: () => ComTools.formatCNcharacters),
      'formatDateTime': VmProxy(identifier: 'formatDateTime', externalStaticPropertyReader: () => ComTools.formatDateTime),
      'formatDenyDateTime': VmProxy(identifier: 'formatDenyDateTime', externalStaticPropertyReader: () => ComTools.formatDenyDateTime),
      'formatDurationTime': VmProxy(identifier: 'formatDurationTime', externalStaticPropertyReader: () => ComTools.formatDurationTime),
      'formatLocationShowArea': VmProxy(identifier: 'formatLocationShowArea', externalStaticPropertyReader: () => ComTools.formatLocationShowArea),
      'formatTeamNick': VmProxy(identifier: 'formatTeamNick', externalStaticPropertyReader: () => ComTools.formatTeamNick),
      'formatTeamUserNick': VmProxy(identifier: 'formatTeamUserNick', externalStaticPropertyReader: () => ComTools.formatTeamUserNick),
      'formatUserNick': VmProxy(identifier: 'formatUserNick', externalStaticPropertyReader: () => ComTools.formatUserNick),
      'formatUserNo': VmProxy(identifier: 'formatUserNo', externalStaticPropertyReader: () => ComTools.formatUserNo),
      'formatUserShipNick': VmProxy(identifier: 'formatUserShipNick', externalStaticPropertyReader: () => ComTools.formatUserShipNick),
      'formatUserShowArea': VmProxy(identifier: 'formatUserShowArea', externalStaticPropertyReader: () => ComTools.formatUserShowArea),
      'formatWaitShipApply': VmProxy(identifier: 'formatWaitShipApply', externalStaticPropertyReader: () => ComTools.formatWaitShipApply),
      'generateUserEnterSign': VmProxy(identifier: 'generateUserEnterSign', externalStaticPropertyReader: () => ComTools.generateUserEnterSign),
      'getDayEndMillisByDateOffset': VmProxy(identifier: 'getDayEndMillisByDateOffset', externalStaticPropertyReader: () => ComTools.getDayEndMillisByDateOffset),
      'getDayStartMillisByDateOffset': VmProxy(identifier: 'getDayStartMillisByDateOffset', externalStaticPropertyReader: () => ComTools.getDayStartMillisByDateOffset),
      'getLuckUserIdFromRedpackNotice': VmProxy(identifier: 'getLuckUserIdFromRedpackNotice', externalStaticPropertyReader: () => ComTools.getLuckUserIdFromRedpackNotice),
      'getRelationIdFromRedpackNotice': VmProxy(identifier: 'getRelationIdFromRedpackNotice', externalStaticPropertyReader: () => ComTools.getRelationIdFromRedpackNotice),
      'getSendUserIdFromRedpackNotice': VmProxy(identifier: 'getSendUserIdFromRedpackNotice', externalStaticPropertyReader: () => ComTools.getSendUserIdFromRedpackNotice),
      'isRedpackReturnNotice': VmProxy(identifier: 'isRedpackReturnNotice', externalStaticPropertyReader: () => ComTools.isRedpackReturnNotice),
      'isRedpackSnatchNotice': VmProxy(identifier: 'isRedpackSnatchNotice', externalStaticPropertyReader: () => ComTools.isRedpackSnatchNotice),
      'isTeamAdmin': VmProxy(identifier: 'isTeamAdmin', externalStaticPropertyReader: () => ComTools.isTeamAdmin),
      'isTeamNormalAdmin': VmProxy(identifier: 'isTeamNormalAdmin', externalStaticPropertyReader: () => ComTools.isTeamNormalAdmin),
      'isTeamShipFromSystem': VmProxy(identifier: 'isTeamShipFromSystem', externalStaticPropertyReader: () => ComTools.isTeamShipFromSystem),
      'isTeamSuperAdmin': VmProxy(identifier: 'isTeamSuperAdmin', externalStaticPropertyReader: () => ComTools.isTeamSuperAdmin),
      'isUserShipFromSystem': VmProxy(identifier: 'isUserShipFromSystem', externalStaticPropertyReader: () => ComTools.isUserShipFromSystem),
      'rmbfenToRmbYuan': VmProxy(identifier: 'rmbfenToRmbYuan', externalStaticPropertyReader: () => ComTools.rmbfenToRmbYuan),
      'translateConstant': VmProxy(identifier: 'translateConstant', externalStaticPropertyReader: () => ComTools.translateConstant),
      'validateUserEnterSign': VmProxy(identifier: 'validateUserEnterSign', externalStaticPropertyReader: () => ComTools.validateUserEnterSign),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ComTools instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ComTools instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ComTools instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ComTools instance) => instance.toString),
    },
  );

  ///class Constant
  static final classConstant = VmClass<Constant>(
    identifier: 'Constant',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Constant.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Constant.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Constant.fromString),
      'constMap': VmProxy(identifier: 'constMap', externalStaticPropertyReader: () => Constant.constMap),
      'customxStateDeny': VmProxy(identifier: 'customxStateDeny', externalStaticPropertyReader: () => Constant.customxStateDeny),
      'customxStateDump': VmProxy(identifier: 'customxStateDump', externalStaticPropertyReader: () => Constant.customxStateDump),
      'customxStateEdit': VmProxy(identifier: 'customxStateEdit', externalStaticPropertyReader: () => Constant.customxStateEdit),
      'customxStatePass': VmProxy(identifier: 'customxStatePass', externalStaticPropertyReader: () => Constant.customxStatePass),
      'customxStateWait': VmProxy(identifier: 'customxStateWait', externalStaticPropertyReader: () => Constant.customxStateWait),
      'denyDestroy': VmProxy(identifier: 'denyDestroy', externalStaticPropertyReader: () => Constant.denyDestroy),
      'denyForever': VmProxy(identifier: 'denyForever', externalStaticPropertyReader: () => Constant.denyForever),
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Constant.empty),
      'metaTypeForever': VmProxy(identifier: 'metaTypeForever', externalStaticPropertyReader: () => Constant.metaTypeForever),
      'metaTypeMessage': VmProxy(identifier: 'metaTypeMessage', externalStaticPropertyReader: () => Constant.metaTypeMessage),
      'msgFromTeam': VmProxy(identifier: 'msgFromTeam', externalStaticPropertyReader: () => Constant.msgFromTeam),
      'msgFromUser': VmProxy(identifier: 'msgFromUser', externalStaticPropertyReader: () => Constant.msgFromUser),
      'msgTypeCustom': VmProxy(identifier: 'msgTypeCustom', externalStaticPropertyReader: () => Constant.msgTypeCustom),
      'msgTypeImage': VmProxy(identifier: 'msgTypeImage', externalStaticPropertyReader: () => Constant.msgTypeImage),
      'msgTypeRealtimeLocal': VmProxy(identifier: 'msgTypeRealtimeLocal', externalStaticPropertyReader: () => Constant.msgTypeRealtimeLocal),
      'msgTypeRealtimeShare': VmProxy(identifier: 'msgTypeRealtimeShare', externalStaticPropertyReader: () => Constant.msgTypeRealtimeShare),
      'msgTypeRealtimeVideo': VmProxy(identifier: 'msgTypeRealtimeVideo', externalStaticPropertyReader: () => Constant.msgTypeRealtimeVideo),
      'msgTypeRealtimeVoice': VmProxy(identifier: 'msgTypeRealtimeVoice', externalStaticPropertyReader: () => Constant.msgTypeRealtimeVoice),
      'msgTypeRedpackLuckly': VmProxy(identifier: 'msgTypeRedpackLuckly', externalStaticPropertyReader: () => Constant.msgTypeRedpackLuckly),
      'msgTypeRedpackNormal': VmProxy(identifier: 'msgTypeRedpackNormal', externalStaticPropertyReader: () => Constant.msgTypeRedpackNormal),
      'msgTypeRedpackNotice': VmProxy(identifier: 'msgTypeRedpackNotice', externalStaticPropertyReader: () => Constant.msgTypeRedpackNotice),
      'msgTypeShareCardTeam': VmProxy(identifier: 'msgTypeShareCardTeam', externalStaticPropertyReader: () => Constant.msgTypeShareCardTeam),
      'msgTypeShareCardUser': VmProxy(identifier: 'msgTypeShareCardUser', externalStaticPropertyReader: () => Constant.msgTypeShareCardUser),
      'msgTypeShareHtmlPage': VmProxy(identifier: 'msgTypeShareHtmlPage', externalStaticPropertyReader: () => Constant.msgTypeShareHtmlPage),
      'msgTypeShareLocation': VmProxy(identifier: 'msgTypeShareLocation', externalStaticPropertyReader: () => Constant.msgTypeShareLocation),
      'msgTypeSystem': VmProxy(identifier: 'msgTypeSystem', externalStaticPropertyReader: () => Constant.msgTypeSystem),
      'msgTypeText': VmProxy(identifier: 'msgTypeText', externalStaticPropertyReader: () => Constant.msgTypeText),
      'msgTypeVideo': VmProxy(identifier: 'msgTypeVideo', externalStaticPropertyReader: () => Constant.msgTypeVideo),
      'msgTypeVoice': VmProxy(identifier: 'msgTypeVoice', externalStaticPropertyReader: () => Constant.msgTypeVoice),
      'payStateApplied': VmProxy(identifier: 'payStateApplied', externalStaticPropertyReader: () => Constant.payStateApplied),
      'payStateCanceled': VmProxy(identifier: 'payStateCanceled', externalStaticPropertyReader: () => Constant.payStateCanceled),
      'payStateCashError': VmProxy(identifier: 'payStateCashError', externalStaticPropertyReader: () => Constant.payStateCashError),
      'payStateFinished': VmProxy(identifier: 'payStateFinished', externalStaticPropertyReader: () => Constant.payStateFinished),
      'payStateInitial': VmProxy(identifier: 'payStateInitial', externalStaticPropertyReader: () => Constant.payStateInitial),
      'payStateMaxNotify': VmProxy(identifier: 'payStateMaxNotify', externalStaticPropertyReader: () => Constant.payStateMaxNotify),
      'payStateMaxVerify': VmProxy(identifier: 'payStateMaxVerify', externalStaticPropertyReader: () => Constant.payStateMaxVerify),
      'payStatePending': VmProxy(identifier: 'payStatePending', externalStaticPropertyReader: () => Constant.payStatePending),
      'payTypeConsumeCashout': VmProxy(identifier: 'payTypeConsumeCashout', externalStaticPropertyReader: () => Constant.payTypeConsumeCashout),
      'payTypeConsumeRedpackSend': VmProxy(identifier: 'payTypeConsumeRedpackSend', externalStaticPropertyReader: () => Constant.payTypeConsumeRedpackSend),
      'payTypeConsumeVirtual': VmProxy(identifier: 'payTypeConsumeVirtual', externalStaticPropertyReader: () => Constant.payTypeConsumeVirtual),
      'payTypeRechargeAlipay': VmProxy(identifier: 'payTypeRechargeAlipay', externalStaticPropertyReader: () => Constant.payTypeRechargeAlipay),
      'payTypeRechargeApple': VmProxy(identifier: 'payTypeRechargeApple', externalStaticPropertyReader: () => Constant.payTypeRechargeApple),
      'payTypeRechargeWechat': VmProxy(identifier: 'payTypeRechargeWechat', externalStaticPropertyReader: () => Constant.payTypeRechargeWechat),
      'payTypeRecivedBonuses': VmProxy(identifier: 'payTypeRecivedBonuses', externalStaticPropertyReader: () => Constant.payTypeRecivedBonuses),
      'payTypeRecivedRedpackReturn': VmProxy(identifier: 'payTypeRecivedRedpackReturn', externalStaticPropertyReader: () => Constant.payTypeRecivedRedpackReturn),
      'payTypeRecivedRedpackSnatch': VmProxy(identifier: 'payTypeRecivedRedpackSnatch', externalStaticPropertyReader: () => Constant.payTypeRecivedRedpackSnatch),
      'reportStateDeny': VmProxy(identifier: 'reportStateDeny', externalStaticPropertyReader: () => Constant.reportStateDeny),
      'reportStatePass': VmProxy(identifier: 'reportStatePass', externalStaticPropertyReader: () => Constant.reportStatePass),
      'reportStateWait': VmProxy(identifier: 'reportStateWait', externalStaticPropertyReader: () => Constant.reportStateWait),
      'reportTypeData': VmProxy(identifier: 'reportTypeData', externalStaticPropertyReader: () => Constant.reportTypeData),
      'reportTypeHost': VmProxy(identifier: 'reportTypeHost', externalStaticPropertyReader: () => Constant.reportTypeHost),
      'reportTypeIdea': VmProxy(identifier: 'reportTypeIdea', externalStaticPropertyReader: () => Constant.reportTypeIdea),
      'reportTypeTeam': VmProxy(identifier: 'reportTypeTeam', externalStaticPropertyReader: () => Constant.reportTypeTeam),
      'reportTypeUser': VmProxy(identifier: 'reportTypeUser', externalStaticPropertyReader: () => Constant.reportTypeUser),
      'shipFromMember': VmProxy(identifier: 'shipFromMember', externalStaticPropertyReader: () => Constant.shipFromMember),
      'shipFromQrcode': VmProxy(identifier: 'shipFromQrcode', externalStaticPropertyReader: () => Constant.shipFromQrcode),
      'shipFromSearch': VmProxy(identifier: 'shipFromSearch', externalStaticPropertyReader: () => Constant.shipFromSearch),
      'shipFromServiceHelper': VmProxy(identifier: 'shipFromServiceHelper', externalStaticPropertyReader: () => Constant.shipFromServiceHelper),
      'shipFromShareCard': VmProxy(identifier: 'shipFromShareCard', externalStaticPropertyReader: () => Constant.shipFromShareCard),
      'shipFromSystemHelper': VmProxy(identifier: 'shipFromSystemHelper', externalStaticPropertyReader: () => Constant.shipFromSystemHelper),
      'shipFromTeamCreator': VmProxy(identifier: 'shipFromTeamCreator', externalStaticPropertyReader: () => Constant.shipFromTeamCreator),
      'shipFromTeamPulledIn': VmProxy(identifier: 'shipFromTeamPulledIn', externalStaticPropertyReader: () => Constant.shipFromTeamPulledIn),
      'shipStateNone': VmProxy(identifier: 'shipStateNone', externalStaticPropertyReader: () => Constant.shipStateNone),
      'shipStatePass': VmProxy(identifier: 'shipStatePass', externalStaticPropertyReader: () => Constant.shipStatePass),
      'shipStateWait': VmProxy(identifier: 'shipStateWait', externalStaticPropertyReader: () => Constant.shipStateWait),
      'userSexFemale': VmProxy(identifier: 'userSexFemale', externalStaticPropertyReader: () => Constant.userSexFemale),
      'userSexMale': VmProxy(identifier: 'userSexMale', externalStaticPropertyReader: () => Constant.userSexMale),
      'userThirdAlipay': VmProxy(identifier: 'userThirdAlipay', externalStaticPropertyReader: () => Constant.userThirdAlipay),
      'userThirdApple': VmProxy(identifier: 'userThirdApple', externalStaticPropertyReader: () => Constant.userThirdApple),
      'userThirdCustom': VmProxy(identifier: 'userThirdCustom', externalStaticPropertyReader: () => Constant.userThirdCustom),
      'userThirdWechat': VmProxy(identifier: 'userThirdWechat', externalStaticPropertyReader: () => Constant.userThirdWechat),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Constant instance) => instance.buildTarget),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Constant instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Constant instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Constant instance) => instance.runtimeType),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Constant instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Constant instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Constant instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Constant instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Constant instance) => instance.updateByKValues),
    },
  );

  ///class CusincX
  static final classCusincX = VmClass<CusincX>(
    identifier: 'CusincX',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CusincX.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => CusincX.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => CusincX.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (CusincX instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (CusincX instance) => instance.buildTarget),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (CusincX instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CusincX instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (CusincX instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CusincX instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CusincX instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (CusincX instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (CusincX instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (CusincX instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CusincX instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (CusincX instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (CusincX instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (CusincX instance) => instance.updateByKValues),
    },
  );

  ///class CusincXDirty
  static final classCusincXDirty = VmClass<CusincXDirty>(
    identifier: 'CusincXDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CusincXDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (CusincXDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (CusincXDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (CusincXDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CusincXDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (CusincXDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CusincXDirty instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CusincXDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (CusincXDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CusincXDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (CusincXDirty instance, value) => instance.trans = value),
    },
  );

  ///class Cusmark
  static final classCusmark = VmClass<Cusmark>(
    identifier: 'Cusmark',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Cusmark.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Cusmark.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Cusmark.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Cusmark instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Cusmark instance) => instance.buildTarget),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Cusmark instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Cusmark instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Cusmark instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Cusmark instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (Cusmark instance) => instance.rid, externalInstancePropertyWriter: (Cusmark instance, value) => instance.rid = value),
      'rtp': VmProxy(identifier: 'rtp', externalInstancePropertyReader: (Cusmark instance) => instance.rtp, externalInstancePropertyWriter: (Cusmark instance, value) => instance.rtp = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Cusmark instance) => instance.runtimeType),
      'score': VmProxy(identifier: 'score', externalInstancePropertyReader: (Cusmark instance) => instance.score, externalInstancePropertyWriter: (Cusmark instance, value) => instance.score = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Cusmark instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Cusmark instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Cusmark instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Cusmark instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Cusmark instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Cusmark instance) => instance.uid, externalInstancePropertyWriter: (Cusmark instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Cusmark instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Cusmark instance) => instance.updateByKValues),
    },
  );

  ///class CusmarkDirty
  static final classCusmarkDirty = VmClass<CusmarkDirty>(
    identifier: 'CusmarkDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CusmarkDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (CusmarkDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CusmarkDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CusmarkDirty instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.rid = value),
      'rtp': VmProxy(identifier: 'rtp', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.rtp = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CusmarkDirty instance) => instance.runtimeType),
      'score': VmProxy(identifier: 'score', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.score = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CusmarkDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (CusmarkDirty instance, value) => instance.uid = value),
    },
  );

  ///class Cusstar
  static final classCusstar = VmClass<Cusstar>(
    identifier: 'Cusstar',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Cusstar.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Cusstar.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Cusstar.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Cusstar instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Cusstar instance) => instance.buildTarget),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Cusstar instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Cusstar instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Cusstar instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Cusstar instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (Cusstar instance) => instance.rid, externalInstancePropertyWriter: (Cusstar instance, value) => instance.rid = value),
      'rtp': VmProxy(identifier: 'rtp', externalInstancePropertyReader: (Cusstar instance) => instance.rtp, externalInstancePropertyWriter: (Cusstar instance, value) => instance.rtp = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Cusstar instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Cusstar instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Cusstar instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Cusstar instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Cusstar instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Cusstar instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Cusstar instance) => instance.uid, externalInstancePropertyWriter: (Cusstar instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Cusstar instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Cusstar instance) => instance.updateByKValues),
    },
  );

  ///class CusstarDirty
  static final classCusstarDirty = VmClass<CusstarDirty>(
    identifier: 'CusstarDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CusstarDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (CusstarDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CusstarDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CusstarDirty instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.rid = value),
      'rtp': VmProxy(identifier: 'rtp', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.rtp = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CusstarDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CusstarDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (CusstarDirty instance, value) => instance.uid = value),
    },
  );

  ///class CustomX
  static final classCustomX = VmClass<CustomX>(
    identifier: 'CustomX',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CustomX.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => CustomX.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => CustomX.fromString),
      'body1': VmProxy(identifier: 'body1', externalInstancePropertyReader: (CustomX instance) => instance.body1, externalInstancePropertyWriter: (CustomX instance, value) => instance.body1 = value),
      'body2': VmProxy(identifier: 'body2', externalInstancePropertyReader: (CustomX instance) => instance.body2, externalInstancePropertyWriter: (CustomX instance, value) => instance.body2 = value),
      'body3': VmProxy(identifier: 'body3', externalInstancePropertyReader: (CustomX instance) => instance.body3, externalInstancePropertyWriter: (CustomX instance, value) => instance.body3 = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (CustomX instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (CustomX instance) => instance.buildTarget),
      'cnt1': VmProxy(identifier: 'cnt1', externalInstancePropertyReader: (CustomX instance) => instance.cnt1, externalInstancePropertyWriter: (CustomX instance, value) => instance.cnt1 = value),
      'cnt2': VmProxy(identifier: 'cnt2', externalInstancePropertyReader: (CustomX instance) => instance.cnt2, externalInstancePropertyWriter: (CustomX instance, value) => instance.cnt2 = value),
      'cnt3': VmProxy(identifier: 'cnt3', externalInstancePropertyReader: (CustomX instance) => instance.cnt3, externalInstancePropertyWriter: (CustomX instance, value) => instance.cnt3 = value),
      'cusmark': VmProxy(identifier: 'cusmark', externalInstancePropertyReader: (CustomX instance) => instance.cusmark, externalInstancePropertyWriter: (CustomX instance, value) => instance.cusmark = value),
      'cuspaid': VmProxy(identifier: 'cuspaid', externalInstancePropertyReader: (CustomX instance) => instance.cuspaid, externalInstancePropertyWriter: (CustomX instance, value) => instance.cuspaid = value),
      'cusstar': VmProxy(identifier: 'cusstar', externalInstancePropertyReader: (CustomX instance) => instance.cusstar, externalInstancePropertyWriter: (CustomX instance, value) => instance.cusstar = value),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyReader: (CustomX instance) => instance.deny, externalInstancePropertyWriter: (CustomX instance, value) => instance.deny = value),
      'earner': VmProxy(identifier: 'earner', externalInstancePropertyReader: (CustomX instance) => instance.earner, externalInstancePropertyWriter: (CustomX instance, value) => instance.earner = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (CustomX instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CustomX instance) => instance.hashCode),
      'hot1': VmProxy(identifier: 'hot1', externalInstancePropertyReader: (CustomX instance) => instance.hot1, externalInstancePropertyWriter: (CustomX instance, value) => instance.hot1 = value),
      'hot2': VmProxy(identifier: 'hot2', externalInstancePropertyReader: (CustomX instance) => instance.hot2, externalInstancePropertyWriter: (CustomX instance, value) => instance.hot2 = value),
      'hotx': VmProxy(identifier: 'hotx', externalInstancePropertyReader: (CustomX instance) => instance.hotx, externalInstancePropertyWriter: (CustomX instance, value) => instance.hotx = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (CustomX instance) => instance.id),
      'incxId': VmProxy(identifier: 'incxId', externalInstancePropertyReader: (CustomX instance) => instance.incxId, externalInstancePropertyWriter: (CustomX instance, value) => instance.incxId = value),
      'int1': VmProxy(identifier: 'int1', externalInstancePropertyReader: (CustomX instance) => instance.int1, externalInstancePropertyWriter: (CustomX instance, value) => instance.int1 = value),
      'int2': VmProxy(identifier: 'int2', externalInstancePropertyReader: (CustomX instance) => instance.int2, externalInstancePropertyWriter: (CustomX instance, value) => instance.int2 = value),
      'int3': VmProxy(identifier: 'int3', externalInstancePropertyReader: (CustomX instance) => instance.int3, externalInstancePropertyWriter: (CustomX instance, value) => instance.int3 = value),
      'mark': VmProxy(identifier: 'mark', externalInstancePropertyReader: (CustomX instance) => instance.mark, externalInstancePropertyWriter: (CustomX instance, value) => instance.mark = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CustomX instance) => instance.noSuchMethod),
      'pathId': VmProxy(identifier: 'pathId', externalInstancePropertyReader: (CustomX instance) => instance.pathId, externalInstancePropertyWriter: (CustomX instance, value) => instance.pathId = value),
      'rid1': VmProxy(identifier: 'rid1', externalInstancePropertyReader: (CustomX instance) => instance.rid1, externalInstancePropertyWriter: (CustomX instance, value) => instance.rid1 = value),
      'rid2': VmProxy(identifier: 'rid2', externalInstancePropertyReader: (CustomX instance) => instance.rid2, externalInstancePropertyWriter: (CustomX instance, value) => instance.rid2 = value),
      'rid3': VmProxy(identifier: 'rid3', externalInstancePropertyReader: (CustomX instance) => instance.rid3, externalInstancePropertyWriter: (CustomX instance, value) => instance.rid3 = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyReader: (CustomX instance) => instance.rmbfen, externalInstancePropertyWriter: (CustomX instance, value) => instance.rmbfen = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CustomX instance) => instance.runtimeType),
      'score': VmProxy(identifier: 'score', externalInstancePropertyReader: (CustomX instance) => instance.score, externalInstancePropertyWriter: (CustomX instance, value) => instance.score = value),
      'star': VmProxy(identifier: 'star', externalInstancePropertyReader: (CustomX instance) => instance.star, externalInstancePropertyWriter: (CustomX instance, value) => instance.star = value),
      'state1': VmProxy(identifier: 'state1', externalInstancePropertyReader: (CustomX instance) => instance.state1, externalInstancePropertyWriter: (CustomX instance, value) => instance.state1 = value),
      'state2': VmProxy(identifier: 'state2', externalInstancePropertyReader: (CustomX instance) => instance.state2, externalInstancePropertyWriter: (CustomX instance, value) => instance.state2 = value),
      'state3': VmProxy(identifier: 'state3', externalInstancePropertyReader: (CustomX instance) => instance.state3, externalInstancePropertyWriter: (CustomX instance, value) => instance.state3 = value),
      'str1': VmProxy(identifier: 'str1', externalInstancePropertyReader: (CustomX instance) => instance.str1, externalInstancePropertyWriter: (CustomX instance, value) => instance.str1 = value),
      'str2': VmProxy(identifier: 'str2', externalInstancePropertyReader: (CustomX instance) => instance.str2, externalInstancePropertyWriter: (CustomX instance, value) => instance.str2 = value),
      'str3': VmProxy(identifier: 'str3', externalInstancePropertyReader: (CustomX instance) => instance.str3, externalInstancePropertyWriter: (CustomX instance, value) => instance.str3 = value),
      'target': VmProxy(identifier: 'target', externalInstancePropertyReader: (CustomX instance) => instance.target, externalInstancePropertyWriter: (CustomX instance, value) => instance.target = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (CustomX instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (CustomX instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (CustomX instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CustomX instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (CustomX instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (CustomX instance) => instance.uid, externalInstancePropertyWriter: (CustomX instance, value) => instance.uid = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (CustomX instance) => instance.update, externalInstancePropertyWriter: (CustomX instance, value) => instance.update = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (CustomX instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (CustomX instance) => instance.updateByKValues),
      'virval': VmProxy(identifier: 'virval', externalInstancePropertyReader: (CustomX instance) => instance.virval, externalInstancePropertyWriter: (CustomX instance, value) => instance.virval = value),
    },
  );

  ///class CustomXDirty
  static final classCustomXDirty = VmClass<CustomXDirty>(
    identifier: 'CustomXDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CustomXDirty.new),
      'body1': VmProxy(identifier: 'body1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.body1 = value),
      'body2': VmProxy(identifier: 'body2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.body2 = value),
      'body3': VmProxy(identifier: 'body3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.body3 = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.bsid = value),
      'cnt1': VmProxy(identifier: 'cnt1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.cnt1 = value),
      'cnt2': VmProxy(identifier: 'cnt2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.cnt2 = value),
      'cnt3': VmProxy(identifier: 'cnt3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.cnt3 = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (CustomXDirty instance) => instance.data),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.deny = value),
      'earner': VmProxy(identifier: 'earner', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.earner = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CustomXDirty instance) => instance.hashCode),
      'hot1': VmProxy(identifier: 'hot1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.hot1 = value),
      'hot2': VmProxy(identifier: 'hot2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.hot2 = value),
      'hotx': VmProxy(identifier: 'hotx', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.hotx = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.id = value),
      'incxId': VmProxy(identifier: 'incxId', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.incxId = value),
      'int1': VmProxy(identifier: 'int1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.int1 = value),
      'int2': VmProxy(identifier: 'int2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.int2 = value),
      'int3': VmProxy(identifier: 'int3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.int3 = value),
      'mark': VmProxy(identifier: 'mark', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.mark = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CustomXDirty instance) => instance.noSuchMethod),
      'pathId': VmProxy(identifier: 'pathId', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.pathId = value),
      'rid1': VmProxy(identifier: 'rid1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.rid1 = value),
      'rid2': VmProxy(identifier: 'rid2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.rid2 = value),
      'rid3': VmProxy(identifier: 'rid3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.rid3 = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.rmbfen = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CustomXDirty instance) => instance.runtimeType),
      'score': VmProxy(identifier: 'score', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.score = value),
      'star': VmProxy(identifier: 'star', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.star = value),
      'state1': VmProxy(identifier: 'state1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.state1 = value),
      'state2': VmProxy(identifier: 'state2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.state2 = value),
      'state3': VmProxy(identifier: 'state3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.state3 = value),
      'str1': VmProxy(identifier: 'str1', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.str1 = value),
      'str2': VmProxy(identifier: 'str2', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.str2 = value),
      'str3': VmProxy(identifier: 'str3', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.str3 = value),
      'target': VmProxy(identifier: 'target', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.target = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CustomXDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.uid = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.update = value),
      'virval': VmProxy(identifier: 'virval', externalInstancePropertyWriter: (CustomXDirty instance, value) => instance.virval = value),
    },
  );

  ///class DbJsonWraper
  static final classDbJsonWraper = VmClass<DbJsonWraper>(
    identifier: 'DbJsonWraper',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DbJsonWraper.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => DbJsonWraper.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => DbJsonWraper.fromString),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (DbJsonWraper instance) => instance.buildTarget),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (DbJsonWraper instance) => instance.data),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (DbJsonWraper instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (DbJsonWraper instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (DbJsonWraper instance) => instance.runtimeType),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (DbJsonWraper instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (DbJsonWraper instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (DbJsonWraper instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (DbJsonWraper instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (DbJsonWraper instance) => instance.updateByKValues),
    },
  );

  ///class DbQueryField
  static final classDbQueryField = VmClass<DbQueryField>(
    identifier: 'DbQueryField',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DbQueryField.new),
      'createObjectId': VmProxy(identifier: 'createObjectId', externalStaticPropertyReader: () => DbQueryField.createObjectId),
      'emptyObjectId': VmProxy(identifier: 'emptyObjectId', externalStaticPropertyReader: () => DbQueryField.emptyObjectId),
      'hexstr2ObjectId': VmProxy(identifier: 'hexstr2ObjectId', externalStaticPropertyReader: () => DbQueryField.hexstr2ObjectId),
      'parseBool': VmProxy(identifier: 'parseBool', externalStaticPropertyReader: () => DbQueryField.parseBool),
      'parseDouble': VmProxy(identifier: 'parseDouble', externalStaticPropertyReader: () => DbQueryField.parseDouble),
      'parseInt': VmProxy(identifier: 'parseInt', externalStaticPropertyReader: () => DbQueryField.parseInt),
      'parseNum': VmProxy(identifier: 'parseNum', externalStaticPropertyReader: () => DbQueryField.parseNum),
      'parseObjectId': VmProxy(identifier: 'parseObjectId', externalStaticPropertyReader: () => DbQueryField.parseObjectId),
      'parseString': VmProxy(identifier: 'parseString', externalStaticPropertyReader: () => DbQueryField.parseString),
      'toBaseType': VmProxy(identifier: 'toBaseType', externalStaticPropertyReader: () => DbQueryField.toBaseType),
      'tryParseBool': VmProxy(identifier: 'tryParseBool', externalStaticPropertyReader: () => DbQueryField.tryParseBool),
      'tryParseDouble': VmProxy(identifier: 'tryParseDouble', externalStaticPropertyReader: () => DbQueryField.tryParseDouble),
      'tryParseInt': VmProxy(identifier: 'tryParseInt', externalStaticPropertyReader: () => DbQueryField.tryParseInt),
      'tryParseNum': VmProxy(identifier: 'tryParseNum', externalStaticPropertyReader: () => DbQueryField.tryParseNum),
      'tryParseObjectId': VmProxy(identifier: 'tryParseObjectId', externalStaticPropertyReader: () => DbQueryField.tryParseObjectId),
      'tryParseString': VmProxy(identifier: 'tryParseString', externalStaticPropertyReader: () => DbQueryField.tryParseString),
      '\$addToSet': VmProxy(identifier: '\$addToSet', externalInstancePropertyReader: (DbQueryField instance) => instance.$addToSet),
      '\$avg': VmProxy(identifier: '\$avg', externalInstancePropertyReader: (DbQueryField instance) => instance.$avg),
      '\$eq': VmProxy(identifier: '\$eq', externalInstancePropertyReader: (DbQueryField instance) => instance.$eq),
      '\$exists': VmProxy(identifier: '\$exists', externalInstancePropertyReader: (DbQueryField instance) => instance.$exists),
      '\$gt': VmProxy(identifier: '\$gt', externalInstancePropertyReader: (DbQueryField instance) => instance.$gt),
      '\$gte': VmProxy(identifier: '\$gte', externalInstancePropertyReader: (DbQueryField instance) => instance.$gte),
      '\$id': VmProxy(identifier: '\$id', externalInstancePropertyReader: (DbQueryField instance) => instance.$id),
      '\$in': VmProxy(identifier: '\$in', externalInstancePropertyReader: (DbQueryField instance) => instance.$in),
      '\$inc': VmProxy(identifier: '\$inc', externalInstancePropertyReader: (DbQueryField instance) => instance.$inc),
      '\$itemMatch': VmProxy(identifier: '\$itemMatch', externalInstancePropertyReader: (DbQueryField instance) => instance.$itemMatch),
      '\$lt': VmProxy(identifier: '\$lt', externalInstancePropertyReader: (DbQueryField instance) => instance.$lt),
      '\$lte': VmProxy(identifier: '\$lte', externalInstancePropertyReader: (DbQueryField instance) => instance.$lte),
      '\$match': VmProxy(identifier: '\$match', externalInstancePropertyReader: (DbQueryField instance) => instance.$match),
      '\$max': VmProxy(identifier: '\$max', externalInstancePropertyReader: (DbQueryField instance) => instance.$max),
      '\$min': VmProxy(identifier: '\$min', externalInstancePropertyReader: (DbQueryField instance) => instance.$min),
      '\$mul': VmProxy(identifier: '\$mul', externalInstancePropertyReader: (DbQueryField instance) => instance.$mul),
      '\$ne': VmProxy(identifier: '\$ne', externalInstancePropertyReader: (DbQueryField instance) => instance.$ne),
      '\$nin': VmProxy(identifier: '\$nin', externalInstancePropertyReader: (DbQueryField instance) => instance.$nin),
      '\$pop': VmProxy(identifier: '\$pop', externalInstancePropertyReader: (DbQueryField instance) => instance.$pop),
      '\$projection': VmProxy(identifier: '\$projection', externalInstancePropertyReader: (DbQueryField instance) => instance.$projection),
      '\$pull': VmProxy(identifier: '\$pull', externalInstancePropertyReader: (DbQueryField instance) => instance.$pull),
      '\$push': VmProxy(identifier: '\$push', externalInstancePropertyReader: (DbQueryField instance) => instance.$push),
      '\$set': VmProxy(identifier: '\$set', externalInstancePropertyReader: (DbQueryField instance) => instance.$set),
      '\$sort': VmProxy(identifier: '\$sort', externalInstancePropertyReader: (DbQueryField instance) => instance.$sort),
      '\$sum': VmProxy(identifier: '\$sum', externalInstancePropertyReader: (DbQueryField instance) => instance.$sum),
      'exclude': VmProxy(identifier: 'exclude', externalInstancePropertyReader: (DbQueryField instance) => instance.exclude),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (DbQueryField instance) => instance.hashCode),
      'include': VmProxy(identifier: 'include', externalInstancePropertyReader: (DbQueryField instance) => instance.include),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (DbQueryField instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (DbQueryField instance) => instance.noSuchMethod),
      'popFirst': VmProxy(identifier: 'popFirst', externalInstancePropertyReader: (DbQueryField instance) => instance.popFirst),
      'popLast': VmProxy(identifier: 'popLast', externalInstancePropertyReader: (DbQueryField instance) => instance.popLast),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (DbQueryField instance) => instance.runtimeType),
      'sortAsc': VmProxy(identifier: 'sortAsc', externalInstancePropertyReader: (DbQueryField instance) => instance.sortAsc),
      'sortDesc': VmProxy(identifier: 'sortDesc', externalInstancePropertyReader: (DbQueryField instance) => instance.sortDesc),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (DbQueryField instance) => instance.toString),
    },
  );

  ///class EasyClient
  static final classEasyClient = VmClass<EasyClient>(
    identifier: 'EasyClient',
    superclassNames: ['Object', 'EasyLogger'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => EasyClient.new),
      'get': VmProxy(identifier: 'get', externalStaticPropertyReader: () => EasyClient.get),
      'post': VmProxy(identifier: 'post', externalStaticPropertyReader: () => EasyClient.post),
      'addListener': VmProxy(identifier: 'addListener', externalInstancePropertyReader: (EasyClient instance) => instance.addListener, externalInstanceFunctionCaller: (EasyClient instance, a0, a1, {once = false}) => instance.addListener(a0, (b0) => a1(b0), once: once)),
      'bindUser': VmProxy(identifier: 'bindUser', externalInstancePropertyReader: (EasyClient instance) => instance.bindUser),
      'connect': VmProxy(identifier: 'connect', externalInstancePropertyReader: (EasyClient instance) => instance.connect, externalInstanceFunctionCaller: (EasyClient instance, {onopen, onclose, onerror, onretry, onheart, now = true}) => instance.connect(onopen: onopen, onclose: onclose == null ? null : (b0, b1) => onclose(b0, b1), onerror: onerror == null ? null : (b0) => onerror(b0), onretry: onretry == null ? null : (b0) => onretry(b0), onheart: onheart == null ? null : (b0, b1) => onheart(b0, b1), now: now)),
      'destroy': VmProxy(identifier: 'destroy', externalInstancePropertyReader: (EasyClient instance) => instance.destroy),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasyClient instance) => instance.hashCode),
      'httpRequest': VmProxy(identifier: 'httpRequest', externalInstancePropertyReader: (EasyClient instance) => instance.httpRequest),
      'httpUrl': VmProxy(identifier: 'httpUrl', externalInstancePropertyReader: (EasyClient instance) => instance.httpUrl),
      'initThread': VmProxy(identifier: 'initThread', externalInstancePropertyReader: (EasyClient instance) => instance.initThread, externalInstanceFunctionCaller: (EasyClient instance, a0, {runErrorsZone = true, errorsAreFatal = false}) => instance.initThread((b0, b1) => a0(b0, b1), runErrorsZone: runErrorsZone, errorsAreFatal: errorsAreFatal)),
      'isConnected': VmProxy(identifier: 'isConnected', externalInstancePropertyReader: (EasyClient instance) => instance.isConnected),
      'logDebug': VmProxy(identifier: 'logDebug', externalInstancePropertyReader: (EasyClient instance) => instance.logDebug),
      'logError': VmProxy(identifier: 'logError', externalInstancePropertyReader: (EasyClient instance) => instance.logError),
      'logFatal': VmProxy(identifier: 'logFatal', externalInstancePropertyReader: (EasyClient instance) => instance.logFatal),
      'logInfo': VmProxy(identifier: 'logInfo', externalInstancePropertyReader: (EasyClient instance) => instance.logInfo),
      'logTag': VmProxy(identifier: 'logTag', externalInstancePropertyReader: (EasyClient instance) => instance.logTag),
      'logTrace': VmProxy(identifier: 'logTrace', externalInstancePropertyReader: (EasyClient instance) => instance.logTrace),
      'logWarn': VmProxy(identifier: 'logWarn', externalInstancePropertyReader: (EasyClient instance) => instance.logWarn),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasyClient instance) => instance.noSuchMethod),
      'pauseReconnect': VmProxy(identifier: 'pauseReconnect', externalInstancePropertyReader: (EasyClient instance) => instance.pauseReconnect),
      'removeListener': VmProxy(identifier: 'removeListener', externalInstancePropertyReader: (EasyClient instance) => instance.removeListener, externalInstanceFunctionCaller: (EasyClient instance, a0, {ondata}) => instance.removeListener(a0, ondata: ondata == null ? null : (b0) => ondata(b0))),
      'resumeReconnect': VmProxy(identifier: 'resumeReconnect', externalInstancePropertyReader: (EasyClient instance) => instance.resumeReconnect),
      'runThreadTask': VmProxy(identifier: 'runThreadTask', externalInstancePropertyReader: (EasyClient instance) => instance.runThreadTask),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasyClient instance) => instance.runtimeType),
      'threadEnable': VmProxy(identifier: 'threadEnable', externalInstancePropertyReader: (EasyClient instance) => instance.threadEnable),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasyClient instance) => instance.toString),
      'triggerEvent': VmProxy(identifier: 'triggerEvent', externalInstancePropertyReader: (EasyClient instance) => instance.triggerEvent),
      'unbindUser': VmProxy(identifier: 'unbindUser', externalInstancePropertyReader: (EasyClient instance) => instance.unbindUser),
      'websocketRequest': VmProxy(identifier: 'websocketRequest', externalInstancePropertyReader: (EasyClient instance) => instance.websocketRequest),
      'websocketUrl': VmProxy(identifier: 'websocketUrl', externalInstancePropertyReader: (EasyClient instance) => instance.websocketUrl),
    },
  );

  ///class EasyClientConfig
  static final classEasyClientConfig = VmClass<EasyClientConfig>(
    identifier: 'EasyClientConfig',
    superclassNames: ['Object', 'EasyConfig'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => EasyClientConfig.new, externalStaticFunctionCaller: ({logger, logLevel, logTag, logFilePath, logFileBackup, logFileMaxBytes, host = '', port = 0, pwd, binary = false, timeout = 30 * 1000, heartick = 60, conntick = 6, sslEnable = false}) => EasyClientConfig.new(logger: logger == null ? null : (b0, b1, b2) => logger(b0, b1, b2), logLevel: logLevel, logTag: logTag, logFilePath: logFilePath, logFileBackup: logFileBackup, logFileMaxBytes: logFileMaxBytes, host: host, port: port, pwd: pwd, binary: binary, timeout: timeout, heartick: heartick, conntick: conntick, sslEnable: sslEnable)),
      'fromSourceAndArgs': VmProxy(identifier: 'fromSourceAndArgs', externalStaticPropertyReader: () => EasyClientConfig.fromSourceAndArgs, externalStaticFunctionCaller: ({source, logger, logLevel, logTag, logFilePath, logFileBackup, logFileMaxBytes, host, port, pwd, binary, timeout, heartick, conntick, sslEnable}) => EasyClientConfig.fromSourceAndArgs(source: source, logger: logger == null ? null : (b0, b1, b2) => logger(b0, b1, b2), logLevel: logLevel, logTag: logTag, logFilePath: logFilePath, logFileBackup: logFileBackup, logFileMaxBytes: logFileMaxBytes, host: host, port: port, pwd: pwd, binary: binary, timeout: timeout, heartick: heartick, conntick: conntick, sslEnable: sslEnable)),
      'binary': VmProxy(identifier: 'binary', externalInstancePropertyReader: (EasyClientConfig instance) => instance.binary),
      'conntick': VmProxy(identifier: 'conntick', externalInstancePropertyReader: (EasyClientConfig instance) => instance.conntick),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasyClientConfig instance) => instance.hashCode),
      'heartick': VmProxy(identifier: 'heartick', externalInstancePropertyReader: (EasyClientConfig instance) => instance.heartick),
      'host': VmProxy(identifier: 'host', externalInstancePropertyReader: (EasyClientConfig instance) => instance.host),
      'httpUrl': VmProxy(identifier: 'httpUrl', externalInstancePropertyReader: (EasyClientConfig instance) => instance.httpUrl),
      'logFileBackup': VmProxy(identifier: 'logFileBackup', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logFileBackup),
      'logFileMaxBytes': VmProxy(identifier: 'logFileMaxBytes', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logFileMaxBytes),
      'logFilePath': VmProxy(identifier: 'logFilePath', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logFilePath),
      'logger': VmProxy(identifier: 'logger', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logger),
      'logLevel': VmProxy(identifier: 'logLevel', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logLevel),
      'logTag': VmProxy(identifier: 'logTag', externalInstancePropertyReader: (EasyClientConfig instance) => instance.logTag),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasyClientConfig instance) => instance.noSuchMethod),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (EasyClientConfig instance) => instance.port),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyReader: (EasyClientConfig instance) => instance.pwd),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasyClientConfig instance) => instance.runtimeType),
      'sslEnable': VmProxy(identifier: 'sslEnable', externalInstancePropertyReader: (EasyClientConfig instance) => instance.sslEnable),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (EasyClientConfig instance) => instance.timeout),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasyClientConfig instance) => instance.toString),
      'websocketUrl': VmProxy(identifier: 'websocketUrl', externalInstancePropertyReader: (EasyClientConfig instance) => instance.websocketUrl),
    },
  );

  ///class EasyLogger
  static final classEasyLogger = VmClass<EasyLogger>(
    identifier: 'EasyLogger',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => EasyLogger.new, externalStaticFunctionCaller: ({logger, logLevel, logTag, logFilePath, logFileBackup, logFileMaxBytes}) => EasyLogger.new(logger: logger == null ? null : (b0, b1, b2) => logger(b0, b1, b2), logLevel: logLevel, logTag: logTag, logFilePath: logFilePath, logFileBackup: logFileBackup, logFileMaxBytes: logFileMaxBytes)),
      'printAndWriteLogger': VmProxy(identifier: 'printAndWriteLogger', externalStaticPropertyReader: () => EasyLogger.printAndWriteLogger),
      'printLogger': VmProxy(identifier: 'printLogger', externalStaticPropertyReader: () => EasyLogger.printLogger),
      'stdoutAndWriteLogger': VmProxy(identifier: 'stdoutAndWriteLogger', externalStaticPropertyReader: () => EasyLogger.stdoutAndWriteLogger),
      'stdoutLogger': VmProxy(identifier: 'stdoutLogger', externalStaticPropertyReader: () => EasyLogger.stdoutLogger),
      'writeLogger': VmProxy(identifier: 'writeLogger', externalStaticPropertyReader: () => EasyLogger.writeLogger),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasyLogger instance) => instance.hashCode),
      'logDebug': VmProxy(identifier: 'logDebug', externalInstancePropertyReader: (EasyLogger instance) => instance.logDebug),
      'logError': VmProxy(identifier: 'logError', externalInstancePropertyReader: (EasyLogger instance) => instance.logError),
      'logFatal': VmProxy(identifier: 'logFatal', externalInstancePropertyReader: (EasyLogger instance) => instance.logFatal),
      'logInfo': VmProxy(identifier: 'logInfo', externalInstancePropertyReader: (EasyLogger instance) => instance.logInfo),
      'logTag': VmProxy(identifier: 'logTag', externalInstancePropertyReader: (EasyLogger instance) => instance.logTag),
      'logTrace': VmProxy(identifier: 'logTrace', externalInstancePropertyReader: (EasyLogger instance) => instance.logTrace),
      'logWarn': VmProxy(identifier: 'logWarn', externalInstancePropertyReader: (EasyLogger instance) => instance.logWarn),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasyLogger instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasyLogger instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasyLogger instance) => instance.toString),
    },
  );

  ///class EasyLogLevel
  static final classEasyLogLevel = VmClass<EasyLogLevel>(
    identifier: 'EasyLogLevel',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'debug': VmProxy(identifier: 'debug', externalStaticPropertyReader: () => EasyLogLevel.debug),
      'error': VmProxy(identifier: 'error', externalStaticPropertyReader: () => EasyLogLevel.error),
      'fatal': VmProxy(identifier: 'fatal', externalStaticPropertyReader: () => EasyLogLevel.fatal),
      'info': VmProxy(identifier: 'info', externalStaticPropertyReader: () => EasyLogLevel.info),
      'trace': VmProxy(identifier: 'trace', externalStaticPropertyReader: () => EasyLogLevel.trace),
      'warn': VmProxy(identifier: 'warn', externalStaticPropertyReader: () => EasyLogLevel.warn),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasyLogLevel instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (EasyLogLevel instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (EasyLogLevel instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasyLogLevel instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasyLogLevel instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasyLogLevel instance) => instance.toString),
    },
  );

  ///class EasyPacket
  static final classEasyPacket = VmClass<EasyPacket>(
    identifier: 'EasyPacket',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => EasyPacket.fromJson),
      'pushdata': VmProxy(identifier: 'pushdata', externalStaticPropertyReader: () => EasyPacket.pushdata),
      'pushresp': VmProxy(identifier: 'pushresp', externalStaticPropertyReader: () => EasyPacket.pushresp),
      'pushsign': VmProxy(identifier: 'pushsign', externalStaticPropertyReader: () => EasyPacket.pushsign),
      'request': VmProxy(identifier: 'request', externalStaticPropertyReader: () => EasyPacket.request),
      'cloneExtra': VmProxy(identifier: 'cloneExtra', externalInstancePropertyReader: (EasyPacket instance) => instance.cloneExtra),
      'code': VmProxy(identifier: 'code', externalInstancePropertyReader: (EasyPacket instance) => instance.code),
      'codeDesc': VmProxy(identifier: 'codeDesc', externalInstancePropertyReader: (EasyPacket instance) => instance.codeDesc),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (EasyPacket instance) => instance.data),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyReader: (EasyPacket instance) => instance.desc),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (EasyPacket instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasyPacket instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (EasyPacket instance) => instance.id),
      'isSignError': VmProxy(identifier: 'isSignError', externalInstancePropertyReader: (EasyPacket instance) => instance.isSignError),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasyPacket instance) => instance.noSuchMethod),
      'ok': VmProxy(identifier: 'ok', externalInstancePropertyReader: (EasyPacket instance) => instance.ok),
      'requestDecryptError': VmProxy(identifier: 'requestDecryptError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestDecryptError),
      'requestEncryptError': VmProxy(identifier: 'requestEncryptError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestEncryptError),
      'requestExceptionError': VmProxy(identifier: 'requestExceptionError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestExceptionError),
      'requestExpiredError': VmProxy(identifier: 'requestExpiredError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestExpiredError),
      'requestFinished': VmProxy(identifier: 'requestFinished', externalInstancePropertyReader: (EasyPacket instance) => instance.requestFinished),
      'requestNotConnected': VmProxy(identifier: 'requestNotConnected', externalInstancePropertyReader: (EasyPacket instance) => instance.requestNotConnected),
      'requestStatusCodeError': VmProxy(identifier: 'requestStatusCodeError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestStatusCodeError),
      'requestTimeoutError': VmProxy(identifier: 'requestTimeoutError', externalInstancePropertyReader: (EasyPacket instance) => instance.requestTimeoutError),
      'response': VmProxy(identifier: 'response', externalInstancePropertyReader: (EasyPacket instance) => instance.response),
      'responseInternalServerError': VmProxy(identifier: 'responseInternalServerError', externalInstancePropertyReader: (EasyPacket instance) => instance.responseInternalServerError),
      'responseMethodNotAllowed': VmProxy(identifier: 'responseMethodNotAllowed', externalInstancePropertyReader: (EasyPacket instance) => instance.responseMethodNotAllowed),
      'responseOk': VmProxy(identifier: 'responseOk', externalInstancePropertyReader: (EasyPacket instance) => instance.responseOk),
      'responseUnauthorized': VmProxy(identifier: 'responseUnauthorized', externalInstancePropertyReader: (EasyPacket instance) => instance.responseUnauthorized),
      'route': VmProxy(identifier: 'route', externalInstancePropertyReader: (EasyPacket instance) => instance.route),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasyPacket instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (EasyPacket instance) => instance.sign),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (EasyPacket instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasyPacket instance) => instance.toString),
      'ucid': VmProxy(identifier: 'ucid', externalInstancePropertyReader: (EasyPacket instance) => instance.ucid),
      'word': VmProxy(identifier: 'word', externalInstancePropertyReader: (EasyPacket instance) => instance.word),
    },
  );

  ///class EasySecurity
  static final classEasySecurity = VmClass<EasySecurity>(
    identifier: 'EasySecurity',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => EasySecurity.new),
      'decrypt': VmProxy(identifier: 'decrypt', externalStaticPropertyReader: () => EasySecurity.decrypt),
      'encrypt': VmProxy(identifier: 'encrypt', externalStaticPropertyReader: () => EasySecurity.encrypt),
      'getMd5': VmProxy(identifier: 'getMd5', externalStaticPropertyReader: () => EasySecurity.getMd5),
      'uuid': VmProxy(identifier: 'uuid', externalStaticPropertyReader: () => EasySecurity.uuid),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EasySecurity instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EasySecurity instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EasySecurity instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EasySecurity instance) => instance.toString),
    },
  );

  ///class Location
  static final classLocation = VmClass<Location>(
    identifier: 'Location',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Location.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Location.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Location.fromString),
      'accuracy': VmProxy(identifier: 'accuracy', externalInstancePropertyReader: (Location instance) => instance.accuracy, externalInstancePropertyWriter: (Location instance, value) => instance.accuracy = value),
      'adCode': VmProxy(identifier: 'adCode', externalInstancePropertyReader: (Location instance) => instance.adCode, externalInstancePropertyWriter: (Location instance, value) => instance.adCode = value),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (Location instance) => instance.address, externalInstancePropertyWriter: (Location instance, value) => instance.address = value),
      'altitude': VmProxy(identifier: 'altitude', externalInstancePropertyReader: (Location instance) => instance.altitude, externalInstancePropertyWriter: (Location instance, value) => instance.altitude = value),
      'bearing': VmProxy(identifier: 'bearing', externalInstancePropertyReader: (Location instance) => instance.bearing, externalInstancePropertyWriter: (Location instance, value) => instance.bearing = value),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Location instance) => instance.buildTarget),
      'city': VmProxy(identifier: 'city', externalInstancePropertyReader: (Location instance) => instance.city, externalInstancePropertyWriter: (Location instance, value) => instance.city = value),
      'cityCode': VmProxy(identifier: 'cityCode', externalInstancePropertyReader: (Location instance) => instance.cityCode, externalInstancePropertyWriter: (Location instance, value) => instance.cityCode = value),
      'country': VmProxy(identifier: 'country', externalInstancePropertyReader: (Location instance) => instance.country, externalInstancePropertyWriter: (Location instance, value) => instance.country = value),
      'description': VmProxy(identifier: 'description', externalInstancePropertyReader: (Location instance) => instance.description, externalInstancePropertyWriter: (Location instance, value) => instance.description = value),
      'distance': VmProxy(identifier: 'distance', externalInstancePropertyReader: (Location instance) => instance.distance, externalInstancePropertyWriter: (Location instance, value) => instance.distance = value),
      'district': VmProxy(identifier: 'district', externalInstancePropertyReader: (Location instance) => instance.district, externalInstancePropertyWriter: (Location instance, value) => instance.district = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Location instance) => instance.hashCode),
      'latitude': VmProxy(identifier: 'latitude', externalInstancePropertyReader: (Location instance) => instance.latitude, externalInstancePropertyWriter: (Location instance, value) => instance.latitude = value),
      'longitude': VmProxy(identifier: 'longitude', externalInstancePropertyReader: (Location instance) => instance.longitude, externalInstancePropertyWriter: (Location instance, value) => instance.longitude = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Location instance) => instance.noSuchMethod),
      'province': VmProxy(identifier: 'province', externalInstancePropertyReader: (Location instance) => instance.province, externalInstancePropertyWriter: (Location instance, value) => instance.province = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Location instance) => instance.runtimeType),
      'snapshotUrl': VmProxy(identifier: 'snapshotUrl', externalInstancePropertyReader: (Location instance) => instance.snapshotUrl, externalInstancePropertyWriter: (Location instance, value) => instance.snapshotUrl = value),
      'speed': VmProxy(identifier: 'speed', externalInstancePropertyReader: (Location instance) => instance.speed, externalInstancePropertyWriter: (Location instance, value) => instance.speed = value),
      'street': VmProxy(identifier: 'street', externalInstancePropertyReader: (Location instance) => instance.street, externalInstancePropertyWriter: (Location instance, value) => instance.street = value),
      'streetNumber': VmProxy(identifier: 'streetNumber', externalInstancePropertyReader: (Location instance) => instance.streetNumber, externalInstancePropertyWriter: (Location instance, value) => instance.streetNumber = value),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Location instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Location instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Location instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Location instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Location instance) => instance.updateByKValues),
      'zoomLevel': VmProxy(identifier: 'zoomLevel', externalInstancePropertyReader: (Location instance) => instance.zoomLevel, externalInstancePropertyWriter: (Location instance, value) => instance.zoomLevel = value),
    },
  );

  ///class LocationDirty
  static final classLocationDirty = VmClass<LocationDirty>(
    identifier: 'LocationDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LocationDirty.new),
      'accuracy': VmProxy(identifier: 'accuracy', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.accuracy = value),
      'adCode': VmProxy(identifier: 'adCode', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.adCode = value),
      'address': VmProxy(identifier: 'address', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.address = value),
      'altitude': VmProxy(identifier: 'altitude', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.altitude = value),
      'bearing': VmProxy(identifier: 'bearing', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.bearing = value),
      'city': VmProxy(identifier: 'city', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.city = value),
      'cityCode': VmProxy(identifier: 'cityCode', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.cityCode = value),
      'country': VmProxy(identifier: 'country', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.country = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (LocationDirty instance) => instance.data),
      'description': VmProxy(identifier: 'description', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.description = value),
      'distance': VmProxy(identifier: 'distance', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.distance = value),
      'district': VmProxy(identifier: 'district', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.district = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LocationDirty instance) => instance.hashCode),
      'latitude': VmProxy(identifier: 'latitude', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.latitude = value),
      'longitude': VmProxy(identifier: 'longitude', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.longitude = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LocationDirty instance) => instance.noSuchMethod),
      'province': VmProxy(identifier: 'province', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.province = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LocationDirty instance) => instance.runtimeType),
      'snapshotUrl': VmProxy(identifier: 'snapshotUrl', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.snapshotUrl = value),
      'speed': VmProxy(identifier: 'speed', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.speed = value),
      'street': VmProxy(identifier: 'street', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.street = value),
      'streetNumber': VmProxy(identifier: 'streetNumber', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.streetNumber = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LocationDirty instance) => instance.toString),
      'zoomLevel': VmProxy(identifier: 'zoomLevel', externalInstancePropertyWriter: (LocationDirty instance, value) => instance.zoomLevel = value),
    },
  );

  ///class LogError
  static final classLogError = VmClass<LogError>(
    identifier: 'LogError',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogError.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => LogError.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => LogError.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (LogError instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (LogError instance) => instance.buildTarget),
      'clientVersion': VmProxy(identifier: 'clientVersion', externalInstancePropertyReader: (LogError instance) => instance.clientVersion, externalInstancePropertyWriter: (LogError instance, value) => instance.clientVersion = value),
      'deviceDetail': VmProxy(identifier: 'deviceDetail', externalInstancePropertyReader: (LogError instance) => instance.deviceDetail, externalInstancePropertyWriter: (LogError instance, value) => instance.deviceDetail = value),
      'deviceType': VmProxy(identifier: 'deviceType', externalInstancePropertyReader: (LogError instance) => instance.deviceType, externalInstancePropertyWriter: (LogError instance, value) => instance.deviceType = value),
      'deviceVersion': VmProxy(identifier: 'deviceVersion', externalInstancePropertyReader: (LogError instance) => instance.deviceVersion, externalInstancePropertyWriter: (LogError instance, value) => instance.deviceVersion = value),
      'errorDetail': VmProxy(identifier: 'errorDetail', externalInstancePropertyReader: (LogError instance) => instance.errorDetail, externalInstancePropertyWriter: (LogError instance, value) => instance.errorDetail = value),
      'errorTime': VmProxy(identifier: 'errorTime', externalInstancePropertyReader: (LogError instance) => instance.errorTime, externalInstancePropertyWriter: (LogError instance, value) => instance.errorTime = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (LogError instance) => instance.extra),
      'finished': VmProxy(identifier: 'finished', externalInstancePropertyReader: (LogError instance) => instance.finished, externalInstancePropertyWriter: (LogError instance, value) => instance.finished = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogError instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (LogError instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogError instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (LogError instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (LogError instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (LogError instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogError instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (LogError instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (LogError instance) => instance.uid, externalInstancePropertyWriter: (LogError instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (LogError instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (LogError instance) => instance.updateByKValues),
    },
  );

  ///class LogErrorDirty
  static final classLogErrorDirty = VmClass<LogErrorDirty>(
    identifier: 'LogErrorDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogErrorDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.bsid = value),
      'clientVersion': VmProxy(identifier: 'clientVersion', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.clientVersion = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (LogErrorDirty instance) => instance.data),
      'deviceDetail': VmProxy(identifier: 'deviceDetail', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.deviceDetail = value),
      'deviceType': VmProxy(identifier: 'deviceType', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.deviceType = value),
      'deviceVersion': VmProxy(identifier: 'deviceVersion', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.deviceVersion = value),
      'errorDetail': VmProxy(identifier: 'errorDetail', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.errorDetail = value),
      'errorTime': VmProxy(identifier: 'errorTime', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.errorTime = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.extra = value),
      'finished': VmProxy(identifier: 'finished', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.finished = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogErrorDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogErrorDirty instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogErrorDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogErrorDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (LogErrorDirty instance, value) => instance.uid = value),
    },
  );

  ///class LogLogin
  static final classLogLogin = VmClass<LogLogin>(
    identifier: 'LogLogin',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogLogin.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => LogLogin.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => LogLogin.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (LogLogin instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (LogLogin instance) => instance.buildTarget),
      'clientVersion': VmProxy(identifier: 'clientVersion', externalInstancePropertyReader: (LogLogin instance) => instance.clientVersion, externalInstancePropertyWriter: (LogLogin instance, value) => instance.clientVersion = value),
      'deviceDetail': VmProxy(identifier: 'deviceDetail', externalInstancePropertyReader: (LogLogin instance) => instance.deviceDetail, externalInstancePropertyWriter: (LogLogin instance, value) => instance.deviceDetail = value),
      'deviceType': VmProxy(identifier: 'deviceType', externalInstancePropertyReader: (LogLogin instance) => instance.deviceType, externalInstancePropertyWriter: (LogLogin instance, value) => instance.deviceType = value),
      'deviceVersion': VmProxy(identifier: 'deviceVersion', externalInstancePropertyReader: (LogLogin instance) => instance.deviceVersion, externalInstancePropertyWriter: (LogLogin instance, value) => instance.deviceVersion = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (LogLogin instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogLogin instance) => instance.hashCode),
      'historyIpTms': VmProxy(identifier: 'historyIpTms', externalInstancePropertyReader: (LogLogin instance) => instance.historyIpTms, externalInstancePropertyWriter: (LogLogin instance, value) => instance.historyIpTms = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (LogLogin instance) => instance.id),
      'ip': VmProxy(identifier: 'ip', externalInstancePropertyReader: (LogLogin instance) => instance.ip, externalInstancePropertyWriter: (LogLogin instance, value) => instance.ip = value),
      'location': VmProxy(identifier: 'location', externalInstancePropertyReader: (LogLogin instance) => instance.location, externalInstancePropertyWriter: (LogLogin instance, value) => instance.location = value),
      'login': VmProxy(identifier: 'login', externalInstancePropertyReader: (LogLogin instance) => instance.login, externalInstancePropertyWriter: (LogLogin instance, value) => instance.login = value),
      'loginCount': VmProxy(identifier: 'loginCount', externalInstancePropertyReader: (LogLogin instance) => instance.loginCount, externalInstancePropertyWriter: (LogLogin instance, value) => instance.loginCount = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogLogin instance) => instance.noSuchMethod),
      'onlineMillis': VmProxy(identifier: 'onlineMillis', externalInstancePropertyReader: (LogLogin instance) => instance.onlineMillis, externalInstancePropertyWriter: (LogLogin instance, value) => instance.onlineMillis = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogLogin instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (LogLogin instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (LogLogin instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (LogLogin instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogLogin instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (LogLogin instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (LogLogin instance) => instance.uid, externalInstancePropertyWriter: (LogLogin instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (LogLogin instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (LogLogin instance) => instance.updateByKValues),
    },
  );

  ///class LogLoginDirty
  static final classLogLoginDirty = VmClass<LogLoginDirty>(
    identifier: 'LogLoginDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogLoginDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.bsid = value),
      'clientVersion': VmProxy(identifier: 'clientVersion', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.clientVersion = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (LogLoginDirty instance) => instance.data),
      'deviceDetail': VmProxy(identifier: 'deviceDetail', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.deviceDetail = value),
      'deviceType': VmProxy(identifier: 'deviceType', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.deviceType = value),
      'deviceVersion': VmProxy(identifier: 'deviceVersion', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.deviceVersion = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogLoginDirty instance) => instance.hashCode),
      'historyIpTms': VmProxy(identifier: 'historyIpTms', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.historyIpTms = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.id = value),
      'ip': VmProxy(identifier: 'ip', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.ip = value),
      'location': VmProxy(identifier: 'location', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.location = value),
      'login': VmProxy(identifier: 'login', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.login = value),
      'loginCount': VmProxy(identifier: 'loginCount', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.loginCount = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogLoginDirty instance) => instance.noSuchMethod),
      'onlineMillis': VmProxy(identifier: 'onlineMillis', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.onlineMillis = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogLoginDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogLoginDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (LogLoginDirty instance, value) => instance.uid = value),
    },
  );

  ///class LogReport
  static final classLogReport = VmClass<LogReport>(
    identifier: 'LogReport',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogReport.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => LogReport.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => LogReport.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (LogReport instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (LogReport instance) => instance.buildTarget),
      'customXId': VmProxy(identifier: 'customXId', externalInstancePropertyReader: (LogReport instance) => instance.customXId, externalInstancePropertyWriter: (LogReport instance, value) => instance.customXId = value),
      'customXNo': VmProxy(identifier: 'customXNo', externalInstancePropertyReader: (LogReport instance) => instance.customXNo, externalInstancePropertyWriter: (LogReport instance, value) => instance.customXNo = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyReader: (LogReport instance) => instance.desc, externalInstancePropertyWriter: (LogReport instance, value) => instance.desc = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (LogReport instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogReport instance) => instance.hashCode),
      'host': VmProxy(identifier: 'host', externalInstancePropertyReader: (LogReport instance) => instance.host, externalInstancePropertyWriter: (LogReport instance, value) => instance.host = value),
      'href': VmProxy(identifier: 'href', externalInstancePropertyReader: (LogReport instance) => instance.href, externalInstancePropertyWriter: (LogReport instance, value) => instance.href = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (LogReport instance) => instance.id),
      'image': VmProxy(identifier: 'image', externalInstancePropertyReader: (LogReport instance) => instance.image, externalInstancePropertyWriter: (LogReport instance, value) => instance.image = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogReport instance) => instance.noSuchMethod),
      'relation': VmProxy(identifier: 'relation', externalInstancePropertyReader: (LogReport instance) => instance.relation, externalInstancePropertyWriter: (LogReport instance, value) => instance.relation = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogReport instance) => instance.runtimeType),
      'state': VmProxy(identifier: 'state', externalInstancePropertyReader: (LogReport instance) => instance.state, externalInstancePropertyWriter: (LogReport instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (LogReport instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (LogReport instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (LogReport instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogReport instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (LogReport instance) => instance.trans),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (LogReport instance) => instance.type, externalInstancePropertyWriter: (LogReport instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (LogReport instance) => instance.uid, externalInstancePropertyWriter: (LogReport instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (LogReport instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (LogReport instance) => instance.updateByKValues),
    },
  );

  ///class LogReportDirty
  static final classLogReportDirty = VmClass<LogReportDirty>(
    identifier: 'LogReportDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LogReportDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.bsid = value),
      'customXId': VmProxy(identifier: 'customXId', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.customXId = value),
      'customXNo': VmProxy(identifier: 'customXNo', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.customXNo = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (LogReportDirty instance) => instance.data),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.desc = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LogReportDirty instance) => instance.hashCode),
      'host': VmProxy(identifier: 'host', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.host = value),
      'href': VmProxy(identifier: 'href', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.href = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.id = value),
      'image': VmProxy(identifier: 'image', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.image = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LogReportDirty instance) => instance.noSuchMethod),
      'relation': VmProxy(identifier: 'relation', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.relation = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LogReportDirty instance) => instance.runtimeType),
      'state': VmProxy(identifier: 'state', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LogReportDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.trans = value),
      'type': VmProxy(identifier: 'type', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (LogReportDirty instance, value) => instance.uid = value),
    },
  );

  ///class MediaType
  static final classMediaType = VmClass<MediaType>(
    identifier: 'MediaType',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MediaType.new),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => MediaType.parse),
      'change': VmProxy(identifier: 'change', externalInstancePropertyReader: (MediaType instance) => instance.change),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MediaType instance) => instance.hashCode),
      'mimeType': VmProxy(identifier: 'mimeType', externalInstancePropertyReader: (MediaType instance) => instance.mimeType),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MediaType instance) => instance.noSuchMethod),
      'parameters': VmProxy(identifier: 'parameters', externalInstancePropertyReader: (MediaType instance) => instance.parameters),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MediaType instance) => instance.runtimeType),
      'subtype': VmProxy(identifier: 'subtype', externalInstancePropertyReader: (MediaType instance) => instance.subtype),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MediaType instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (MediaType instance) => instance.type),
    },
  );

  ///class Message
  static final classMessage = VmClass<Message>(
    identifier: 'Message',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Message.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Message.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Message.fromString),
      'body': VmProxy(identifier: 'body', externalInstancePropertyReader: (Message instance) => instance.body, externalInstancePropertyWriter: (Message instance, value) => instance.body = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Message instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Message instance) => instance.buildTarget),
      'customType': VmProxy(identifier: 'customType', externalInstancePropertyReader: (Message instance) => instance.customType, externalInstancePropertyWriter: (Message instance, value) => instance.customType = value),
      'displayHead': VmProxy(identifier: 'displayHead', externalInstancePropertyReader: (Message instance) => instance.displayHead, externalInstancePropertyWriter: (Message instance, value) => instance.displayHead = value),
      'displayIcon': VmProxy(identifier: 'displayIcon', externalInstancePropertyReader: (Message instance) => instance.displayIcon, externalInstancePropertyWriter: (Message instance, value) => instance.displayIcon = value),
      'displayNick': VmProxy(identifier: 'displayNick', externalInstancePropertyReader: (Message instance) => instance.displayNick, externalInstancePropertyWriter: (Message instance, value) => instance.displayNick = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Message instance) => instance.extra),
      'from': VmProxy(identifier: 'from', externalInstancePropertyReader: (Message instance) => instance.from, externalInstancePropertyWriter: (Message instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Message instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Message instance) => instance.id),
      'mediaGoing': VmProxy(identifier: 'mediaGoing', externalInstancePropertyReader: (Message instance) => instance.mediaGoing, externalInstancePropertyWriter: (Message instance, value) => instance.mediaGoing = value),
      'mediaJoined': VmProxy(identifier: 'mediaJoined', externalInstancePropertyReader: (Message instance) => instance.mediaJoined, externalInstancePropertyWriter: (Message instance, value) => instance.mediaJoined = value),
      'mediaTimeE': VmProxy(identifier: 'mediaTimeE', externalInstancePropertyReader: (Message instance) => instance.mediaTimeE, externalInstancePropertyWriter: (Message instance, value) => instance.mediaTimeE = value),
      'mediaTimeS': VmProxy(identifier: 'mediaTimeS', externalInstancePropertyReader: (Message instance) => instance.mediaTimeS, externalInstancePropertyWriter: (Message instance, value) => instance.mediaTimeS = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Message instance) => instance.noSuchMethod),
      'readpackNotice': VmProxy(identifier: 'readpackNotice', externalInstancePropertyReader: (Message instance) => instance.readpackNotice, externalInstancePropertyWriter: (Message instance, value) => instance.readpackNotice = value),
      'revoked': VmProxy(identifier: 'revoked', externalInstancePropertyReader: (Message instance) => instance.revoked, externalInstancePropertyWriter: (Message instance, value) => instance.revoked = value),
      'rmbfenCount': VmProxy(identifier: 'rmbfenCount', externalInstancePropertyReader: (Message instance) => instance.rmbfenCount, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenCount = value),
      'rmbfenEvery': VmProxy(identifier: 'rmbfenEvery', externalInstancePropertyReader: (Message instance) => instance.rmbfenEvery, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenEvery = value),
      'rmbfenFinished': VmProxy(identifier: 'rmbfenFinished', externalInstancePropertyReader: (Message instance) => instance.rmbfenFinished, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenFinished = value),
      'rmbfenLuckly': VmProxy(identifier: 'rmbfenLuckly', externalInstancePropertyReader: (Message instance) => instance.rmbfenLuckly, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenLuckly = value),
      'rmbfenPending': VmProxy(identifier: 'rmbfenPending', externalInstancePropertyReader: (Message instance) => instance.rmbfenPending, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenPending = value),
      'rmbfenTotal': VmProxy(identifier: 'rmbfenTotal', externalInstancePropertyReader: (Message instance) => instance.rmbfenTotal, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenTotal = value),
      'rmbfenUpdate': VmProxy(identifier: 'rmbfenUpdate', externalInstancePropertyReader: (Message instance) => instance.rmbfenUpdate, externalInstancePropertyWriter: (Message instance, value) => instance.rmbfenUpdate = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Message instance) => instance.runtimeType),
      'shareCardId': VmProxy(identifier: 'shareCardId', externalInstancePropertyReader: (Message instance) => instance.shareCardId, externalInstancePropertyWriter: (Message instance, value) => instance.shareCardId = value),
      'shareHeadUrl': VmProxy(identifier: 'shareHeadUrl', externalInstancePropertyReader: (Message instance) => instance.shareHeadUrl, externalInstancePropertyWriter: (Message instance, value) => instance.shareHeadUrl = value),
      'shareIconUrl': VmProxy(identifier: 'shareIconUrl', externalInstancePropertyReader: (Message instance) => instance.shareIconUrl, externalInstancePropertyWriter: (Message instance, value) => instance.shareIconUrl = value),
      'shareLinkUrl': VmProxy(identifier: 'shareLinkUrl', externalInstancePropertyReader: (Message instance) => instance.shareLinkUrl, externalInstancePropertyWriter: (Message instance, value) => instance.shareLinkUrl = value),
      'shareLocation': VmProxy(identifier: 'shareLocation', externalInstancePropertyReader: (Message instance) => instance.shareLocation, externalInstancePropertyWriter: (Message instance, value) => instance.shareLocation = value),
      'short': VmProxy(identifier: 'short', externalInstancePropertyReader: (Message instance) => instance.short, externalInstancePropertyWriter: (Message instance, value) => instance.short = value),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyReader: (Message instance) => instance.sid, externalInstancePropertyWriter: (Message instance, value) => instance.sid = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Message instance) => instance.time),
      'title': VmProxy(identifier: 'title', externalInstancePropertyReader: (Message instance) => instance.title, externalInstancePropertyWriter: (Message instance, value) => instance.title = value),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Message instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Message instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Message instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Message instance) => instance.trans),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (Message instance) => instance.type, externalInstancePropertyWriter: (Message instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Message instance) => instance.uid, externalInstancePropertyWriter: (Message instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Message instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Message instance) => instance.updateByKValues),
    },
  );

  ///class MessageDirty
  static final classMessageDirty = VmClass<MessageDirty>(
    identifier: 'MessageDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MessageDirty.new),
      'body': VmProxy(identifier: 'body', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.body = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.bsid = value),
      'customType': VmProxy(identifier: 'customType', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.customType = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (MessageDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.extra = value),
      'from': VmProxy(identifier: 'from', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MessageDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.id = value),
      'mediaGoing': VmProxy(identifier: 'mediaGoing', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.mediaGoing = value),
      'mediaJoined': VmProxy(identifier: 'mediaJoined', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.mediaJoined = value),
      'mediaTimeE': VmProxy(identifier: 'mediaTimeE', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.mediaTimeE = value),
      'mediaTimeS': VmProxy(identifier: 'mediaTimeS', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.mediaTimeS = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MessageDirty instance) => instance.noSuchMethod),
      'readpackNotice': VmProxy(identifier: 'readpackNotice', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.readpackNotice = value),
      'revoked': VmProxy(identifier: 'revoked', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.revoked = value),
      'rmbfenCount': VmProxy(identifier: 'rmbfenCount', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenCount = value),
      'rmbfenEvery': VmProxy(identifier: 'rmbfenEvery', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenEvery = value),
      'rmbfenFinished': VmProxy(identifier: 'rmbfenFinished', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenFinished = value),
      'rmbfenLuckly': VmProxy(identifier: 'rmbfenLuckly', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenLuckly = value),
      'rmbfenPending': VmProxy(identifier: 'rmbfenPending', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenPending = value),
      'rmbfenTotal': VmProxy(identifier: 'rmbfenTotal', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenTotal = value),
      'rmbfenUpdate': VmProxy(identifier: 'rmbfenUpdate', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.rmbfenUpdate = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MessageDirty instance) => instance.runtimeType),
      'shareCardId': VmProxy(identifier: 'shareCardId', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.shareCardId = value),
      'shareHeadUrl': VmProxy(identifier: 'shareHeadUrl', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.shareHeadUrl = value),
      'shareIconUrl': VmProxy(identifier: 'shareIconUrl', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.shareIconUrl = value),
      'shareLinkUrl': VmProxy(identifier: 'shareLinkUrl', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.shareLinkUrl = value),
      'shareLocation': VmProxy(identifier: 'shareLocation', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.shareLocation = value),
      'short': VmProxy(identifier: 'short', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.short = value),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.sid = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.time = value),
      'title': VmProxy(identifier: 'title', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.title = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MessageDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.trans = value),
      'type': VmProxy(identifier: 'type', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (MessageDirty instance, value) => instance.uid = value),
    },
  );

  ///class Metadata
  static final classMetadata = VmClass<Metadata>(
    identifier: 'Metadata',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Metadata.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Metadata.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Metadata.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Metadata instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Metadata instance) => instance.buildTarget),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Metadata instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Metadata instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Metadata instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Metadata instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (Metadata instance) => instance.path, externalInstancePropertyWriter: (Metadata instance, value) => instance.path = value),
      'removed': VmProxy(identifier: 'removed', externalInstancePropertyReader: (Metadata instance) => instance.removed, externalInstancePropertyWriter: (Metadata instance, value) => instance.removed = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Metadata instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (Metadata instance) => instance.size, externalInstancePropertyWriter: (Metadata instance, value) => instance.size = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Metadata instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Metadata instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Metadata instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Metadata instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Metadata instance) => instance.trans),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (Metadata instance) => instance.type, externalInstancePropertyWriter: (Metadata instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Metadata instance) => instance.uid, externalInstancePropertyWriter: (Metadata instance, value) => instance.uid = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Metadata instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Metadata instance) => instance.updateByKValues),
    },
  );

  ///class MetadataDirty
  static final classMetadataDirty = VmClass<MetadataDirty>(
    identifier: 'MetadataDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MetadataDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (MetadataDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MetadataDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MetadataDirty instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.path = value),
      'removed': VmProxy(identifier: 'removed', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.removed = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MetadataDirty instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.size = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MetadataDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.trans = value),
      'type': VmProxy(identifier: 'type', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (MetadataDirty instance, value) => instance.uid = value),
    },
  );

  ///class NetClient
  static final classNetClient = VmClass<NetClient>(
    identifier: 'NetClient',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => NetClient.new, externalStaticFunctionCaller: ({config, bsid = '', secret = '', isolate = true, onCredentials}) => NetClient.new(config: config, bsid: bsid, secret: secret, isolate: isolate, onCredentials: (b0, b1) => onCredentials(b0, b1))),
      'decryptCredentials': VmProxy(identifier: 'decryptCredentials', externalStaticPropertyReader: () => NetClient.decryptCredentials),
      'encryptCredentials': VmProxy(identifier: 'encryptCredentials', externalStaticPropertyReader: () => NetClient.encryptCredentials),
      'adminBusinessDetail': VmProxy(identifier: 'adminBusinessDetail', externalInstancePropertyReader: (NetClient instance) => instance.adminBusinessDetail),
      'adminBusinessUpdate': VmProxy(identifier: 'adminBusinessUpdate', externalInstancePropertyReader: (NetClient instance) => instance.adminBusinessUpdate),
      'adminCodeFileDelete': VmProxy(identifier: 'adminCodeFileDelete', externalInstancePropertyReader: (NetClient instance) => instance.adminCodeFileDelete),
      'adminCodeFileInsert': VmProxy(identifier: 'adminCodeFileInsert', externalInstancePropertyReader: (NetClient instance) => instance.adminCodeFileInsert),
      'adminCustomXDeny': VmProxy(identifier: 'adminCustomXDeny', externalInstancePropertyReader: (NetClient instance) => instance.adminCustomXDeny),
      'adminCustomXList': VmProxy(identifier: 'adminCustomXList', externalInstancePropertyReader: (NetClient instance) => instance.adminCustomXList),
      'adminErrorList': VmProxy(identifier: 'adminErrorList', externalInstancePropertyReader: (NetClient instance) => instance.adminErrorList),
      'adminErrorState': VmProxy(identifier: 'adminErrorState', externalInstancePropertyReader: (NetClient instance) => instance.adminErrorState),
      'adminLoginList': VmProxy(identifier: 'adminLoginList', externalInstancePropertyReader: (NetClient instance) => instance.adminLoginList),
      'adminMessageDetail': VmProxy(identifier: 'adminMessageDetail', externalInstancePropertyReader: (NetClient instance) => instance.adminMessageDetail),
      'adminPaymentList': VmProxy(identifier: 'adminPaymentList', externalInstancePropertyReader: (NetClient instance) => instance.adminPaymentList),
      'adminPaymentState': VmProxy(identifier: 'adminPaymentState', externalInstancePropertyReader: (NetClient instance) => instance.adminPaymentState),
      'adminReportList': VmProxy(identifier: 'adminReportList', externalInstancePropertyReader: (NetClient instance) => instance.adminReportList),
      'adminReportState': VmProxy(identifier: 'adminReportState', externalInstancePropertyReader: (NetClient instance) => instance.adminReportState),
      'adminTeamDeny': VmProxy(identifier: 'adminTeamDeny', externalInstancePropertyReader: (NetClient instance) => instance.adminTeamDeny),
      'adminTeamIcon': VmProxy(identifier: 'adminTeamIcon', externalInstancePropertyReader: (NetClient instance) => instance.adminTeamIcon),
      'adminTeamList': VmProxy(identifier: 'adminTeamList', externalInstancePropertyReader: (NetClient instance) => instance.adminTeamList),
      'adminUserDeny': VmProxy(identifier: 'adminUserDeny', externalInstancePropertyReader: (NetClient instance) => instance.adminUserDeny),
      'adminUserList': VmProxy(identifier: 'adminUserList', externalInstancePropertyReader: (NetClient instance) => instance.adminUserList),
      'alipayStart': VmProxy(identifier: 'alipayStart', externalInstancePropertyReader: (NetClient instance) => instance.alipayStart),
      'amapIpParse': VmProxy(identifier: 'amapIpParse', externalInstancePropertyReader: (NetClient instance) => instance.amapIpParse),
      'appCodeFile': VmProxy(identifier: 'appCodeFile', externalInstancePropertyReader: (NetClient instance) => instance.appCodeFile),
      'appManifest': VmProxy(identifier: 'appManifest', externalInstancePropertyReader: (NetClient instance) => instance.appManifest),
      'attachUpload': VmProxy(identifier: 'attachUpload', externalInstancePropertyReader: (NetClient instance) => instance.attachUpload),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (NetClient instance) => instance.bsid),
      'business': VmProxy(identifier: 'business', externalInstancePropertyReader: (NetClient instance) => instance.business),
      'clearCustomX': VmProxy(identifier: 'clearCustomX', externalInstancePropertyReader: (NetClient instance) => instance.clearCustomX),
      'config': VmProxy(identifier: 'config', externalInstancePropertyReader: (NetClient instance) => instance.config),
      'connect': VmProxy(identifier: 'connect', externalInstancePropertyReader: (NetClient instance) => instance.connect, externalInstanceFunctionCaller: (NetClient instance, {onopen, onclose, onerror, onretry, onheart}) => instance.connect(onopen: onopen, onclose: onclose == null ? null : (b0, b1) => onclose(b0, b1), onerror: onerror == null ? null : (b0) => onerror(b0), onretry: onretry == null ? null : (b0) => onretry(b0), onheart: onheart == null ? null : (b0, b1) => onheart(b0, b1))),
      'createSession': VmProxy(identifier: 'createSession', externalInstancePropertyReader: (NetClient instance) => instance.createSession),
      'cusmarkLoad': VmProxy(identifier: 'cusmarkLoad', externalInstancePropertyReader: (NetClient instance) => instance.cusmarkLoad),
      'cuspaidLoad': VmProxy(identifier: 'cuspaidLoad', externalInstancePropertyReader: (NetClient instance) => instance.cuspaidLoad),
      'cusstarLoad': VmProxy(identifier: 'cusstarLoad', externalInstancePropertyReader: (NetClient instance) => instance.cusstarLoad),
      'customXDelete': VmProxy(identifier: 'customXDelete', externalInstancePropertyReader: (NetClient instance) => instance.customXDelete),
      'customXDetail': VmProxy(identifier: 'customXDetail', externalInstancePropertyReader: (NetClient instance) => instance.customXDetail),
      'customXInsert': VmProxy(identifier: 'customXInsert', externalInstancePropertyReader: (NetClient instance) => instance.customXInsert),
      'customXLoad': VmProxy(identifier: 'customXLoad', externalInstancePropertyReader: (NetClient instance) => instance.customXLoad),
      'customXMark': VmProxy(identifier: 'customXMark', externalInstancePropertyReader: (NetClient instance) => instance.customXMark),
      'customXPathId': VmProxy(identifier: 'customXPathId', externalInstancePropertyReader: (NetClient instance) => instance.customXPathId),
      'customXStar': VmProxy(identifier: 'customXStar', externalInstancePropertyReader: (NetClient instance) => instance.customXStar),
      'customXUpdate': VmProxy(identifier: 'customXUpdate', externalInstancePropertyReader: (NetClient instance) => instance.customXUpdate),
      'doLogError': VmProxy(identifier: 'doLogError', externalInstancePropertyReader: (NetClient instance) => instance.doLogError),
      'doLogLogin': VmProxy(identifier: 'doLogLogin', externalInstancePropertyReader: (NetClient instance) => instance.doLogLogin),
      'doLogReport': VmProxy(identifier: 'doLogReport', externalInstancePropertyReader: (NetClient instance) => instance.doLogReport),
      'getNickForMsgShip': VmProxy(identifier: 'getNickForMsgShip', externalInstancePropertyReader: (NetClient instance) => instance.getNickForMsgShip),
      'getTeam': VmProxy(identifier: 'getTeam', externalInstancePropertyReader: (NetClient instance) => instance.getTeam),
      'getTeamShip': VmProxy(identifier: 'getTeamShip', externalInstancePropertyReader: (NetClient instance) => instance.getTeamShip),
      'getTeamUser': VmProxy(identifier: 'getTeamUser', externalInstancePropertyReader: (NetClient instance) => instance.getTeamUser),
      'getTeamuserState': VmProxy(identifier: 'getTeamuserState', externalInstancePropertyReader: (NetClient instance) => instance.getTeamuserState),
      'getUser': VmProxy(identifier: 'getUser', externalInstancePropertyReader: (NetClient instance) => instance.getUser),
      'getUserShip': VmProxy(identifier: 'getUserShip', externalInstancePropertyReader: (NetClient instance) => instance.getUserShip),
      'getWaitShip': VmProxy(identifier: 'getWaitShip', externalInstancePropertyReader: (NetClient instance) => instance.getWaitShip),
      'guestHttpUrl': VmProxy(identifier: 'guestHttpUrl', externalInstancePropertyReader: (NetClient instance) => instance.guestHttpUrl),
      'guestWebsocketUrl': VmProxy(identifier: 'guestWebsocketUrl', externalInstancePropertyReader: (NetClient instance) => instance.guestWebsocketUrl),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (NetClient instance) => instance.hashCode),
      'iospayStart': VmProxy(identifier: 'iospayStart', externalInstancePropertyReader: (NetClient instance) => instance.iospayStart),
      'isMessageSendForSession': VmProxy(identifier: 'isMessageSendForSession', externalInstancePropertyReader: (NetClient instance) => instance.isMessageSendForSession),
      'isMessageSendPacket': VmProxy(identifier: 'isMessageSendPacket', externalInstancePropertyReader: (NetClient instance) => instance.isMessageSendPacket),
      'isMessageUpdatePacket': VmProxy(identifier: 'isMessageUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isMessageUpdatePacket),
      'isMessageWebrtcPacket': VmProxy(identifier: 'isMessageWebrtcPacket', externalInstancePropertyReader: (NetClient instance) => instance.isMessageWebrtcPacket),
      'isolate': VmProxy(identifier: 'isolate', externalInstancePropertyReader: (NetClient instance) => instance.isolate),
      'isTeamFetchedPacket': VmProxy(identifier: 'isTeamFetchedPacket', externalInstancePropertyReader: (NetClient instance) => instance.isTeamFetchedPacket),
      'isTeamShipUpdatePacket': VmProxy(identifier: 'isTeamShipUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isTeamShipUpdatePacket),
      'isTeamUpdatePacket': VmProxy(identifier: 'isTeamUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isTeamUpdatePacket),
      'isUserFetchedPacket': VmProxy(identifier: 'isUserFetchedPacket', externalInstancePropertyReader: (NetClient instance) => instance.isUserFetchedPacket),
      'isUserShipUpdatePacket': VmProxy(identifier: 'isUserShipUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isUserShipUpdatePacket),
      'isUserUpdatePacket': VmProxy(identifier: 'isUserUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isUserUpdatePacket),
      'isWaitShipUpdatePacket': VmProxy(identifier: 'isWaitShipUpdatePacket', externalInstancePropertyReader: (NetClient instance) => instance.isWaitShipUpdatePacket),
      'loginByApple': VmProxy(identifier: 'loginByApple', externalInstancePropertyReader: (NetClient instance) => instance.loginByApple),
      'loginByNoPwd': VmProxy(identifier: 'loginByNoPwd', externalInstancePropertyReader: (NetClient instance) => instance.loginByNoPwd),
      'loginByPhone': VmProxy(identifier: 'loginByPhone', externalInstancePropertyReader: (NetClient instance) => instance.loginByPhone),
      'loginByToken': VmProxy(identifier: 'loginByToken', externalInstancePropertyReader: (NetClient instance) => instance.loginByToken),
      'loginByWechat': VmProxy(identifier: 'loginByWechat', externalInstancePropertyReader: (NetClient instance) => instance.loginByWechat),
      'messageDetail': VmProxy(identifier: 'messageDetail', externalInstancePropertyReader: (NetClient instance) => instance.messageDetail),
      'messageLoad': VmProxy(identifier: 'messageLoad', externalInstancePropertyReader: (NetClient instance) => instance.messageLoad),
      'messageSendCustomContent': VmProxy(identifier: 'messageSendCustomContent', externalInstancePropertyReader: (NetClient instance) => instance.messageSendCustomContent),
      'messageSendImage': VmProxy(identifier: 'messageSendImage', externalInstancePropertyReader: (NetClient instance) => instance.messageSendImage),
      'messageSendRealtimeLocal': VmProxy(identifier: 'messageSendRealtimeLocal', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRealtimeLocal),
      'messageSendRealtimeShare': VmProxy(identifier: 'messageSendRealtimeShare', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRealtimeShare),
      'messageSendRealtimeVideo': VmProxy(identifier: 'messageSendRealtimeVideo', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRealtimeVideo),
      'messageSendRealtimeVoice': VmProxy(identifier: 'messageSendRealtimeVoice', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRealtimeVoice),
      'messageSendRedpackLuckly': VmProxy(identifier: 'messageSendRedpackLuckly', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRedpackLuckly),
      'messageSendRedpackNormal': VmProxy(identifier: 'messageSendRedpackNormal', externalInstancePropertyReader: (NetClient instance) => instance.messageSendRedpackNormal),
      'messageSendShareCardTeam': VmProxy(identifier: 'messageSendShareCardTeam', externalInstancePropertyReader: (NetClient instance) => instance.messageSendShareCardTeam),
      'messageSendShareCardUser': VmProxy(identifier: 'messageSendShareCardUser', externalInstancePropertyReader: (NetClient instance) => instance.messageSendShareCardUser),
      'messageSendShareHtmlPage': VmProxy(identifier: 'messageSendShareHtmlPage', externalInstancePropertyReader: (NetClient instance) => instance.messageSendShareHtmlPage),
      'messageSendShareLocation': VmProxy(identifier: 'messageSendShareLocation', externalInstancePropertyReader: (NetClient instance) => instance.messageSendShareLocation),
      'messageSendText': VmProxy(identifier: 'messageSendText', externalInstancePropertyReader: (NetClient instance) => instance.messageSendText),
      'messageSendVideo': VmProxy(identifier: 'messageSendVideo', externalInstancePropertyReader: (NetClient instance) => instance.messageSendVideo),
      'messageSendVoice': VmProxy(identifier: 'messageSendVoice', externalInstancePropertyReader: (NetClient instance) => instance.messageSendVoice),
      'messageUpdate': VmProxy(identifier: 'messageUpdate', externalInstancePropertyReader: (NetClient instance) => instance.messageUpdate),
      'messageWebrtc': VmProxy(identifier: 'messageWebrtc', externalInstancePropertyReader: (NetClient instance) => instance.messageWebrtc),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (NetClient instance) => instance.noSuchMethod),
      'onCredentials': VmProxy(identifier: 'onCredentials', externalInstancePropertyReader: (NetClient instance) => instance.onCredentials),
      'parseMessageFromSendOrUpdate': VmProxy(identifier: 'parseMessageFromSendOrUpdate', externalInstancePropertyReader: (NetClient instance) => instance.parseMessageFromSendOrUpdate),
      'parseTeamShipFromSendOrUpdate': VmProxy(identifier: 'parseTeamShipFromSendOrUpdate', externalInstancePropertyReader: (NetClient instance) => instance.parseTeamShipFromSendOrUpdate),
      'parseUserShipFromSendOrUpdate': VmProxy(identifier: 'parseUserShipFromSendOrUpdate', externalInstancePropertyReader: (NetClient instance) => instance.parseUserShipFromSendOrUpdate),
      'paymentCashout': VmProxy(identifier: 'paymentCashout', externalInstancePropertyReader: (NetClient instance) => instance.paymentCashout),
      'paymentLoad': VmProxy(identifier: 'paymentLoad', externalInstancePropertyReader: (NetClient instance) => instance.paymentLoad),
      'paymentUpdate': VmProxy(identifier: 'paymentUpdate', externalInstancePropertyReader: (NetClient instance) => instance.paymentUpdate),
      'paymentVirtual': VmProxy(identifier: 'paymentVirtual', externalInstancePropertyReader: (NetClient instance) => instance.paymentVirtual),
      'release': VmProxy(identifier: 'release', externalInstancePropertyReader: (NetClient instance) => instance.release),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (NetClient instance) => instance.runtimeType),
      'secret': VmProxy(identifier: 'secret', externalInstancePropertyReader: (NetClient instance) => instance.secret),
      'sendRandcode': VmProxy(identifier: 'sendRandcode', externalInstancePropertyReader: (NetClient instance) => instance.sendRandcode),
      'sessionState': VmProxy(identifier: 'sessionState', externalInstancePropertyReader: (NetClient instance) => instance.sessionState),
      'setOnMessageSendListener': VmProxy(identifier: 'setOnMessageSendListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnMessageSendListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnMessageSendListener((b0) => a0(b0), remove: remove)),
      'setOnMessageUpdateListener': VmProxy(identifier: 'setOnMessageUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnMessageUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnMessageUpdateListener((b0) => a0(b0), remove: remove)),
      'setOnMessageWebrtcListener': VmProxy(identifier: 'setOnMessageWebrtcListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnMessageWebrtcListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnMessageWebrtcListener((b0) => a0(b0), remove: remove)),
      'setOnTeamFetchedWatcher': VmProxy(identifier: 'setOnTeamFetchedWatcher', externalInstancePropertyReader: (NetClient instance) => instance.setOnTeamFetchedWatcher, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnTeamFetchedWatcher((b0) => a0(b0), remove: remove)),
      'setOnTeamShipUpdateListener': VmProxy(identifier: 'setOnTeamShipUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnTeamShipUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnTeamShipUpdateListener((b0) => a0(b0), remove: remove)),
      'setOnTeamUpdateListener': VmProxy(identifier: 'setOnTeamUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnTeamUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnTeamUpdateListener((b0) => a0(b0), remove: remove)),
      'setOnUserFetchedWatcher': VmProxy(identifier: 'setOnUserFetchedWatcher', externalInstancePropertyReader: (NetClient instance) => instance.setOnUserFetchedWatcher, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnUserFetchedWatcher((b0) => a0(b0), remove: remove)),
      'setOnUserShipUpdateListener': VmProxy(identifier: 'setOnUserShipUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnUserShipUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnUserShipUpdateListener((b0) => a0(b0), remove: remove)),
      'setOnUserUpdateListener': VmProxy(identifier: 'setOnUserUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnUserUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnUserUpdateListener((b0) => a0(b0), remove: remove)),
      'setOnWaitShipUpdateListener': VmProxy(identifier: 'setOnWaitShipUpdateListener', externalInstancePropertyReader: (NetClient instance) => instance.setOnWaitShipUpdateListener, externalInstanceFunctionCaller: (NetClient instance, a0, {remove = false}) => instance.setOnWaitShipUpdateListener((b0) => a0(b0), remove: remove)),
      'teamCreate': VmProxy(identifier: 'teamCreate', externalInstancePropertyReader: (NetClient instance) => instance.teamCreate),
      'teamFetch': VmProxy(identifier: 'teamFetch', externalInstancePropertyReader: (NetClient instance) => instance.teamFetch),
      'teamMember': VmProxy(identifier: 'teamMember', externalInstancePropertyReader: (NetClient instance) => instance.teamMember),
      'teamSearch': VmProxy(identifier: 'teamSearch', externalInstancePropertyReader: (NetClient instance) => instance.teamSearch),
      'teamShipApply': VmProxy(identifier: 'teamShipApply', externalInstancePropertyReader: (NetClient instance) => instance.teamShipApply),
      'teamShipNone': VmProxy(identifier: 'teamShipNone', externalInstancePropertyReader: (NetClient instance) => instance.teamShipNone),
      'teamShipPass': VmProxy(identifier: 'teamShipPass', externalInstancePropertyReader: (NetClient instance) => instance.teamShipPass),
      'teamShipQuery': VmProxy(identifier: 'teamShipQuery', externalInstancePropertyReader: (NetClient instance) => instance.teamShipQuery),
      'teamshipState': VmProxy(identifier: 'teamshipState', externalInstancePropertyReader: (NetClient instance) => instance.teamshipState),
      'teamShipUpdate': VmProxy(identifier: 'teamShipUpdate', externalInstancePropertyReader: (NetClient instance) => instance.teamShipUpdate),
      'teamUpdate': VmProxy(identifier: 'teamUpdate', externalInstancePropertyReader: (NetClient instance) => instance.teamUpdate),
      'teamUserAuth': VmProxy(identifier: 'teamUserAuth', externalInstancePropertyReader: (NetClient instance) => instance.teamUserAuth),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (NetClient instance) => instance.toString),
      'user': VmProxy(identifier: 'user', externalInstancePropertyReader: (NetClient instance) => instance.user),
      'userDestroy': VmProxy(identifier: 'userDestroy', externalInstancePropertyReader: (NetClient instance) => instance.userDestroy),
      'userEnter': VmProxy(identifier: 'userEnter', externalInstancePropertyReader: (NetClient instance) => instance.userEnter),
      'userFetch': VmProxy(identifier: 'userFetch', externalInstancePropertyReader: (NetClient instance) => instance.userFetch),
      'userLeave': VmProxy(identifier: 'userLeave', externalInstancePropertyReader: (NetClient instance) => instance.userLeave),
      'userSearch': VmProxy(identifier: 'userSearch', externalInstancePropertyReader: (NetClient instance) => instance.userSearch),
      'userShipApply': VmProxy(identifier: 'userShipApply', externalInstancePropertyReader: (NetClient instance) => instance.userShipApply),
      'userShipNone': VmProxy(identifier: 'userShipNone', externalInstancePropertyReader: (NetClient instance) => instance.userShipNone),
      'userShipPass': VmProxy(identifier: 'userShipPass', externalInstancePropertyReader: (NetClient instance) => instance.userShipPass),
      'userShipQuery': VmProxy(identifier: 'userShipQuery', externalInstancePropertyReader: (NetClient instance) => instance.userShipQuery),
      'usershipState': VmProxy(identifier: 'usershipState', externalInstancePropertyReader: (NetClient instance) => instance.usershipState),
      'userShipUpdate': VmProxy(identifier: 'userShipUpdate', externalInstancePropertyReader: (NetClient instance) => instance.userShipUpdate),
      'userUpdate': VmProxy(identifier: 'userUpdate', externalInstancePropertyReader: (NetClient instance) => instance.userUpdate),
      'validateHost': VmProxy(identifier: 'validateHost', externalInstancePropertyReader: (NetClient instance) => instance.validateHost),
      'waitshipState': VmProxy(identifier: 'waitshipState', externalInstancePropertyReader: (NetClient instance) => instance.waitshipState),
      'wechatStart': VmProxy(identifier: 'wechatStart', externalInstancePropertyReader: (NetClient instance) => instance.wechatStart),
    },
  );

  ///class NetClientAzState
  static final classNetClientAzState = VmClass<NetClientAzState>(
    identifier: 'NetClientAzState',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => NetClientAzState.new),
      'header': VmProxy(identifier: 'header', externalStaticPropertyReader: () => NetClientAzState.header),
      'letters': VmProxy(identifier: 'letters', externalStaticPropertyReader: () => NetClientAzState.letters),
      'azList': VmProxy(identifier: 'azList', externalInstancePropertyReader: (NetClientAzState instance) => instance.azList),
      'azMap': VmProxy(identifier: 'azMap', externalInstancePropertyReader: (NetClientAzState instance) => instance.azMap),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (NetClientAzState instance) => instance.clear),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (NetClientAzState instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (NetClientAzState instance) => instance.noSuchMethod),
      'okList': VmProxy(identifier: 'okList', externalInstancePropertyReader: (NetClientAzState instance) => instance.okList),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (NetClientAzState instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (NetClientAzState instance) => instance.toString),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyReader: (NetClientAzState instance) => instance.unread),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (NetClientAzState instance) => instance.update),
    },
  );

  ///class ObjectId
  static final classObjectId = VmClass<ObjectId>(
    identifier: 'ObjectId',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ObjectId.new),
      'fromHexString': VmProxy(identifier: 'fromHexString', externalStaticPropertyReader: () => ObjectId.fromHexString),
      'fromBsonBinary': VmProxy(identifier: 'fromBsonBinary', externalStaticPropertyReader: () => ObjectId.fromBsonBinary),
      'fromBuffer': VmProxy(identifier: 'fromBuffer', externalStaticPropertyReader: () => ObjectId.fromBuffer),
      'fromSeconds': VmProxy(identifier: 'fromSeconds', externalStaticPropertyReader: () => ObjectId.fromSeconds),
      'createId': VmProxy(identifier: 'createId', externalStaticPropertyReader: () => ObjectId.createId),
      'extractData': VmProxy(identifier: 'extractData', externalStaticPropertyReader: () => ObjectId.extractData),
      'isValidHexId': VmProxy(identifier: 'isValidHexId', externalStaticPropertyReader: () => ObjectId.isValidHexId),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => ObjectId.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => ObjectId.tryParse),
      '\$oid': VmProxy(identifier: '\$oid', externalInstancePropertyReader: (ObjectId instance) => instance.$oid),
      'dateTime': VmProxy(identifier: 'dateTime', externalInstancePropertyReader: (ObjectId instance) => instance.dateTime),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ObjectId instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (ObjectId instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ObjectId instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ObjectId instance) => instance.runtimeType),
      'toHexString': VmProxy(identifier: 'toHexString', externalInstancePropertyReader: (ObjectId instance) => instance.toHexString),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ObjectId instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ObjectId instance) => instance.toString),
    },
  );

  ///class PayGoods
  static final classPayGoods = VmClass<PayGoods>(
    identifier: 'PayGoods',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PayGoods.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => PayGoods.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => PayGoods.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (PayGoods instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (PayGoods instance) => instance.buildTarget),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (PayGoods instance) => instance.extra),
      'goodsActualRmbfen': VmProxy(identifier: 'goodsActualRmbfen', externalInstancePropertyReader: (PayGoods instance) => instance.goodsActualRmbfen, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsActualRmbfen = value),
      'goodsDesc': VmProxy(identifier: 'goodsDesc', externalInstancePropertyReader: (PayGoods instance) => instance.goodsDesc, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsDesc = value),
      'goodsGottenRmbfen': VmProxy(identifier: 'goodsGottenRmbfen', externalInstancePropertyReader: (PayGoods instance) => instance.goodsGottenRmbfen, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsGottenRmbfen = value),
      'goodsIcon': VmProxy(identifier: 'goodsIcon', externalInstancePropertyReader: (PayGoods instance) => instance.goodsIcon, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsIcon = value),
      'goodsName': VmProxy(identifier: 'goodsName', externalInstancePropertyReader: (PayGoods instance) => instance.goodsName, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsName = value),
      'goodsNo': VmProxy(identifier: 'goodsNo', externalInstancePropertyReader: (PayGoods instance) => instance.goodsNo, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsNo = value),
      'goodsVirtualValue': VmProxy(identifier: 'goodsVirtualValue', externalInstancePropertyReader: (PayGoods instance) => instance.goodsVirtualValue, externalInstancePropertyWriter: (PayGoods instance, value) => instance.goodsVirtualValue = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PayGoods instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (PayGoods instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PayGoods instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PayGoods instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (PayGoods instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (PayGoods instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (PayGoods instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PayGoods instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (PayGoods instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (PayGoods instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (PayGoods instance) => instance.updateByKValues),
    },
  );

  ///class PayGoodsDirty
  static final classPayGoodsDirty = VmClass<PayGoodsDirty>(
    identifier: 'PayGoodsDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PayGoodsDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (PayGoodsDirty instance) => instance.data),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.extra = value),
      'goodsActualRmbfen': VmProxy(identifier: 'goodsActualRmbfen', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsActualRmbfen = value),
      'goodsDesc': VmProxy(identifier: 'goodsDesc', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsDesc = value),
      'goodsGottenRmbfen': VmProxy(identifier: 'goodsGottenRmbfen', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsGottenRmbfen = value),
      'goodsIcon': VmProxy(identifier: 'goodsIcon', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsIcon = value),
      'goodsName': VmProxy(identifier: 'goodsName', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsName = value),
      'goodsNo': VmProxy(identifier: 'goodsNo', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsNo = value),
      'goodsVirtualValue': VmProxy(identifier: 'goodsVirtualValue', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.goodsVirtualValue = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PayGoodsDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PayGoodsDirty instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PayGoodsDirty instance) => instance.runtimeType),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PayGoodsDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (PayGoodsDirty instance, value) => instance.trans = value),
    },
  );

  ///class Payment
  static final classPayment = VmClass<Payment>(
    identifier: 'Payment',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Payment.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Payment.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Payment.fromString),
      'activeRechargeNotifyCount': VmProxy(identifier: 'activeRechargeNotifyCount', externalInstancePropertyReader: (Payment instance) => instance.activeRechargeNotifyCount, externalInstancePropertyWriter: (Payment instance, value) => instance.activeRechargeNotifyCount = value),
      'activeRechargeNotifyResult': VmProxy(identifier: 'activeRechargeNotifyResult', externalInstancePropertyReader: (Payment instance) => instance.activeRechargeNotifyResult, externalInstancePropertyWriter: (Payment instance, value) => instance.activeRechargeNotifyResult = value),
      'activeRechargeOrderData': VmProxy(identifier: 'activeRechargeOrderData', externalInstancePropertyReader: (Payment instance) => instance.activeRechargeOrderData, externalInstancePropertyWriter: (Payment instance, value) => instance.activeRechargeOrderData = value),
      'activeRechargeOrderResult': VmProxy(identifier: 'activeRechargeOrderResult', externalInstancePropertyReader: (Payment instance) => instance.activeRechargeOrderResult, externalInstancePropertyWriter: (Payment instance, value) => instance.activeRechargeOrderResult = value),
      'bonusesPending': VmProxy(identifier: 'bonusesPending', externalInstancePropertyReader: (Payment instance) => instance.bonusesPending, externalInstancePropertyWriter: (Payment instance, value) => instance.bonusesPending = value),
      'bonusesRmbfen': VmProxy(identifier: 'bonusesRmbfen', externalInstancePropertyReader: (Payment instance) => instance.bonusesRmbfen, externalInstancePropertyWriter: (Payment instance, value) => instance.bonusesRmbfen = value),
      'bonusesUids': VmProxy(identifier: 'bonusesUids', externalInstancePropertyReader: (Payment instance) => instance.bonusesUids, externalInstancePropertyWriter: (Payment instance, value) => instance.bonusesUids = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Payment instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Payment instance) => instance.buildTarget),
      'cashoutAccountName': VmProxy(identifier: 'cashoutAccountName', externalInstancePropertyReader: (Payment instance) => instance.cashoutAccountName, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAccountName = value),
      'cashoutAccountNo': VmProxy(identifier: 'cashoutAccountNo', externalInstancePropertyReader: (Payment instance) => instance.cashoutAccountNo, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAccountNo = value),
      'cashoutAccountTp': VmProxy(identifier: 'cashoutAccountTp', externalInstancePropertyReader: (Payment instance) => instance.cashoutAccountTp, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAccountTp = value),
      'cashoutActualRmbfen': VmProxy(identifier: 'cashoutActualRmbfen', externalInstancePropertyReader: (Payment instance) => instance.cashoutActualRmbfen, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutActualRmbfen = value),
      'cashoutAutoData': VmProxy(identifier: 'cashoutAutoData', externalInstancePropertyReader: (Payment instance) => instance.cashoutAutoData, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAutoData = value),
      'cashoutAutoNotify': VmProxy(identifier: 'cashoutAutoNotify', externalInstancePropertyReader: (Payment instance) => instance.cashoutAutoNotify, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAutoNotify = value),
      'cashoutAutoResult': VmProxy(identifier: 'cashoutAutoResult', externalInstancePropertyReader: (Payment instance) => instance.cashoutAutoResult, externalInstancePropertyWriter: (Payment instance, value) => instance.cashoutAutoResult = value),
      'describe': VmProxy(identifier: 'describe', externalInstancePropertyReader: (Payment instance) => instance.describe, externalInstancePropertyWriter: (Payment instance, value) => instance.describe = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Payment instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Payment instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Payment instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Payment instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (Payment instance) => instance.notice, externalInstancePropertyWriter: (Payment instance, value) => instance.notice = value),
      'passiveRechargeOrderNo': VmProxy(identifier: 'passiveRechargeOrderNo', externalInstancePropertyReader: (Payment instance) => instance.passiveRechargeOrderNo, externalInstancePropertyWriter: (Payment instance, value) => instance.passiveRechargeOrderNo = value),
      'passiveRechargeOrderReceipt': VmProxy(identifier: 'passiveRechargeOrderReceipt', externalInstancePropertyReader: (Payment instance) => instance.passiveRechargeOrderReceipt, externalInstancePropertyWriter: (Payment instance, value) => instance.passiveRechargeOrderReceipt = value),
      'passiveRechargeVerifyCount': VmProxy(identifier: 'passiveRechargeVerifyCount', externalInstancePropertyReader: (Payment instance) => instance.passiveRechargeVerifyCount, externalInstancePropertyWriter: (Payment instance, value) => instance.passiveRechargeVerifyCount = value),
      'passiveRechargeVerifyResult': VmProxy(identifier: 'passiveRechargeVerifyResult', externalInstancePropertyReader: (Payment instance) => instance.passiveRechargeVerifyResult, externalInstancePropertyWriter: (Payment instance, value) => instance.passiveRechargeVerifyResult = value),
      'paygoods': VmProxy(identifier: 'paygoods', externalInstancePropertyReader: (Payment instance) => instance.paygoods, externalInstancePropertyWriter: (Payment instance, value) => instance.paygoods = value),
      'relation': VmProxy(identifier: 'relation', externalInstancePropertyReader: (Payment instance) => instance.relation, externalInstancePropertyWriter: (Payment instance, value) => instance.relation = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyReader: (Payment instance) => instance.rmbfen, externalInstancePropertyWriter: (Payment instance, value) => instance.rmbfen = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Payment instance) => instance.runtimeType),
      'state': VmProxy(identifier: 'state', externalInstancePropertyReader: (Payment instance) => instance.state, externalInstancePropertyWriter: (Payment instance, value) => instance.state = value),
      'substate': VmProxy(identifier: 'substate', externalInstancePropertyReader: (Payment instance) => instance.substate, externalInstancePropertyWriter: (Payment instance, value) => instance.substate = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Payment instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Payment instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Payment instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Payment instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Payment instance) => instance.trans),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (Payment instance) => instance.type, externalInstancePropertyWriter: (Payment instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Payment instance) => instance.uid, externalInstancePropertyWriter: (Payment instance, value) => instance.uid = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (Payment instance) => instance.update, externalInstancePropertyWriter: (Payment instance, value) => instance.update = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Payment instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Payment instance) => instance.updateByKValues),
      'virtualCustomXId': VmProxy(identifier: 'virtualCustomXId', externalInstancePropertyReader: (Payment instance) => instance.virtualCustomXId, externalInstancePropertyWriter: (Payment instance, value) => instance.virtualCustomXId = value),
      'virtualCustomXNo': VmProxy(identifier: 'virtualCustomXNo', externalInstancePropertyReader: (Payment instance) => instance.virtualCustomXNo, externalInstancePropertyWriter: (Payment instance, value) => instance.virtualCustomXNo = value),
      'virtualCustomXTp': VmProxy(identifier: 'virtualCustomXTp', externalInstancePropertyReader: (Payment instance) => instance.virtualCustomXTp, externalInstancePropertyWriter: (Payment instance, value) => instance.virtualCustomXTp = value),
      'virtualValueMode': VmProxy(identifier: 'virtualValueMode', externalInstancePropertyReader: (Payment instance) => instance.virtualValueMode, externalInstancePropertyWriter: (Payment instance, value) => instance.virtualValueMode = value),
    },
  );

  ///class PaymentDirty
  static final classPaymentDirty = VmClass<PaymentDirty>(
    identifier: 'PaymentDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PaymentDirty.new),
      'activeRechargeNotifyCount': VmProxy(identifier: 'activeRechargeNotifyCount', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.activeRechargeNotifyCount = value),
      'activeRechargeNotifyResult': VmProxy(identifier: 'activeRechargeNotifyResult', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.activeRechargeNotifyResult = value),
      'activeRechargeOrderData': VmProxy(identifier: 'activeRechargeOrderData', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.activeRechargeOrderData = value),
      'activeRechargeOrderResult': VmProxy(identifier: 'activeRechargeOrderResult', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.activeRechargeOrderResult = value),
      'bonusesPending': VmProxy(identifier: 'bonusesPending', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.bonusesPending = value),
      'bonusesRmbfen': VmProxy(identifier: 'bonusesRmbfen', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.bonusesRmbfen = value),
      'bonusesUids': VmProxy(identifier: 'bonusesUids', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.bonusesUids = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.bsid = value),
      'cashoutAccountName': VmProxy(identifier: 'cashoutAccountName', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAccountName = value),
      'cashoutAccountNo': VmProxy(identifier: 'cashoutAccountNo', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAccountNo = value),
      'cashoutAccountTp': VmProxy(identifier: 'cashoutAccountTp', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAccountTp = value),
      'cashoutActualRmbfen': VmProxy(identifier: 'cashoutActualRmbfen', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutActualRmbfen = value),
      'cashoutAutoData': VmProxy(identifier: 'cashoutAutoData', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAutoData = value),
      'cashoutAutoNotify': VmProxy(identifier: 'cashoutAutoNotify', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAutoNotify = value),
      'cashoutAutoResult': VmProxy(identifier: 'cashoutAutoResult', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.cashoutAutoResult = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (PaymentDirty instance) => instance.data),
      'describe': VmProxy(identifier: 'describe', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.describe = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PaymentDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PaymentDirty instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.notice = value),
      'passiveRechargeOrderNo': VmProxy(identifier: 'passiveRechargeOrderNo', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.passiveRechargeOrderNo = value),
      'passiveRechargeOrderReceipt': VmProxy(identifier: 'passiveRechargeOrderReceipt', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.passiveRechargeOrderReceipt = value),
      'passiveRechargeVerifyCount': VmProxy(identifier: 'passiveRechargeVerifyCount', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.passiveRechargeVerifyCount = value),
      'passiveRechargeVerifyResult': VmProxy(identifier: 'passiveRechargeVerifyResult', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.passiveRechargeVerifyResult = value),
      'paygoods': VmProxy(identifier: 'paygoods', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.paygoods = value),
      'relation': VmProxy(identifier: 'relation', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.relation = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.rmbfen = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PaymentDirty instance) => instance.runtimeType),
      'state': VmProxy(identifier: 'state', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.state = value),
      'substate': VmProxy(identifier: 'substate', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.substate = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PaymentDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.trans = value),
      'type': VmProxy(identifier: 'type', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.type = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.uid = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.update = value),
      'virtualCustomXId': VmProxy(identifier: 'virtualCustomXId', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.virtualCustomXId = value),
      'virtualCustomXNo': VmProxy(identifier: 'virtualCustomXNo', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.virtualCustomXNo = value),
      'virtualCustomXTp': VmProxy(identifier: 'virtualCustomXTp', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.virtualCustomXTp = value),
      'virtualValueMode': VmProxy(identifier: 'virtualValueMode', externalInstancePropertyWriter: (PaymentDirty instance, value) => instance.virtualValueMode = value),
    },
  );

  ///class Randcode
  static final classRandcode = VmClass<Randcode>(
    identifier: 'Randcode',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Randcode.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Randcode.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Randcode.fromString),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Randcode instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Randcode instance) => instance.buildTarget),
      'code': VmProxy(identifier: 'code', externalInstancePropertyReader: (Randcode instance) => instance.code, externalInstancePropertyWriter: (Randcode instance, value) => instance.code = value),
      'expired': VmProxy(identifier: 'expired', externalInstancePropertyReader: (Randcode instance) => instance.expired, externalInstancePropertyWriter: (Randcode instance, value) => instance.expired = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Randcode instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Randcode instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Randcode instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Randcode instance) => instance.noSuchMethod),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyReader: (Randcode instance) => instance.phone, externalInstancePropertyWriter: (Randcode instance, value) => instance.phone = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Randcode instance) => instance.runtimeType),
      'testcnt': VmProxy(identifier: 'testcnt', externalInstancePropertyReader: (Randcode instance) => instance.testcnt, externalInstancePropertyWriter: (Randcode instance, value) => instance.testcnt = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Randcode instance) => instance.time),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (Randcode instance) => instance.timeout, externalInstancePropertyWriter: (Randcode instance, value) => instance.timeout = value),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Randcode instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Randcode instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Randcode instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Randcode instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Randcode instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Randcode instance) => instance.updateByKValues),
    },
  );

  ///class RandcodeDirty
  static final classRandcodeDirty = VmClass<RandcodeDirty>(
    identifier: 'RandcodeDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RandcodeDirty.new),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.bsid = value),
      'code': VmProxy(identifier: 'code', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.code = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (RandcodeDirty instance) => instance.data),
      'expired': VmProxy(identifier: 'expired', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.expired = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RandcodeDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RandcodeDirty instance) => instance.noSuchMethod),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.phone = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RandcodeDirty instance) => instance.runtimeType),
      'testcnt': VmProxy(identifier: 'testcnt', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.testcnt = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.time = value),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.timeout = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RandcodeDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (RandcodeDirty instance, value) => instance.trans = value),
    },
  );

  ///class Request
  static final classRequest = VmClass<Request>(
    identifier: 'Request',
    superclassNames: ['Object', 'BaseRequest'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Request.new),
      'body': VmProxy(identifier: 'body', externalInstancePropertyReader: (Request instance) => instance.body, externalInstancePropertyWriter: (Request instance, value) => instance.body = value),
      'bodyBytes': VmProxy(identifier: 'bodyBytes', externalInstancePropertyReader: (Request instance) => instance.bodyBytes, externalInstancePropertyWriter: (Request instance, value) => instance.bodyBytes = value),
      'bodyFields': VmProxy(identifier: 'bodyFields', externalInstancePropertyReader: (Request instance) => instance.bodyFields, externalInstancePropertyWriter: (Request instance, value) => instance.bodyFields = value),
      'contentLength': VmProxy(identifier: 'contentLength', externalInstancePropertyWriter: (Request instance, value) => instance.contentLength = value, externalInstancePropertyReader: (Request instance) => instance.contentLength),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyWriter: (Request instance, value) => instance.encoding = value, externalInstancePropertyReader: (Request instance) => instance.encoding),
      'finalize': VmProxy(identifier: 'finalize', externalInstancePropertyReader: (Request instance) => instance.finalize),
      'finalized': VmProxy(identifier: 'finalized', externalInstancePropertyReader: (Request instance) => instance.finalized),
      'followRedirects': VmProxy(identifier: 'followRedirects', externalInstancePropertyReader: (Request instance) => instance.followRedirects, externalInstancePropertyWriter: (Request instance, value) => instance.followRedirects = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Request instance) => instance.hashCode),
      'headers': VmProxy(identifier: 'headers', externalInstancePropertyReader: (Request instance) => instance.headers),
      'maxRedirects': VmProxy(identifier: 'maxRedirects', externalInstancePropertyReader: (Request instance) => instance.maxRedirects, externalInstancePropertyWriter: (Request instance, value) => instance.maxRedirects = value),
      'method': VmProxy(identifier: 'method', externalInstancePropertyReader: (Request instance) => instance.method),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Request instance) => instance.noSuchMethod),
      'persistentConnection': VmProxy(identifier: 'persistentConnection', externalInstancePropertyReader: (Request instance) => instance.persistentConnection, externalInstancePropertyWriter: (Request instance, value) => instance.persistentConnection = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Request instance) => instance.runtimeType),
      'send': VmProxy(identifier: 'send', externalInstancePropertyReader: (Request instance) => instance.send),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Request instance) => instance.toString),
      'url': VmProxy(identifier: 'url', externalInstancePropertyReader: (Request instance) => instance.url),
    },
  );

  ///class Response
  static final classResponse = VmClass<Response>(
    identifier: 'Response',
    superclassNames: ['Object', 'BaseResponse'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Response.new),
      'bytes': VmProxy(identifier: 'bytes', externalStaticPropertyReader: () => Response.bytes),
      'fromStream': VmProxy(identifier: 'fromStream', externalStaticPropertyReader: () => Response.fromStream),
      'body': VmProxy(identifier: 'body', externalInstancePropertyReader: (Response instance) => instance.body),
      'bodyBytes': VmProxy(identifier: 'bodyBytes', externalInstancePropertyReader: (Response instance) => instance.bodyBytes),
      'contentLength': VmProxy(identifier: 'contentLength', externalInstancePropertyReader: (Response instance) => instance.contentLength),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Response instance) => instance.hashCode),
      'headers': VmProxy(identifier: 'headers', externalInstancePropertyReader: (Response instance) => instance.headers),
      'isRedirect': VmProxy(identifier: 'isRedirect', externalInstancePropertyReader: (Response instance) => instance.isRedirect),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Response instance) => instance.noSuchMethod),
      'persistentConnection': VmProxy(identifier: 'persistentConnection', externalInstancePropertyReader: (Response instance) => instance.persistentConnection),
      'reasonPhrase': VmProxy(identifier: 'reasonPhrase', externalInstancePropertyReader: (Response instance) => instance.reasonPhrase),
      'request': VmProxy(identifier: 'request', externalInstancePropertyReader: (Response instance) => instance.request),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Response instance) => instance.runtimeType),
      'statusCode': VmProxy(identifier: 'statusCode', externalInstancePropertyReader: (Response instance) => instance.statusCode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Response instance) => instance.toString),
    },
  );

  ///class Session
  static final classSession = VmClass<Session>(
    identifier: 'Session',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromTeamShip': VmProxy(identifier: 'fromTeamShip', externalStaticPropertyReader: () => Session.fromTeamShip),
      'fromUserShip': VmProxy(identifier: 'fromUserShip', externalStaticPropertyReader: () => Session.fromUserShip),
      'active': VmProxy(identifier: 'active', externalInstancePropertyReader: (Session instance) => instance.active),
      'alias': VmProxy(identifier: 'alias', externalInstancePropertyReader: (Session instance) => instance.alias),
      'apply': VmProxy(identifier: 'apply', externalInstancePropertyReader: (Session instance) => instance.apply),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Session instance) => instance.bsid),
      'dialog': VmProxy(identifier: 'dialog', externalInstancePropertyReader: (Session instance) => instance.dialog),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Session instance) => instance.extra),
      'fid': VmProxy(identifier: 'fid', externalInstancePropertyReader: (Session instance) => instance.fid),
      'from': VmProxy(identifier: 'from', externalInstancePropertyReader: (Session instance) => instance.from),
      'getChatTitle': VmProxy(identifier: 'getChatTitle', externalInstancePropertyReader: (Session instance) => instance.getChatTitle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Session instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Session instance) => instance.id),
      'msgasync': VmProxy(identifier: 'msgasync', externalInstancePropertyReader: (Session instance) => instance.msgasync, externalInstancePropertyWriter: (Session instance, value) => instance.msgasync = value),
      'msgcache': VmProxy(identifier: 'msgcache', externalInstancePropertyReader: (Session instance) => instance.msgcache),
      'msgfrom': VmProxy(identifier: 'msgfrom', externalInstancePropertyReader: (Session instance) => instance.msgfrom),
      'msgloaded': VmProxy(identifier: 'msgloaded', externalInstancePropertyReader: (Session instance) => instance.msgloaded, externalInstancePropertyWriter: (Session instance, value) => instance.msgloaded = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Session instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (Session instance) => instance.notice),
      'recent': VmProxy(identifier: 'recent', externalInstancePropertyReader: (Session instance) => instance.recent),
      'resetMsgStates': VmProxy(identifier: 'resetMsgStates', externalInstancePropertyReader: (Session instance) => instance.resetMsgStates),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (Session instance) => instance.rid),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Session instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyReader: (Session instance) => instance.sid),
      'state': VmProxy(identifier: 'state', externalInstancePropertyReader: (Session instance) => instance.state),
      'team': VmProxy(identifier: 'team', externalInstancePropertyReader: (Session instance) => instance.team),
      'teamship': VmProxy(identifier: 'teamship', externalInstancePropertyReader: (Session instance) => instance.teamship),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Session instance) => instance.time),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (Session instance) => instance.top),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Session instance) => instance.toString),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (Session instance) => instance.uid),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyReader: (Session instance) => instance.unread),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (Session instance) => instance.update),
      'user': VmProxy(identifier: 'user', externalInstancePropertyReader: (Session instance) => instance.user),
      'usership': VmProxy(identifier: 'usership', externalInstancePropertyReader: (Session instance) => instance.usership),
    },
  );

  ///class Team
  static final classTeam = VmClass<Team>(
    identifier: 'Team',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Team.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Team.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Team.fromString),
      'admin': VmProxy(identifier: 'admin', externalInstancePropertyReader: (Team instance) => instance.admin, externalInstancePropertyWriter: (Team instance, value) => instance.admin = value),
      'appHosts': VmProxy(identifier: 'appHosts', externalInstancePropertyReader: (Team instance) => instance.appHosts, externalInstancePropertyWriter: (Team instance, value) => instance.appHosts = value),
      'appMenus': VmProxy(identifier: 'appMenus', externalInstancePropertyReader: (Team instance) => instance.appMenus, externalInstancePropertyWriter: (Team instance, value) => instance.appMenus = value),
      'appSecret': VmProxy(identifier: 'appSecret', externalInstancePropertyReader: (Team instance) => instance.appSecret, externalInstancePropertyWriter: (Team instance, value) => instance.appSecret = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (Team instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Team instance) => instance.buildTarget),
      'bycard': VmProxy(identifier: 'bycard', externalInstancePropertyReader: (Team instance) => instance.bycard, externalInstancePropertyWriter: (Team instance, value) => instance.bycard = value),
      'bycode': VmProxy(identifier: 'bycode', externalInstancePropertyReader: (Team instance) => instance.bycode, externalInstancePropertyWriter: (Team instance, value) => instance.bycode = value),
      'byfind': VmProxy(identifier: 'byfind', externalInstancePropertyReader: (Team instance) => instance.byfind, externalInstancePropertyWriter: (Team instance, value) => instance.byfind = value),
      'byteam': VmProxy(identifier: 'byteam', externalInstancePropertyReader: (Team instance) => instance.byteam, externalInstancePropertyWriter: (Team instance, value) => instance.byteam = value),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyReader: (Team instance) => instance.deny, externalInstancePropertyWriter: (Team instance, value) => instance.deny = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyReader: (Team instance) => instance.desc, externalInstancePropertyWriter: (Team instance, value) => instance.desc = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (Team instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Team instance) => instance.hashCode),
      'head': VmProxy(identifier: 'head', externalInstancePropertyReader: (Team instance) => instance.head, externalInstancePropertyWriter: (Team instance, value) => instance.head = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyReader: (Team instance) => instance.icon, externalInstancePropertyWriter: (Team instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (Team instance) => instance.id),
      'member': VmProxy(identifier: 'member', externalInstancePropertyReader: (Team instance) => instance.member, externalInstancePropertyWriter: (Team instance, value) => instance.member = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyReader: (Team instance) => instance.nick, externalInstancePropertyWriter: (Team instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyReader: (Team instance) => instance.no, externalInstancePropertyWriter: (Team instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Team instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (Team instance) => instance.notice, externalInstancePropertyWriter: (Team instance, value) => instance.notice = value),
      'owner': VmProxy(identifier: 'owner', externalInstancePropertyReader: (Team instance) => instance.owner, externalInstancePropertyWriter: (Team instance, value) => instance.owner = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyReader: (Team instance) => instance.pwd, externalInstancePropertyWriter: (Team instance, value) => instance.pwd = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Team instance) => instance.runtimeType),
      'silent': VmProxy(identifier: 'silent', externalInstancePropertyReader: (Team instance) => instance.silent, externalInstancePropertyWriter: (Team instance, value) => instance.silent = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (Team instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Team instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Team instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Team instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (Team instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Team instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Team instance) => instance.updateByKValues),
    },
  );

  ///class TeamDirty
  static final classTeamDirty = VmClass<TeamDirty>(
    identifier: 'TeamDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TeamDirty.new),
      'admin': VmProxy(identifier: 'admin', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.admin = value),
      'appHosts': VmProxy(identifier: 'appHosts', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.appHosts = value),
      'appMenus': VmProxy(identifier: 'appMenus', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.appMenus = value),
      'appSecret': VmProxy(identifier: 'appSecret', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.appSecret = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.bsid = value),
      'bycard': VmProxy(identifier: 'bycard', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.bycard = value),
      'bycode': VmProxy(identifier: 'bycode', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.bycode = value),
      'byfind': VmProxy(identifier: 'byfind', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.byfind = value),
      'byteam': VmProxy(identifier: 'byteam', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.byteam = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (TeamDirty instance) => instance.data),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.deny = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.desc = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TeamDirty instance) => instance.hashCode),
      'head': VmProxy(identifier: 'head', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.head = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.id = value),
      'member': VmProxy(identifier: 'member', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.member = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TeamDirty instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.notice = value),
      'owner': VmProxy(identifier: 'owner', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.owner = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.pwd = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TeamDirty instance) => instance.runtimeType),
      'silent': VmProxy(identifier: 'silent', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.silent = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.time = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TeamDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (TeamDirty instance, value) => instance.trans = value),
    },
  );

  ///class TeamShip
  static final classTeamShip = VmClass<TeamShip>(
    identifier: 'TeamShip',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TeamShip.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => TeamShip.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => TeamShip.fromString),
      'active': VmProxy(identifier: 'active', externalInstancePropertyReader: (TeamShip instance) => instance.active, externalInstancePropertyWriter: (TeamShip instance, value) => instance.active = value),
      'alias': VmProxy(identifier: 'alias', externalInstancePropertyReader: (TeamShip instance) => instance.alias, externalInstancePropertyWriter: (TeamShip instance, value) => instance.alias = value),
      'apply': VmProxy(identifier: 'apply', externalInstancePropertyReader: (TeamShip instance) => instance.apply, externalInstancePropertyWriter: (TeamShip instance, value) => instance.apply = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (TeamShip instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (TeamShip instance) => instance.buildTarget),
      'dialog': VmProxy(identifier: 'dialog', externalInstancePropertyReader: (TeamShip instance) => instance.dialog, externalInstancePropertyWriter: (TeamShip instance, value) => instance.dialog = value),
      'displayHead': VmProxy(identifier: 'displayHead', externalInstancePropertyReader: (TeamShip instance) => instance.displayHead, externalInstancePropertyWriter: (TeamShip instance, value) => instance.displayHead = value),
      'displayIcon': VmProxy(identifier: 'displayIcon', externalInstancePropertyReader: (TeamShip instance) => instance.displayIcon, externalInstancePropertyWriter: (TeamShip instance, value) => instance.displayIcon = value),
      'displayNick': VmProxy(identifier: 'displayNick', externalInstancePropertyReader: (TeamShip instance) => instance.displayNick, externalInstancePropertyWriter: (TeamShip instance, value) => instance.displayNick = value),
      'displayPinyin': VmProxy(identifier: 'displayPinyin', externalInstancePropertyReader: (TeamShip instance) => instance.displayPinyin, externalInstancePropertyWriter: (TeamShip instance, value) => instance.displayPinyin = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (TeamShip instance) => instance.extra),
      'fid': VmProxy(identifier: 'fid', externalInstancePropertyReader: (TeamShip instance) => instance.fid, externalInstancePropertyWriter: (TeamShip instance, value) => instance.fid = value),
      'from': VmProxy(identifier: 'from', externalInstancePropertyReader: (TeamShip instance) => instance.from, externalInstancePropertyWriter: (TeamShip instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TeamShip instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (TeamShip instance) => instance.id),
      'msgasync': VmProxy(identifier: 'msgasync', externalInstancePropertyReader: (TeamShip instance) => instance.msgasync, externalInstancePropertyWriter: (TeamShip instance, value) => instance.msgasync = value),
      'msgcache': VmProxy(identifier: 'msgcache', externalInstancePropertyReader: (TeamShip instance) => instance.msgcache, externalInstancePropertyWriter: (TeamShip instance, value) => instance.msgcache = value),
      'msgloaded': VmProxy(identifier: 'msgloaded', externalInstancePropertyReader: (TeamShip instance) => instance.msgloaded, externalInstancePropertyWriter: (TeamShip instance, value) => instance.msgloaded = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TeamShip instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (TeamShip instance) => instance.notice, externalInstancePropertyWriter: (TeamShip instance, value) => instance.notice = value),
      'recent': VmProxy(identifier: 'recent', externalInstancePropertyReader: (TeamShip instance) => instance.recent, externalInstancePropertyWriter: (TeamShip instance, value) => instance.recent = value),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (TeamShip instance) => instance.rid, externalInstancePropertyWriter: (TeamShip instance, value) => instance.rid = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TeamShip instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyReader: (TeamShip instance) => instance.sid, externalInstancePropertyWriter: (TeamShip instance, value) => instance.sid = value),
      'state': VmProxy(identifier: 'state', externalInstancePropertyReader: (TeamShip instance) => instance.state, externalInstancePropertyWriter: (TeamShip instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (TeamShip instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (TeamShip instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (TeamShip instance) => instance.toKValues),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (TeamShip instance) => instance.top, externalInstancePropertyWriter: (TeamShip instance, value) => instance.top = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TeamShip instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (TeamShip instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (TeamShip instance) => instance.uid, externalInstancePropertyWriter: (TeamShip instance, value) => instance.uid = value),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyReader: (TeamShip instance) => instance.unread, externalInstancePropertyWriter: (TeamShip instance, value) => instance.unread = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (TeamShip instance) => instance.update, externalInstancePropertyWriter: (TeamShip instance, value) => instance.update = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (TeamShip instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (TeamShip instance) => instance.updateByKValues),
    },
  );

  ///class TeamShipDirty
  static final classTeamShipDirty = VmClass<TeamShipDirty>(
    identifier: 'TeamShipDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TeamShipDirty.new),
      'active': VmProxy(identifier: 'active', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.active = value),
      'alias': VmProxy(identifier: 'alias', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.alias = value),
      'apply': VmProxy(identifier: 'apply', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.apply = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (TeamShipDirty instance) => instance.data),
      'dialog': VmProxy(identifier: 'dialog', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.dialog = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.extra = value),
      'fid': VmProxy(identifier: 'fid', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.fid = value),
      'from': VmProxy(identifier: 'from', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TeamShipDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TeamShipDirty instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.notice = value),
      'recent': VmProxy(identifier: 'recent', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.recent = value),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.rid = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TeamShipDirty instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.sid = value),
      'state': VmProxy(identifier: 'state', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.time = value),
      'top': VmProxy(identifier: 'top', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.top = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TeamShipDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.uid = value),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.unread = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyWriter: (TeamShipDirty instance, value) => instance.update = value),
    },
  );

  ///class User
  static final classUser = VmClass<User>(
    identifier: 'User',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => User.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => User.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => User.fromString),
      'birth': VmProxy(identifier: 'birth', externalInstancePropertyReader: (User instance) => instance.birth, externalInstancePropertyWriter: (User instance, value) => instance.birth = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (User instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (User instance) => instance.buildTarget),
      'bycard': VmProxy(identifier: 'bycard', externalInstancePropertyReader: (User instance) => instance.bycard, externalInstancePropertyWriter: (User instance, value) => instance.bycard = value),
      'bycode': VmProxy(identifier: 'bycode', externalInstancePropertyReader: (User instance) => instance.bycode, externalInstancePropertyWriter: (User instance, value) => instance.bycode = value),
      'byfind': VmProxy(identifier: 'byfind', externalInstancePropertyReader: (User instance) => instance.byfind, externalInstancePropertyWriter: (User instance, value) => instance.byfind = value),
      'byteam': VmProxy(identifier: 'byteam', externalInstancePropertyReader: (User instance) => instance.byteam, externalInstancePropertyWriter: (User instance, value) => instance.byteam = value),
      'card': VmProxy(identifier: 'card', externalInstancePropertyReader: (User instance) => instance.card, externalInstancePropertyWriter: (User instance, value) => instance.card = value),
      'city': VmProxy(identifier: 'city', externalInstancePropertyReader: (User instance) => instance.city, externalInstancePropertyWriter: (User instance, value) => instance.city = value),
      'country': VmProxy(identifier: 'country', externalInstancePropertyReader: (User instance) => instance.country, externalInstancePropertyWriter: (User instance, value) => instance.country = value),
      'customType': VmProxy(identifier: 'customType', externalInstancePropertyReader: (User instance) => instance.customType, externalInstancePropertyWriter: (User instance, value) => instance.customType = value),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyReader: (User instance) => instance.deny, externalInstancePropertyWriter: (User instance, value) => instance.deny = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyReader: (User instance) => instance.desc, externalInstancePropertyWriter: (User instance, value) => instance.desc = value),
      'district': VmProxy(identifier: 'district', externalInstancePropertyReader: (User instance) => instance.district, externalInstancePropertyWriter: (User instance, value) => instance.district = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (User instance) => instance.extra),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (User instance) => instance.hashCode),
      'head': VmProxy(identifier: 'head', externalInstancePropertyReader: (User instance) => instance.head, externalInstancePropertyWriter: (User instance, value) => instance.head = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyReader: (User instance) => instance.icon, externalInstancePropertyWriter: (User instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (User instance) => instance.id),
      'ip': VmProxy(identifier: 'ip', externalInstancePropertyReader: (User instance) => instance.ip, externalInstancePropertyWriter: (User instance, value) => instance.ip = value),
      'location': VmProxy(identifier: 'location', externalInstancePropertyReader: (User instance) => instance.location, externalInstancePropertyWriter: (User instance, value) => instance.location = value),
      'login': VmProxy(identifier: 'login', externalInstancePropertyReader: (User instance) => instance.login, externalInstancePropertyWriter: (User instance, value) => instance.login = value),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (User instance) => instance.name, externalInstancePropertyWriter: (User instance, value) => instance.name = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyReader: (User instance) => instance.nick, externalInstancePropertyWriter: (User instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyReader: (User instance) => instance.no, externalInstancePropertyWriter: (User instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (User instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (User instance) => instance.notice, externalInstancePropertyWriter: (User instance, value) => instance.notice = value),
      'ownerExtra': VmProxy(identifier: 'ownerExtra', externalInstancePropertyReader: (User instance) => instance.ownerExtra, externalInstancePropertyWriter: (User instance, value) => instance.ownerExtra = value),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyReader: (User instance) => instance.phone, externalInstancePropertyWriter: (User instance, value) => instance.phone = value),
      'province': VmProxy(identifier: 'province', externalInstancePropertyReader: (User instance) => instance.province, externalInstancePropertyWriter: (User instance, value) => instance.province = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyReader: (User instance) => instance.pwd, externalInstancePropertyWriter: (User instance, value) => instance.pwd = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyReader: (User instance) => instance.rmbfen, externalInstancePropertyWriter: (User instance, value) => instance.rmbfen = value),
      'rmbpwd': VmProxy(identifier: 'rmbpwd', externalInstancePropertyReader: (User instance) => instance.rmbpwd, externalInstancePropertyWriter: (User instance, value) => instance.rmbpwd = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (User instance) => instance.runtimeType),
      'sex': VmProxy(identifier: 'sex', externalInstancePropertyReader: (User instance) => instance.sex, externalInstancePropertyWriter: (User instance, value) => instance.sex = value),
      'silent': VmProxy(identifier: 'silent', externalInstancePropertyReader: (User instance) => instance.silent, externalInstancePropertyWriter: (User instance, value) => instance.silent = value),
      'thirdNo': VmProxy(identifier: 'thirdNo', externalInstancePropertyReader: (User instance) => instance.thirdNo, externalInstancePropertyWriter: (User instance, value) => instance.thirdNo = value),
      'thirdTp': VmProxy(identifier: 'thirdTp', externalInstancePropertyReader: (User instance) => instance.thirdTp, externalInstancePropertyWriter: (User instance, value) => instance.thirdTp = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (User instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (User instance) => instance.toJson),
      'token': VmProxy(identifier: 'token', externalInstancePropertyReader: (User instance) => instance.token, externalInstancePropertyWriter: (User instance, value) => instance.token = value),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (User instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (User instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (User instance) => instance.trans),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (User instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (User instance) => instance.updateByKValues),
    },
  );

  ///class UserDirty
  static final classUserDirty = VmClass<UserDirty>(
    identifier: 'UserDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UserDirty.new),
      'birth': VmProxy(identifier: 'birth', externalInstancePropertyWriter: (UserDirty instance, value) => instance.birth = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (UserDirty instance, value) => instance.bsid = value),
      'bycard': VmProxy(identifier: 'bycard', externalInstancePropertyWriter: (UserDirty instance, value) => instance.bycard = value),
      'bycode': VmProxy(identifier: 'bycode', externalInstancePropertyWriter: (UserDirty instance, value) => instance.bycode = value),
      'byfind': VmProxy(identifier: 'byfind', externalInstancePropertyWriter: (UserDirty instance, value) => instance.byfind = value),
      'byteam': VmProxy(identifier: 'byteam', externalInstancePropertyWriter: (UserDirty instance, value) => instance.byteam = value),
      'card': VmProxy(identifier: 'card', externalInstancePropertyWriter: (UserDirty instance, value) => instance.card = value),
      'city': VmProxy(identifier: 'city', externalInstancePropertyWriter: (UserDirty instance, value) => instance.city = value),
      'country': VmProxy(identifier: 'country', externalInstancePropertyWriter: (UserDirty instance, value) => instance.country = value),
      'customType': VmProxy(identifier: 'customType', externalInstancePropertyWriter: (UserDirty instance, value) => instance.customType = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (UserDirty instance) => instance.data),
      'deny': VmProxy(identifier: 'deny', externalInstancePropertyWriter: (UserDirty instance, value) => instance.deny = value),
      'desc': VmProxy(identifier: 'desc', externalInstancePropertyWriter: (UserDirty instance, value) => instance.desc = value),
      'district': VmProxy(identifier: 'district', externalInstancePropertyWriter: (UserDirty instance, value) => instance.district = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (UserDirty instance, value) => instance.extra = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UserDirty instance) => instance.hashCode),
      'head': VmProxy(identifier: 'head', externalInstancePropertyWriter: (UserDirty instance, value) => instance.head = value),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyWriter: (UserDirty instance, value) => instance.icon = value),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (UserDirty instance, value) => instance.id = value),
      'ip': VmProxy(identifier: 'ip', externalInstancePropertyWriter: (UserDirty instance, value) => instance.ip = value),
      'location': VmProxy(identifier: 'location', externalInstancePropertyWriter: (UserDirty instance, value) => instance.location = value),
      'login': VmProxy(identifier: 'login', externalInstancePropertyWriter: (UserDirty instance, value) => instance.login = value),
      'name': VmProxy(identifier: 'name', externalInstancePropertyWriter: (UserDirty instance, value) => instance.name = value),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyWriter: (UserDirty instance, value) => instance.nick = value),
      'no': VmProxy(identifier: 'no', externalInstancePropertyWriter: (UserDirty instance, value) => instance.no = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UserDirty instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyWriter: (UserDirty instance, value) => instance.notice = value),
      'ownerExtra': VmProxy(identifier: 'ownerExtra', externalInstancePropertyWriter: (UserDirty instance, value) => instance.ownerExtra = value),
      'phone': VmProxy(identifier: 'phone', externalInstancePropertyWriter: (UserDirty instance, value) => instance.phone = value),
      'province': VmProxy(identifier: 'province', externalInstancePropertyWriter: (UserDirty instance, value) => instance.province = value),
      'pwd': VmProxy(identifier: 'pwd', externalInstancePropertyWriter: (UserDirty instance, value) => instance.pwd = value),
      'rmbfen': VmProxy(identifier: 'rmbfen', externalInstancePropertyWriter: (UserDirty instance, value) => instance.rmbfen = value),
      'rmbpwd': VmProxy(identifier: 'rmbpwd', externalInstancePropertyWriter: (UserDirty instance, value) => instance.rmbpwd = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UserDirty instance) => instance.runtimeType),
      'sex': VmProxy(identifier: 'sex', externalInstancePropertyWriter: (UserDirty instance, value) => instance.sex = value),
      'silent': VmProxy(identifier: 'silent', externalInstancePropertyWriter: (UserDirty instance, value) => instance.silent = value),
      'thirdNo': VmProxy(identifier: 'thirdNo', externalInstancePropertyWriter: (UserDirty instance, value) => instance.thirdNo = value),
      'thirdTp': VmProxy(identifier: 'thirdTp', externalInstancePropertyWriter: (UserDirty instance, value) => instance.thirdTp = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (UserDirty instance, value) => instance.time = value),
      'token': VmProxy(identifier: 'token', externalInstancePropertyWriter: (UserDirty instance, value) => instance.token = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UserDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (UserDirty instance, value) => instance.trans = value),
    },
  );

  ///class UserShip
  static final classUserShip = VmClass<UserShip>(
    identifier: 'UserShip',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UserShip.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => UserShip.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => UserShip.fromString),
      'active': VmProxy(identifier: 'active', externalInstancePropertyReader: (UserShip instance) => instance.active, externalInstancePropertyWriter: (UserShip instance, value) => instance.active = value),
      'alias': VmProxy(identifier: 'alias', externalInstancePropertyReader: (UserShip instance) => instance.alias, externalInstancePropertyWriter: (UserShip instance, value) => instance.alias = value),
      'apply': VmProxy(identifier: 'apply', externalInstancePropertyReader: (UserShip instance) => instance.apply, externalInstancePropertyWriter: (UserShip instance, value) => instance.apply = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyReader: (UserShip instance) => instance.bsid),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (UserShip instance) => instance.buildTarget),
      'dialog': VmProxy(identifier: 'dialog', externalInstancePropertyReader: (UserShip instance) => instance.dialog, externalInstancePropertyWriter: (UserShip instance, value) => instance.dialog = value),
      'displayHead': VmProxy(identifier: 'displayHead', externalInstancePropertyReader: (UserShip instance) => instance.displayHead, externalInstancePropertyWriter: (UserShip instance, value) => instance.displayHead = value),
      'displayIcon': VmProxy(identifier: 'displayIcon', externalInstancePropertyReader: (UserShip instance) => instance.displayIcon, externalInstancePropertyWriter: (UserShip instance, value) => instance.displayIcon = value),
      'displayNick': VmProxy(identifier: 'displayNick', externalInstancePropertyReader: (UserShip instance) => instance.displayNick, externalInstancePropertyWriter: (UserShip instance, value) => instance.displayNick = value),
      'displayPinyin': VmProxy(identifier: 'displayPinyin', externalInstancePropertyReader: (UserShip instance) => instance.displayPinyin, externalInstancePropertyWriter: (UserShip instance, value) => instance.displayPinyin = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyReader: (UserShip instance) => instance.extra),
      'fid': VmProxy(identifier: 'fid', externalInstancePropertyReader: (UserShip instance) => instance.fid, externalInstancePropertyWriter: (UserShip instance, value) => instance.fid = value),
      'from': VmProxy(identifier: 'from', externalInstancePropertyReader: (UserShip instance) => instance.from, externalInstancePropertyWriter: (UserShip instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UserShip instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (UserShip instance) => instance.id),
      'msgasync': VmProxy(identifier: 'msgasync', externalInstancePropertyReader: (UserShip instance) => instance.msgasync, externalInstancePropertyWriter: (UserShip instance, value) => instance.msgasync = value),
      'msgcache': VmProxy(identifier: 'msgcache', externalInstancePropertyReader: (UserShip instance) => instance.msgcache, externalInstancePropertyWriter: (UserShip instance, value) => instance.msgcache = value),
      'msgloaded': VmProxy(identifier: 'msgloaded', externalInstancePropertyReader: (UserShip instance) => instance.msgloaded, externalInstancePropertyWriter: (UserShip instance, value) => instance.msgloaded = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UserShip instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyReader: (UserShip instance) => instance.notice, externalInstancePropertyWriter: (UserShip instance, value) => instance.notice = value),
      'recent': VmProxy(identifier: 'recent', externalInstancePropertyReader: (UserShip instance) => instance.recent, externalInstancePropertyWriter: (UserShip instance, value) => instance.recent = value),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (UserShip instance) => instance.rid, externalInstancePropertyWriter: (UserShip instance, value) => instance.rid = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UserShip instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyReader: (UserShip instance) => instance.sid, externalInstancePropertyWriter: (UserShip instance, value) => instance.sid = value),
      'state': VmProxy(identifier: 'state', externalInstancePropertyReader: (UserShip instance) => instance.state, externalInstancePropertyWriter: (UserShip instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyReader: (UserShip instance) => instance.time),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (UserShip instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (UserShip instance) => instance.toKValues),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (UserShip instance) => instance.top, externalInstancePropertyWriter: (UserShip instance, value) => instance.top = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UserShip instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyReader: (UserShip instance) => instance.trans),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyReader: (UserShip instance) => instance.uid, externalInstancePropertyWriter: (UserShip instance, value) => instance.uid = value),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyReader: (UserShip instance) => instance.unread, externalInstancePropertyWriter: (UserShip instance, value) => instance.unread = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (UserShip instance) => instance.update, externalInstancePropertyWriter: (UserShip instance, value) => instance.update = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (UserShip instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (UserShip instance) => instance.updateByKValues),
    },
  );

  ///class UserShipDirty
  static final classUserShipDirty = VmClass<UserShipDirty>(
    identifier: 'UserShipDirty',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UserShipDirty.new),
      'active': VmProxy(identifier: 'active', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.active = value),
      'alias': VmProxy(identifier: 'alias', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.alias = value),
      'apply': VmProxy(identifier: 'apply', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.apply = value),
      'bsid': VmProxy(identifier: 'bsid', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.bsid = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (UserShipDirty instance) => instance.data),
      'dialog': VmProxy(identifier: 'dialog', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.dialog = value),
      'extra': VmProxy(identifier: 'extra', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.extra = value),
      'fid': VmProxy(identifier: 'fid', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.fid = value),
      'from': VmProxy(identifier: 'from', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.from = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UserShipDirty instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.id = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UserShipDirty instance) => instance.noSuchMethod),
      'notice': VmProxy(identifier: 'notice', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.notice = value),
      'recent': VmProxy(identifier: 'recent', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.recent = value),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.rid = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UserShipDirty instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.sid = value),
      'state': VmProxy(identifier: 'state', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.state = value),
      'time': VmProxy(identifier: 'time', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.time = value),
      'top': VmProxy(identifier: 'top', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.top = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UserShipDirty instance) => instance.toString),
      'trans': VmProxy(identifier: 'trans', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.trans = value),
      'uid': VmProxy(identifier: 'uid', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.uid = value),
      'unread': VmProxy(identifier: 'unread', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.unread = value),
      'update': VmProxy(identifier: 'update', externalInstancePropertyWriter: (UserShipDirty instance, value) => instance.update = value),
    },
  );

  ///class Validator
  static final classValidator = VmClass<Validator>(
    identifier: 'Validator',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Validator.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => Validator.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => Validator.fromString),
      'cashpwdLen': VmProxy(identifier: 'cashpwdLen', externalStaticPropertyReader: () => Validator.cashpwdLen),
      'cashpwdRegExp': VmProxy(identifier: 'cashpwdRegExp', externalStaticPropertyReader: () => Validator.cashpwdRegExp),
      'cashpwdRegTip': VmProxy(identifier: 'cashpwdRegTip', externalStaticPropertyReader: () => Validator.cashpwdRegTip),
      'codefileTextLenMax': VmProxy(identifier: 'codefileTextLenMax', externalStaticPropertyReader: () => Validator.codefileTextLenMax),
      'codefileTextLenMin': VmProxy(identifier: 'codefileTextLenMin', externalStaticPropertyReader: () => Validator.codefileTextLenMin),
      'cusmarkScoreMax': VmProxy(identifier: 'cusmarkScoreMax', externalStaticPropertyReader: () => Validator.cusmarkScoreMax),
      'cusmarkScoreMin': VmProxy(identifier: 'cusmarkScoreMin', externalStaticPropertyReader: () => Validator.cusmarkScoreMin),
      'customxNoMax': VmProxy(identifier: 'customxNoMax', externalStaticPropertyReader: () => Validator.customxNoMax),
      'customxNoMin': VmProxy(identifier: 'customxNoMin', externalStaticPropertyReader: () => Validator.customxNoMin),
      'identLenMax': VmProxy(identifier: 'identLenMax', externalStaticPropertyReader: () => Validator.identLenMax),
      'identLenMin': VmProxy(identifier: 'identLenMin', externalStaticPropertyReader: () => Validator.identLenMin),
      'identRegExp': VmProxy(identifier: 'identRegExp', externalStaticPropertyReader: () => Validator.identRegExp),
      'identRegTip': VmProxy(identifier: 'identRegTip', externalStaticPropertyReader: () => Validator.identRegTip),
      'linkLenMax': VmProxy(identifier: 'linkLenMax', externalStaticPropertyReader: () => Validator.linkLenMax),
      'linkLenMin': VmProxy(identifier: 'linkLenMin', externalStaticPropertyReader: () => Validator.linkLenMin),
      'longTextLenMax': VmProxy(identifier: 'longTextLenMax', externalStaticPropertyReader: () => Validator.longTextLenMax),
      'longTextLenMin': VmProxy(identifier: 'longTextLenMin', externalStaticPropertyReader: () => Validator.longTextLenMin),
      'mediumTextLenMax': VmProxy(identifier: 'mediumTextLenMax', externalStaticPropertyReader: () => Validator.mediumTextLenMax),
      'mediumTextLenMin': VmProxy(identifier: 'mediumTextLenMin', externalStaticPropertyReader: () => Validator.mediumTextLenMin),
      'noLenMax': VmProxy(identifier: 'noLenMax', externalStaticPropertyReader: () => Validator.noLenMax),
      'noLenMin': VmProxy(identifier: 'noLenMin', externalStaticPropertyReader: () => Validator.noLenMin),
      'noRegExp': VmProxy(identifier: 'noRegExp', externalStaticPropertyReader: () => Validator.noRegExp),
      'noRegTip': VmProxy(identifier: 'noRegTip', externalStaticPropertyReader: () => Validator.noRegTip),
      'pageItemMax': VmProxy(identifier: 'pageItemMax', externalStaticPropertyReader: () => Validator.pageItemMax),
      'phoneLenMax': VmProxy(identifier: 'phoneLenMax', externalStaticPropertyReader: () => Validator.phoneLenMax),
      'phoneLenMin': VmProxy(identifier: 'phoneLenMin', externalStaticPropertyReader: () => Validator.phoneLenMin),
      'phoneRegExp': VmProxy(identifier: 'phoneRegExp', externalStaticPropertyReader: () => Validator.phoneRegExp),
      'phoneRegTip': VmProxy(identifier: 'phoneRegTip', externalStaticPropertyReader: () => Validator.phoneRegTip),
      'pwdLenMax': VmProxy(identifier: 'pwdLenMax', externalStaticPropertyReader: () => Validator.pwdLenMax),
      'pwdLenMin': VmProxy(identifier: 'pwdLenMin', externalStaticPropertyReader: () => Validator.pwdLenMin),
      'pwdRegExp': VmProxy(identifier: 'pwdRegExp', externalStaticPropertyReader: () => Validator.pwdRegExp),
      'pwdRegTip': VmProxy(identifier: 'pwdRegTip', externalStaticPropertyReader: () => Validator.pwdRegTip),
      'randcodeLen': VmProxy(identifier: 'randcodeLen', externalStaticPropertyReader: () => Validator.randcodeLen),
      'randcodeRegExp': VmProxy(identifier: 'randcodeRegExp', externalStaticPropertyReader: () => Validator.randcodeRegExp),
      'randcodeRegTip': VmProxy(identifier: 'randcodeRegTip', externalStaticPropertyReader: () => Validator.randcodeRegTip),
      'readpackTimeoutForbid': VmProxy(identifier: 'readpackTimeoutForbid', externalStaticPropertyReader: () => Validator.readpackTimeoutForbid),
      'readpackTimeoutReturn': VmProxy(identifier: 'readpackTimeoutReturn', externalStaticPropertyReader: () => Validator.readpackTimeoutReturn),
      'realtimeMax': VmProxy(identifier: 'realtimeMax', externalStaticPropertyReader: () => Validator.realtimeMax),
      'realtimeMin': VmProxy(identifier: 'realtimeMin', externalStaticPropertyReader: () => Validator.realtimeMin),
      'remoteNotifyMax': VmProxy(identifier: 'remoteNotifyMax', externalStaticPropertyReader: () => Validator.remoteNotifyMax),
      'remoteVerifyMax': VmProxy(identifier: 'remoteVerifyMax', externalStaticPropertyReader: () => Validator.remoteVerifyMax),
      'rmbfenBonusesMin': VmProxy(identifier: 'rmbfenBonusesMin', externalStaticPropertyReader: () => Validator.rmbfenBonusesMin),
      'shortTextLenMax': VmProxy(identifier: 'shortTextLenMax', externalStaticPropertyReader: () => Validator.shortTextLenMax),
      'shortTextLenMin': VmProxy(identifier: 'shortTextLenMin', externalStaticPropertyReader: () => Validator.shortTextLenMin),
      'signLenMax': VmProxy(identifier: 'signLenMax', externalStaticPropertyReader: () => Validator.signLenMax),
      'signLenMin': VmProxy(identifier: 'signLenMin', externalStaticPropertyReader: () => Validator.signLenMin),
      'signRegExp': VmProxy(identifier: 'signRegExp', externalStaticPropertyReader: () => Validator.signRegExp),
      'signRegTip': VmProxy(identifier: 'signRegTip', externalStaticPropertyReader: () => Validator.signRegTip),
      'teamHeadMax': VmProxy(identifier: 'teamHeadMax', externalStaticPropertyReader: () => Validator.teamHeadMax),
      'teamPullMax': VmProxy(identifier: 'teamPullMax', externalStaticPropertyReader: () => Validator.teamPullMax),
      'tokenLenMax': VmProxy(identifier: 'tokenLenMax', externalStaticPropertyReader: () => Validator.tokenLenMax),
      'tokenLenMin': VmProxy(identifier: 'tokenLenMin', externalStaticPropertyReader: () => Validator.tokenLenMin),
      'tokenRegExp': VmProxy(identifier: 'tokenRegExp', externalStaticPropertyReader: () => Validator.tokenRegExp),
      'tokenRegTip': VmProxy(identifier: 'tokenRegTip', externalStaticPropertyReader: () => Validator.tokenRegTip),
      'transcationSpan': VmProxy(identifier: 'transcationSpan', externalStaticPropertyReader: () => Validator.transcationSpan),
      'ultralongTextLenMax': VmProxy(identifier: 'ultralongTextLenMax', externalStaticPropertyReader: () => Validator.ultralongTextLenMax),
      'ultralongTextLenMin': VmProxy(identifier: 'ultralongTextLenMin', externalStaticPropertyReader: () => Validator.ultralongTextLenMin),
      'ultrashortTextLenMax': VmProxy(identifier: 'ultrashortTextLenMax', externalStaticPropertyReader: () => Validator.ultrashortTextLenMax),
      'ultrashortTextLenMin': VmProxy(identifier: 'ultrashortTextLenMin', externalStaticPropertyReader: () => Validator.ultrashortTextLenMin),
      'verylongTextLenMax': VmProxy(identifier: 'verylongTextLenMax', externalStaticPropertyReader: () => Validator.verylongTextLenMax),
      'verylongTextLenMin': VmProxy(identifier: 'verylongTextLenMin', externalStaticPropertyReader: () => Validator.verylongTextLenMin),
      'webrtcInterval': VmProxy(identifier: 'webrtcInterval', externalStaticPropertyReader: () => Validator.webrtcInterval),
      'webrtcTimeouts': VmProxy(identifier: 'webrtcTimeouts', externalStaticPropertyReader: () => Validator.webrtcTimeouts),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (Validator instance) => instance.buildTarget),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Validator instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Validator instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Validator instance) => instance.runtimeType),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (Validator instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (Validator instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Validator instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (Validator instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (Validator instance) => instance.updateByKValues),
    },
  );

  ///all class list
  static final libraryClassList = <VmClass>[
    classBusiness,
    classBusinessDirty,
    classCodeFile,
    classCodeFileDirty,
    classComPage,
    classComTools,
    classConstant,
    classCusincX,
    classCusincXDirty,
    classCusmark,
    classCusmarkDirty,
    classCusstar,
    classCusstarDirty,
    classCustomX,
    classCustomXDirty,
    classDbJsonWraper,
    classDbQueryField,
    classEasyClient,
    classEasyClientConfig,
    classEasyLogger,
    classEasyLogLevel,
    classEasyPacket,
    classEasySecurity,
    classLocation,
    classLocationDirty,
    classLogError,
    classLogErrorDirty,
    classLogLogin,
    classLogLoginDirty,
    classLogReport,
    classLogReportDirty,
    classMediaType,
    classMessage,
    classMessageDirty,
    classMetadata,
    classMetadataDirty,
    classNetClient,
    classNetClientAzState,
    classObjectId,
    classPayGoods,
    classPayGoodsDirty,
    classPayment,
    classPaymentDirty,
    classRandcode,
    classRandcodeDirty,
    classRequest,
    classResponse,
    classSession,
    classTeam,
    classTeamDirty,
    classTeamShip,
    classTeamShipDirty,
    classUser,
    classUserDirty,
    classUserShip,
    classUserShipDirty,
    classValidator,
  ];

  ///all proxy list
  static final libraryProxyList = <VmProxy<void>>[];
}
