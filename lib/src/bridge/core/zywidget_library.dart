// ignore_for_file: avoid_function_literals_in_foreach_calls
// ignore_for_file: deprecated_member_use
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: invalid_use_of_protected_member
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: unnecessary_constructor_name

import 'package:shelf_easy/shelf_easy.dart';
import 'package:flutter/material.dart';
import 'package:zycloud_widget/zycloud_widget.dart';

///
///zywidget库桥接类
///
class ZywidgetLibrary {
  ///class ZyAnchor
  static final classZyAnchor = VmClass<ZyAnchor>(
    identifier: 'ZyAnchor',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyAnchor.new),
      'bottomCenter': VmProxy(identifier: 'bottomCenter', externalStaticPropertyReader: () => ZyAnchor.bottomCenter),
      'bottomLeft': VmProxy(identifier: 'bottomLeft', externalStaticPropertyReader: () => ZyAnchor.bottomLeft),
      'bottomRight': VmProxy(identifier: 'bottomRight', externalStaticPropertyReader: () => ZyAnchor.bottomRight),
      'center': VmProxy(identifier: 'center', externalStaticPropertyReader: () => ZyAnchor.center),
      'centerLeft': VmProxy(identifier: 'centerLeft', externalStaticPropertyReader: () => ZyAnchor.centerLeft),
      'centerRight': VmProxy(identifier: 'centerRight', externalStaticPropertyReader: () => ZyAnchor.centerRight),
      'topCenter': VmProxy(identifier: 'topCenter', externalStaticPropertyReader: () => ZyAnchor.topCenter),
      'topLeft': VmProxy(identifier: 'topLeft', externalStaticPropertyReader: () => ZyAnchor.topLeft),
      'topRight': VmProxy(identifier: 'topRight', externalStaticPropertyReader: () => ZyAnchor.topRight),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyAnchor instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyAnchor instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyAnchor instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyAnchor instance) => instance.toString),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (ZyAnchor instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (ZyAnchor instance) => instance.y),
    },
  );

  ///class ZyApp
  static final classZyApp = VmClass<ZyApp>(
    identifier: 'ZyApp',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyApp.new, externalStaticFunctionCaller: ({key, widgetName = 'ZyApp', localAppBuilder, remoteAppBuilder, remoteCodeLoading, remoteCodeFetcher, logger, logLevel, logLifecycle = false, logRouteStack = false}) => ZyApp.new(key: key, widgetName: widgetName, localAppBuilder: () => localAppBuilder(), remoteAppBuilder: remoteAppBuilder, remoteCodeLoading: remoteCodeLoading == null ? null : (b0, b1) => remoteCodeLoading(b0, b1), remoteCodeFetcher: (b0) => remoteCodeFetcher(b0), logger: logger, logLevel: logLevel, logLifecycle: logLifecycle, logRouteStack: logRouteStack)),
      'canPop': VmProxy(identifier: 'canPop', externalStaticPropertyReader: () => ZyApp.canPop),
      'doWhile': VmProxy(identifier: 'doWhile', externalStaticPropertyReader: () => ZyApp.doWhile, externalStaticFunctionCaller: (a0) => ZyApp.doWhile(() => a0())),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalStaticPropertyReader: () => ZyApp.indexWhere, externalStaticFunctionCaller: (a0, {first = true}) => ZyApp.indexWhere((b0) => a0(b0), first: first)),
      'isInBackground': VmProxy(identifier: 'isInBackground', externalStaticPropertyReader: () => ZyApp.isInBackground),
      'logDebug': VmProxy(identifier: 'logDebug', externalStaticPropertyReader: () => ZyApp.logDebug),
      'logError': VmProxy(identifier: 'logError', externalStaticPropertyReader: () => ZyApp.logError),
      'logFatal': VmProxy(identifier: 'logFatal', externalStaticPropertyReader: () => ZyApp.logFatal),
      'logInfo': VmProxy(identifier: 'logInfo', externalStaticPropertyReader: () => ZyApp.logInfo),
      'logLifecycle': VmProxy(identifier: 'logLifecycle', externalStaticPropertyReader: () => ZyApp.logLifecycle),
      'logRouteStack': VmProxy(identifier: 'logRouteStack', externalStaticPropertyReader: () => ZyApp.logRouteStack),
      'logTrace': VmProxy(identifier: 'logTrace', externalStaticPropertyReader: () => ZyApp.logTrace),
      'logVmStack': VmProxy(identifier: 'logVmStack', externalStaticPropertyReader: () => ZyApp.logVmStack),
      'logWarn': VmProxy(identifier: 'logWarn', externalStaticPropertyReader: () => ZyApp.logWarn),
      'navigatorKey': VmProxy(identifier: 'navigatorKey', externalStaticPropertyReader: () => ZyApp.navigatorKey),
      'navigatorObserver': VmProxy(identifier: 'navigatorObserver', externalStaticPropertyReader: () => ZyApp.navigatorObserver),
      'navigatorRouteLength': VmProxy(identifier: 'navigatorRouteLength', externalStaticPropertyReader: () => ZyApp.navigatorRouteLength),
      'pop': VmProxy(identifier: 'pop', externalStaticPropertyReader: () => ZyApp.pop),
      'popUntil': VmProxy(identifier: 'popUntil', externalStaticPropertyReader: () => ZyApp.popUntil, externalStaticFunctionCaller: (a0) => ZyApp.popUntil((b0) => a0(b0))),
      'push': VmProxy(identifier: 'push', externalStaticPropertyReader: () => ZyApp.push),
      'pushAndRemoveUntil': VmProxy(identifier: 'pushAndRemoveUntil', externalStaticPropertyReader: () => ZyApp.pushAndRemoveUntil, externalStaticFunctionCaller: (a0, a1, {settings, maintainState = true, fullscreenDialog = false, allowSnapshotting = true}) => ZyApp.pushAndRemoveUntil(a0, (b0) => a1(b0), settings: settings, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting)),
      'pushAndRemoveWhere': VmProxy(identifier: 'pushAndRemoveWhere', externalStaticPropertyReader: () => ZyApp.pushAndRemoveWhere, externalStaticFunctionCaller: (a0, a1, {settings, maintainState = true, fullscreenDialog = false, allowSnapshotting = true}) => ZyApp.pushAndRemoveWhere(a0, (b0) => a1(b0), settings: settings, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting)),
      'pushReplacement': VmProxy(identifier: 'pushReplacement', externalStaticPropertyReader: () => ZyApp.pushReplacement),
      'reassemble': VmProxy(identifier: 'reassemble', externalStaticPropertyReader: () => ZyApp.reassemble),
      'removeAbove': VmProxy(identifier: 'removeAbove', externalStaticPropertyReader: () => ZyApp.removeAbove, externalStaticFunctionCaller: (a0) => ZyApp.removeAbove((b0) => a0(b0))),
      'removeBelow': VmProxy(identifier: 'removeBelow', externalStaticPropertyReader: () => ZyApp.removeBelow, externalStaticFunctionCaller: (a0) => ZyApp.removeBelow((b0) => a0(b0))),
      'removeFirst': VmProxy(identifier: 'removeFirst', externalStaticPropertyReader: () => ZyApp.removeFirst, externalStaticFunctionCaller: (a0) => ZyApp.removeFirst((b0) => a0(b0))),
      'removeLast': VmProxy(identifier: 'removeLast', externalStaticPropertyReader: () => ZyApp.removeLast, externalStaticFunctionCaller: (a0) => ZyApp.removeLast((b0) => a0(b0))),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalStaticPropertyReader: () => ZyApp.removeWhere, externalStaticFunctionCaller: (a0) => ZyApp.removeWhere((b0) => a0(b0))),
      'setLogState': VmProxy(identifier: 'setLogState', externalStaticPropertyReader: () => ZyApp.setLogState),
      'showBottomSheet': VmProxy(identifier: 'showBottomSheet', externalStaticPropertyReader: () => ZyApp.showBottomSheet),
      'showDialog': VmProxy(identifier: 'showDialog', externalStaticPropertyReader: () => ZyApp.showDialog, externalStaticFunctionCaller: (a0, {barrierDismissible = false, barrierLabel, barrierColor = const Color(0x80000000), transitionDuration = const Duration(milliseconds: 200), transitionBuilder, routeSettings, anchorPoint}) => ZyApp.showDialog(a0, barrierDismissible: barrierDismissible, barrierLabel: barrierLabel, barrierColor: barrierColor, transitionDuration: transitionDuration, transitionBuilder: transitionBuilder == null ? null : (b0, b1, b2, b3) => transitionBuilder(b0, b1, b2, b3), routeSettings: routeSettings, anchorPoint: anchorPoint)),
      'showPage': VmProxy(identifier: 'showPage', externalStaticPropertyReader: () => ZyApp.showPage, externalStaticFunctionCaller: (a0, {settings, transitionsBuilder, transitionDuration = const Duration(milliseconds: 300), reverseTransitionDuration = const Duration(milliseconds: 300), opaque = true, barrierDismissible = false, barrierColor, barrierLabel, maintainState = true, fullscreenDialog = false, allowSnapshotting = true}) => ZyApp.showPage(a0, settings: settings, transitionsBuilder: transitionsBuilder == null ? null : (b0, b1, b2, b3) => transitionsBuilder(b0, b1, b2, b3), transitionDuration: transitionDuration, reverseTransitionDuration: reverseTransitionDuration, opaque: opaque, barrierDismissible: barrierDismissible, barrierColor: barrierColor, barrierLabel: barrierLabel, maintainState: maintainState, fullscreenDialog: fullscreenDialog, allowSnapshotting: allowSnapshotting)),
      'showTopSheet': VmProxy(identifier: 'showTopSheet', externalStaticPropertyReader: () => ZyApp.showTopSheet),
      'tryCatchFinally': VmProxy(identifier: 'tryCatchFinally', externalStaticPropertyReader: () => ZyApp.tryCatchFinally, externalStaticFunctionCaller: ({body, onCatchError, onFinally}) => ZyApp.tryCatchFinally(body: () => body(), onCatchError: (b0, b1) => onCatchError(b0, b1), onFinally: onFinally)),
      'tryJsonDecode': VmProxy(identifier: 'tryJsonDecode', externalStaticPropertyReader: () => ZyApp.tryJsonDecode),
      'tryJsonEncode': VmProxy(identifier: 'tryJsonEncode', externalStaticPropertyReader: () => ZyApp.tryJsonEncode),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyApp instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyApp instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyApp instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyApp instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyApp instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyApp instance) => instance.key),
      'localAppBuilder': VmProxy(identifier: 'localAppBuilder', externalInstancePropertyReader: (ZyApp instance) => instance.localAppBuilder),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyApp instance) => instance.noSuchMethod),
      'remoteAppBuilder': VmProxy(identifier: 'remoteAppBuilder', externalInstancePropertyReader: (ZyApp instance) => instance.remoteAppBuilder),
      'remoteCodeFetcher': VmProxy(identifier: 'remoteCodeFetcher', externalInstancePropertyReader: (ZyApp instance) => instance.remoteCodeFetcher),
      'remoteCodeLoading': VmProxy(identifier: 'remoteCodeLoading', externalInstancePropertyReader: (ZyApp instance) => instance.remoteCodeLoading),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyApp instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyApp instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyApp instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyApp instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyApp instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyApp instance) => instance.toStringShort),
      'widgetName': VmProxy(identifier: 'widgetName', externalInstancePropertyReader: (ZyApp instance) => instance.widgetName),
    },
  );

  ///class ZyAppLocalizations
  static final classZyAppLocalizations = VmClass<ZyAppLocalizations>(
    identifier: 'ZyAppLocalizations',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyAppLocalizations.new),
      'addLanguageData': VmProxy(identifier: 'addLanguageData', externalStaticPropertyReader: () => ZyAppLocalizations.addLanguageData),
      'delegate': VmProxy(identifier: 'delegate', externalStaticPropertyReader: () => ZyAppLocalizations.delegate),
      'languageCode': VmProxy(identifier: 'languageCode', externalStaticPropertyReader: () => ZyAppLocalizations.languageCode),
      'load': VmProxy(identifier: 'load', externalStaticPropertyReader: () => ZyAppLocalizations.load),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyAppLocalizations instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyAppLocalizations instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyAppLocalizations instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyAppLocalizations instance) => instance.toString),
    },
  );

  ///class ZyAppNavigatorObserver
  static final classZyAppNavigatorObserver = VmClass<ZyAppNavigatorObserver>(
    identifier: 'ZyAppNavigatorObserver',
    superclassNames: ['Object', 'NavigatorObserver'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyAppNavigatorObserver.new),
      'clearRouteStack': VmProxy(identifier: 'clearRouteStack', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.clearRouteStack),
      'didPop': VmProxy(identifier: 'didPop', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didPop),
      'didPush': VmProxy(identifier: 'didPush', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didPush),
      'didRemove': VmProxy(identifier: 'didRemove', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didRemove),
      'didReplace': VmProxy(identifier: 'didReplace', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didReplace),
      'didStartUserGesture': VmProxy(identifier: 'didStartUserGesture', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didStartUserGesture),
      'didStopUserGesture': VmProxy(identifier: 'didStopUserGesture', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.didStopUserGesture),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.hashCode),
      'navigator': VmProxy(identifier: 'navigator', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.navigator),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyAppNavigatorObserver instance) => instance.toString),
    },
  );

  ///class ZyAvator
  static final classZyAvator = VmClass<ZyAvator>(
    identifier: 'ZyAvator',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyAvator.new, externalStaticFunctionCaller: ({key, type = ZyAvatorType.small, radius, corner, rectBg, greyBg, single = true, url, urlList, errIcon, child, childColor, onFormatUrl}) => ZyAvator.new(key: key, type: type, radius: radius, corner: corner, rectBg: rectBg, greyBg: greyBg, single: single, url: url, urlList: urlList, errIcon: errIcon, child: child, childColor: childColor, onFormatUrl: (b0) => onFormatUrl(b0))),
      'defaultGreyBg': VmProxy(identifier: 'defaultGreyBg', externalStaticPropertyReader: () => ZyAvator.defaultGreyBg, externalStaticPropertyWriter: (value) => ZyAvator.defaultGreyBg = value),
      'defaultRectBg': VmProxy(identifier: 'defaultRectBg', externalStaticPropertyReader: () => ZyAvator.defaultRectBg, externalStaticPropertyWriter: (value) => ZyAvator.defaultRectBg = value),
      'hugeTypeRadius': VmProxy(identifier: 'hugeTypeRadius', externalStaticPropertyReader: () => ZyAvator.hugeTypeRadius),
      'largeTypeRadius': VmProxy(identifier: 'largeTypeRadius', externalStaticPropertyReader: () => ZyAvator.largeTypeRadius),
      'mediumTypeRadius': VmProxy(identifier: 'mediumTypeRadius', externalStaticPropertyReader: () => ZyAvator.mediumTypeRadius),
      'microTypeRadius': VmProxy(identifier: 'microTypeRadius', externalStaticPropertyReader: () => ZyAvator.microTypeRadius),
      'miniTypeRadius': VmProxy(identifier: 'miniTypeRadius', externalStaticPropertyReader: () => ZyAvator.miniTypeRadius),
      'plusTypeRadius': VmProxy(identifier: 'plusTypeRadius', externalStaticPropertyReader: () => ZyAvator.plusTypeRadius),
      'smallTypeRadius': VmProxy(identifier: 'smallTypeRadius', externalStaticPropertyReader: () => ZyAvator.smallTypeRadius),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyAvator instance) => instance.build),
      'child': VmProxy(identifier: 'child', externalInstancePropertyReader: (ZyAvator instance) => instance.child),
      'childColor': VmProxy(identifier: 'childColor', externalInstancePropertyReader: (ZyAvator instance) => instance.childColor),
      'corner': VmProxy(identifier: 'corner', externalInstancePropertyReader: (ZyAvator instance) => instance.corner),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyAvator instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyAvator instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyAvator instance) => instance.debugFillProperties),
      'errIcon': VmProxy(identifier: 'errIcon', externalInstancePropertyReader: (ZyAvator instance) => instance.errIcon),
      'greyBg': VmProxy(identifier: 'greyBg', externalInstancePropertyReader: (ZyAvator instance) => instance.greyBg),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyAvator instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyAvator instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyAvator instance) => instance.noSuchMethod),
      'onFormatUrl': VmProxy(identifier: 'onFormatUrl', externalInstancePropertyReader: (ZyAvator instance) => instance.onFormatUrl),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZyAvator instance) => instance.radius),
      'rectBg': VmProxy(identifier: 'rectBg', externalInstancePropertyReader: (ZyAvator instance) => instance.rectBg),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyAvator instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ZyAvator instance) => instance.single),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyAvator instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyAvator instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyAvator instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyAvator instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyAvator instance) => instance.toStringShort),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyAvator instance) => instance.type),
      'url': VmProxy(identifier: 'url', externalInstancePropertyReader: (ZyAvator instance) => instance.url),
      'urlList': VmProxy(identifier: 'urlList', externalInstancePropertyReader: (ZyAvator instance) => instance.urlList),
    },
  );

  ///class ZyAvatorType
  static final classZyAvatorType = VmClass<ZyAvatorType>(
    identifier: 'ZyAvatorType',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'huge': VmProxy(identifier: 'huge', externalStaticPropertyReader: () => ZyAvatorType.huge),
      'large': VmProxy(identifier: 'large', externalStaticPropertyReader: () => ZyAvatorType.large),
      'medium': VmProxy(identifier: 'medium', externalStaticPropertyReader: () => ZyAvatorType.medium),
      'micro': VmProxy(identifier: 'micro', externalStaticPropertyReader: () => ZyAvatorType.micro),
      'mini': VmProxy(identifier: 'mini', externalStaticPropertyReader: () => ZyAvatorType.mini),
      'plus': VmProxy(identifier: 'plus', externalStaticPropertyReader: () => ZyAvatorType.plus),
      'small': VmProxy(identifier: 'small', externalStaticPropertyReader: () => ZyAvatorType.small),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyAvatorType instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyAvatorType instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyAvatorType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyAvatorType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyAvatorType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyAvatorType instance) => instance.toString),
    },
  );

  ///class ZyBadge
  static final classZyBadge = VmClass<ZyBadge>(
    identifier: 'ZyBadge',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyBadge.new),
      'hugeMargin': VmProxy(identifier: 'hugeMargin', externalStaticPropertyReader: () => ZyBadge.hugeMargin),
      'largeMargin': VmProxy(identifier: 'largeMargin', externalStaticPropertyReader: () => ZyBadge.largeMargin),
      'middleMargin': VmProxy(identifier: 'middleMargin', externalStaticPropertyReader: () => ZyBadge.middleMargin),
      'smallMargin': VmProxy(identifier: 'smallMargin', externalStaticPropertyReader: () => ZyBadge.smallMargin),
      'align': VmProxy(identifier: 'align', externalInstancePropertyReader: (ZyBadge instance) => instance.align),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyBadge instance) => instance.build),
      'color': VmProxy(identifier: 'color', externalInstancePropertyReader: (ZyBadge instance) => instance.color),
      'count': VmProxy(identifier: 'count', externalInstancePropertyReader: (ZyBadge instance) => instance.count),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyBadge instance) => instance.createElement),
      'darkColor': VmProxy(identifier: 'darkColor', externalInstancePropertyReader: (ZyBadge instance) => instance.darkColor),
      'darkMode': VmProxy(identifier: 'darkMode', externalInstancePropertyReader: (ZyBadge instance) => instance.darkMode),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyBadge instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyBadge instance) => instance.debugFillProperties),
      'dotOnly': VmProxy(identifier: 'dotOnly', externalInstancePropertyReader: (ZyBadge instance) => instance.dotOnly),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyBadge instance) => instance.hashCode),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyReader: (ZyBadge instance) => instance.icon),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyBadge instance) => instance.key),
      'margin': VmProxy(identifier: 'margin', externalInstancePropertyReader: (ZyBadge instance) => instance.margin),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyBadge instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyBadge instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (ZyBadge instance) => instance.size),
      'textColor': VmProxy(identifier: 'textColor', externalInstancePropertyReader: (ZyBadge instance) => instance.textColor),
      'textSize': VmProxy(identifier: 'textSize', externalInstancePropertyReader: (ZyBadge instance) => instance.textSize),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyBadge instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyBadge instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyBadge instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyBadge instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyBadge instance) => instance.toStringShort),
      'zeroIcon': VmProxy(identifier: 'zeroIcon', externalInstancePropertyReader: (ZyBadge instance) => instance.zeroIcon),
    },
  );

  ///class ZyBadgeAlign
  static final classZyBadgeAlign = VmClass<ZyBadgeAlign>(
    identifier: 'ZyBadgeAlign',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'center': VmProxy(identifier: 'center', externalStaticPropertyReader: () => ZyBadgeAlign.center),
      'centerLeft': VmProxy(identifier: 'centerLeft', externalStaticPropertyReader: () => ZyBadgeAlign.centerLeft),
      'centerRight': VmProxy(identifier: 'centerRight', externalStaticPropertyReader: () => ZyBadgeAlign.centerRight),
      'topLeft': VmProxy(identifier: 'topLeft', externalStaticPropertyReader: () => ZyBadgeAlign.topLeft),
      'topRight': VmProxy(identifier: 'topRight', externalStaticPropertyReader: () => ZyBadgeAlign.topRight),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyBadgeAlign instance) => instance.toString),
    },
  );

  ///class ZyBlock
  static final classZyBlock = VmClass<ZyBlock>(
    identifier: 'ZyBlock',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyBlock.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => ZyBlock.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => ZyBlock.fromString),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyBlock instance) => instance.buildTarget),
      'clone': VmProxy(identifier: 'clone', externalInstancePropertyReader: (ZyBlock instance) => instance.clone),
      'fliped': VmProxy(identifier: 'fliped', externalInstancePropertyReader: (ZyBlock instance) => instance.fliped, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.fliped = value),
      'getSprite': VmProxy(identifier: 'getSprite', externalInstancePropertyReader: (ZyBlock instance) => instance.getSprite),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyBlock instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyBlock instance) => instance.noSuchMethod),
      'rectBT': VmProxy(identifier: 'rectBT', externalInstancePropertyReader: (ZyBlock instance) => instance.rectBT, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.rectBT = value),
      'rectMV': VmProxy(identifier: 'rectMV', externalInstancePropertyReader: (ZyBlock instance) => instance.rectMV, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.rectMV = value),
      'rotate': VmProxy(identifier: 'rotate', externalInstancePropertyReader: (ZyBlock instance) => instance.rotate, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.rotate = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyBlock instance) => instance.runtimeType),
      'sorter': VmProxy(identifier: 'sorter', externalInstancePropertyReader: (ZyBlock instance) => instance.sorter, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.sorter = value),
      'spId': VmProxy(identifier: 'spId', externalInstancePropertyReader: (ZyBlock instance) => instance.spId, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.spId = value),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyBlock instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyBlock instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyBlock instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyBlock instance) => instance.txId, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.txId = value),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyBlock instance) => instance.type, externalInstancePropertyWriter: (ZyBlock instance, value) => instance.type = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyBlock instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyBlock instance) => instance.updateByKValues),
    },
  );

  ///class ZyBorder
  static final classZyBorder = VmClass<ZyBorder>(
    identifier: 'ZyBorder',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyBorder.new),
      'getBorderColorBold': VmProxy(identifier: 'getBorderColorBold', externalStaticPropertyReader: () => ZyBorder.getBorderColorBold),
      'getBorderColorThin': VmProxy(identifier: 'getBorderColorThin', externalStaticPropertyReader: () => ZyBorder.getBorderColorThin),
      'getBorderSizeBold': VmProxy(identifier: 'getBorderSizeBold', externalStaticPropertyReader: () => ZyBorder.getBorderSizeBold),
      'getBorderSizeThin': VmProxy(identifier: 'getBorderSizeThin', externalStaticPropertyReader: () => ZyBorder.getBorderSizeThin),
      'getOutlineInputBorderBold': VmProxy(identifier: 'getOutlineInputBorderBold', externalStaticPropertyReader: () => ZyBorder.getOutlineInputBorderBold),
      'getOutlineInputBorderThin': VmProxy(identifier: 'getOutlineInputBorderThin', externalStaticPropertyReader: () => ZyBorder.getOutlineInputBorderThin),
      'getRoundedRectangleBorderBold': VmProxy(identifier: 'getRoundedRectangleBorderBold', externalStaticPropertyReader: () => ZyBorder.getRoundedRectangleBorderBold),
      'getRoundedRectangleBorderThin': VmProxy(identifier: 'getRoundedRectangleBorderThin', externalStaticPropertyReader: () => ZyBorder.getRoundedRectangleBorderThin),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyBorder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyBorder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyBorder instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyBorder instance) => instance.toString),
    },
  );

  ///class ZyButton
  static final classZyButton = VmClass<ZyButton>(
    identifier: 'ZyButton',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyButton.new),
      'defaultSize': VmProxy(identifier: 'defaultSize', externalStaticPropertyReader: () => ZyButton.defaultSize),
      'inFormHeight': VmProxy(identifier: 'inFormHeight', externalStaticPropertyReader: () => ZyButton.inFormHeight),
      'border': VmProxy(identifier: 'border', externalInstancePropertyReader: (ZyButton instance) => instance.border),
      'borderAlign': VmProxy(identifier: 'borderAlign', externalInstancePropertyReader: (ZyButton instance) => instance.borderAlign),
      'borderColor': VmProxy(identifier: 'borderColor', externalInstancePropertyReader: (ZyButton instance) => instance.borderColor),
      'borderSize': VmProxy(identifier: 'borderSize', externalInstancePropertyReader: (ZyButton instance) => instance.borderSize),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyButton instance) => instance.build),
      'child': VmProxy(identifier: 'child', externalInstancePropertyReader: (ZyButton instance) => instance.child),
      'clipBehavior': VmProxy(identifier: 'clipBehavior', externalInstancePropertyReader: (ZyButton instance) => instance.clipBehavior),
      'color': VmProxy(identifier: 'color', externalInstancePropertyReader: (ZyButton instance) => instance.color),
      'colorBrightness': VmProxy(identifier: 'colorBrightness', externalInstancePropertyReader: (ZyButton instance) => instance.colorBrightness),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyButton instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyButton instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyButton instance) => instance.debugFillProperties),
      'disableColor': VmProxy(identifier: 'disableColor', externalInstancePropertyReader: (ZyButton instance) => instance.disableColor),
      'disableTextColor': VmProxy(identifier: 'disableTextColor', externalInstancePropertyReader: (ZyButton instance) => instance.disableTextColor),
      'elevation': VmProxy(identifier: 'elevation', externalInstancePropertyReader: (ZyButton instance) => instance.elevation),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyButton instance) => instance.hashCode),
      'height': VmProxy(identifier: 'height', externalInstancePropertyReader: (ZyButton instance) => instance.height),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyButton instance) => instance.key),
      'minWidth': VmProxy(identifier: 'minWidth', externalInstancePropertyReader: (ZyButton instance) => instance.minWidth),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyButton instance) => instance.noSuchMethod),
      'onLongPressed': VmProxy(identifier: 'onLongPressed', externalInstancePropertyReader: (ZyButton instance) => instance.onLongPressed),
      'onPressed': VmProxy(identifier: 'onPressed', externalInstancePropertyReader: (ZyButton instance) => instance.onPressed),
      'padding': VmProxy(identifier: 'padding', externalInstancePropertyReader: (ZyButton instance) => instance.padding),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZyButton instance) => instance.radius),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyButton instance) => instance.runtimeType),
      'shape': VmProxy(identifier: 'shape', externalInstancePropertyReader: (ZyButton instance) => instance.shape),
      'subChild': VmProxy(identifier: 'subChild', externalInstancePropertyReader: (ZyButton instance) => instance.subChild),
      'subHorizontal': VmProxy(identifier: 'subHorizontal', externalInstancePropertyReader: (ZyButton instance) => instance.subHorizontal),
      'subSpace': VmProxy(identifier: 'subSpace', externalInstancePropertyReader: (ZyButton instance) => instance.subSpace),
      'textColor': VmProxy(identifier: 'textColor', externalInstancePropertyReader: (ZyButton instance) => instance.textColor),
      'textTheme': VmProxy(identifier: 'textTheme', externalInstancePropertyReader: (ZyButton instance) => instance.textTheme),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyButton instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyButton instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyButton instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyButton instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyButton instance) => instance.toStringShort),
    },
  );

  ///class ZyCoord
  static final classZyCoord = VmClass<ZyCoord>(
    identifier: 'ZyCoord',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyCoord.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => ZyCoord.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => ZyCoord.fromString),
      '\$position': VmProxy(identifier: '\$position', externalInstancePropertyReader: (ZyCoord instance) => instance.$position),
      '\$rcKey': VmProxy(identifier: '\$rcKey', externalInstancePropertyReader: (ZyCoord instance) => instance.$rcKey),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyCoord instance) => instance.buildTarget),
      'clone': VmProxy(identifier: 'clone', externalInstancePropertyReader: (ZyCoord instance) => instance.clone),
      'col': VmProxy(identifier: 'col', externalInstancePropertyReader: (ZyCoord instance) => instance.col, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.col = value),
      'dir': VmProxy(identifier: 'dir', externalInstancePropertyReader: (ZyCoord instance) => instance.dir, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.dir = value),
      'dist': VmProxy(identifier: 'dist', externalInstancePropertyReader: (ZyCoord instance) => instance.dist, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.dist = value),
      'dx': VmProxy(identifier: 'dx', externalInstancePropertyReader: (ZyCoord instance) => instance.dx, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.dx = value),
      'dy': VmProxy(identifier: 'dy', externalInstancePropertyReader: (ZyCoord instance) => instance.dy, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.dy = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyCoord instance) => instance.hashCode),
      'nextList': VmProxy(identifier: 'nextList', externalInstancePropertyReader: (ZyCoord instance) => instance.nextList),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyCoord instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (ZyCoord instance) => instance.rid, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.rid = value),
      'row': VmProxy(identifier: 'row', externalInstancePropertyReader: (ZyCoord instance) => instance.row, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.row = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyCoord instance) => instance.runtimeType),
      'sid': VmProxy(identifier: 'sid', externalInstancePropertyReader: (ZyCoord instance) => instance.sid, externalInstancePropertyWriter: (ZyCoord instance, value) => instance.sid = value),
      'syncDist': VmProxy(identifier: 'syncDist', externalInstancePropertyReader: (ZyCoord instance) => instance.syncDist),
      'syncDxDy': VmProxy(identifier: 'syncDxDy', externalInstancePropertyReader: (ZyCoord instance) => instance.syncDxDy),
      'syncRowCol': VmProxy(identifier: 'syncRowCol', externalInstancePropertyReader: (ZyCoord instance) => instance.syncRowCol),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyCoord instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyCoord instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyCoord instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyCoord instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyCoord instance) => instance.updateByKValues),
    },
  );

  ///class ZyDeviceDetail
  static final classZyDeviceDetail = VmClass<ZyDeviceDetail>(
    identifier: 'ZyDeviceDetail',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDeviceDetail.new),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.data),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.noSuchMethod),
      'originData': VmProxy(identifier: 'originData', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.originData),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDeviceDetail instance) => instance.toString),
    },
  );

  ///class ZyDeviceInfo
  static final classZyDeviceInfo = VmClass<ZyDeviceInfo>(
    identifier: 'ZyDeviceInfo',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDeviceInfo.new),
      'applicationDocumentsDirectory': VmProxy(identifier: 'applicationDocumentsDirectory', externalStaticPropertyReader: () => ZyDeviceInfo.applicationDocumentsDirectory),
      'applicationSupportDirectory': VmProxy(identifier: 'applicationSupportDirectory', externalStaticPropertyReader: () => ZyDeviceInfo.applicationSupportDirectory),
      'deviceDetail': VmProxy(identifier: 'deviceDetail', externalStaticPropertyReader: () => ZyDeviceInfo.deviceDetail),
      'deviceId': VmProxy(identifier: 'deviceId', externalStaticPropertyReader: () => ZyDeviceInfo.deviceId),
      'deviceNetAgent': VmProxy(identifier: 'deviceNetAgent', externalStaticPropertyReader: () => ZyDeviceInfo.deviceNetAgent),
      'devicePackge': VmProxy(identifier: 'devicePackge', externalStaticPropertyReader: () => ZyDeviceInfo.devicePackge),
      'deviceType': VmProxy(identifier: 'deviceType', externalStaticPropertyReader: () => ZyDeviceInfo.deviceType),
      'init': VmProxy(identifier: 'init', externalStaticPropertyReader: () => ZyDeviceInfo.init),
      'isAndroid': VmProxy(identifier: 'isAndroid', externalStaticPropertyReader: () => ZyDeviceInfo.isAndroid),
      'isAppleDevice': VmProxy(identifier: 'isAppleDevice', externalStaticPropertyReader: () => ZyDeviceInfo.isAppleDevice),
      'isDesktopDevice': VmProxy(identifier: 'isDesktopDevice', externalStaticPropertyReader: () => ZyDeviceInfo.isDesktopDevice),
      'isFuchsia': VmProxy(identifier: 'isFuchsia', externalStaticPropertyReader: () => ZyDeviceInfo.isFuchsia),
      'isIOS': VmProxy(identifier: 'isIOS', externalStaticPropertyReader: () => ZyDeviceInfo.isIOS),
      'isLinux': VmProxy(identifier: 'isLinux', externalStaticPropertyReader: () => ZyDeviceInfo.isLinux),
      'isMacOS': VmProxy(identifier: 'isMacOS', externalStaticPropertyReader: () => ZyDeviceInfo.isMacOS),
      'isMobileDevice': VmProxy(identifier: 'isMobileDevice', externalStaticPropertyReader: () => ZyDeviceInfo.isMobileDevice),
      'isOthers': VmProxy(identifier: 'isOthers', externalStaticPropertyReader: () => ZyDeviceInfo.isOthers),
      'isPhysicalDevice': VmProxy(identifier: 'isPhysicalDevice', externalStaticPropertyReader: () => ZyDeviceInfo.isPhysicalDevice),
      'isWeb': VmProxy(identifier: 'isWeb', externalStaticPropertyReader: () => ZyDeviceInfo.isWeb),
      'isWindows': VmProxy(identifier: 'isWindows', externalStaticPropertyReader: () => ZyDeviceInfo.isWindows),
      'temporaryDirectory': VmProxy(identifier: 'temporaryDirectory', externalStaticPropertyReader: () => ZyDeviceInfo.temporaryDirectory),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDeviceInfo instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDeviceInfo instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDeviceInfo instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDeviceInfo instance) => instance.toString),
    },
  );

  ///class ZyDevicePackge
  static final classZyDevicePackge = VmClass<ZyDevicePackge>(
    identifier: 'ZyDevicePackge',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDevicePackge.new),
      'appName': VmProxy(identifier: 'appName', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.appName),
      'buildNumber': VmProxy(identifier: 'buildNumber', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.buildNumber),
      'buildSignature': VmProxy(identifier: 'buildSignature', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.buildSignature),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.data),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.hashCode),
      'installerStore': VmProxy(identifier: 'installerStore', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.installerStore),
      'intBuildNumber': VmProxy(identifier: 'intBuildNumber', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.intBuildNumber),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.noSuchMethod),
      'packageName': VmProxy(identifier: 'packageName', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.packageName),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.toString),
      'version': VmProxy(identifier: 'version', externalInstancePropertyReader: (ZyDevicePackge instance) => instance.version),
    },
  );

  ///class ZyDeviceType
  static final classZyDeviceType = VmClass<ZyDeviceType>(
    identifier: 'ZyDeviceType',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'android': VmProxy(identifier: 'android', externalStaticPropertyReader: () => ZyDeviceType.android),
      'fuchsia': VmProxy(identifier: 'fuchsia', externalStaticPropertyReader: () => ZyDeviceType.fuchsia),
      'ios': VmProxy(identifier: 'ios', externalStaticPropertyReader: () => ZyDeviceType.ios),
      'linux': VmProxy(identifier: 'linux', externalStaticPropertyReader: () => ZyDeviceType.linux),
      'macos': VmProxy(identifier: 'macos', externalStaticPropertyReader: () => ZyDeviceType.macos),
      'others': VmProxy(identifier: 'others', externalStaticPropertyReader: () => ZyDeviceType.others),
      'web': VmProxy(identifier: 'web', externalStaticPropertyReader: () => ZyDeviceType.web),
      'windows': VmProxy(identifier: 'windows', externalStaticPropertyReader: () => ZyDeviceType.windows),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDeviceType instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyDeviceType instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyDeviceType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDeviceType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDeviceType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDeviceType instance) => instance.toString),
    },
  );

  ///class ZyDialog
  static final classZyDialog = VmClass<ZyDialog>(
    identifier: 'ZyDialog',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDialog.new),
      'body': VmProxy(identifier: 'body', externalInstancePropertyReader: (ZyDialog instance) => instance.body),
      'bodyWidget': VmProxy(identifier: 'bodyWidget', externalInstancePropertyReader: (ZyDialog instance) => instance.bodyWidget),
      'btnHeight': VmProxy(identifier: 'btnHeight', externalInstancePropertyReader: (ZyDialog instance) => instance.btnHeight),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyDialog instance) => instance.build),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyDialog instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyDialog instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyDialog instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDialog instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyDialog instance) => instance.key),
      'leftColor': VmProxy(identifier: 'leftColor', externalInstancePropertyReader: (ZyDialog instance) => instance.leftColor),
      'leftText': VmProxy(identifier: 'leftText', externalInstancePropertyReader: (ZyDialog instance) => instance.leftText),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDialog instance) => instance.noSuchMethod),
      'padding': VmProxy(identifier: 'padding', externalInstancePropertyReader: (ZyDialog instance) => instance.padding),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZyDialog instance) => instance.radius),
      'rightColor': VmProxy(identifier: 'rightColor', externalInstancePropertyReader: (ZyDialog instance) => instance.rightColor),
      'rightOnly': VmProxy(identifier: 'rightOnly', externalInstancePropertyReader: (ZyDialog instance) => instance.rightOnly),
      'rightText': VmProxy(identifier: 'rightText', externalInstancePropertyReader: (ZyDialog instance) => instance.rightText),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDialog instance) => instance.runtimeType),
      'scrollable': VmProxy(identifier: 'scrollable', externalInstancePropertyReader: (ZyDialog instance) => instance.scrollable),
      'title': VmProxy(identifier: 'title', externalInstancePropertyReader: (ZyDialog instance) => instance.title),
      'titleWidget': VmProxy(identifier: 'titleWidget', externalInstancePropertyReader: (ZyDialog instance) => instance.titleWidget),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyDialog instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDialog instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyDialog instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyDialog instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyDialog instance) => instance.toStringShort),
    },
  );

  ///class ZyDivider
  static final classZyDivider = VmClass<ZyDivider>(
    identifier: 'ZyDivider',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDivider.new),
      'forFull': VmProxy(identifier: 'forFull', externalStaticPropertyReader: () => ZyDivider.forFull),
      'forListTileLeadingAvatorLarge': VmProxy(identifier: 'forListTileLeadingAvatorLarge', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingAvatorLarge),
      'forListTileLeadingAvatorMedium': VmProxy(identifier: 'forListTileLeadingAvatorMedium', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingAvatorMedium),
      'forListTileLeadingAvatorMini': VmProxy(identifier: 'forListTileLeadingAvatorMini', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingAvatorMini),
      'forListTileLeadingAvatorSmall': VmProxy(identifier: 'forListTileLeadingAvatorSmall', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingAvatorSmall),
      'forListTileLeadingIcon': VmProxy(identifier: 'forListTileLeadingIcon', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingIcon),
      'forListTileLeadingNone': VmProxy(identifier: 'forListTileLeadingNone', externalStaticPropertyReader: () => ZyDivider.forListTileLeadingNone),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDivider instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDivider instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDivider instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDivider instance) => instance.toString),
    },
  );

  ///class ZyDraw
  static final classZyDraw = VmClass<ZyDraw>(
    identifier: 'ZyDraw',
    superclassNames: ['Object', 'Listenable', 'CustomPainter', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDraw.new),
      'addListener': VmProxy(identifier: 'addListener', externalInstancePropertyReader: (ZyDraw instance) => instance.addListener),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyDraw instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyDraw instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDraw instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyDraw instance) => instance.hasSuperProperty),
      'hitTest': VmProxy(identifier: 'hitTest', externalInstancePropertyReader: (ZyDraw instance) => instance.hitTest),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyDraw instance) => instance.isInitedByVmware),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDraw instance) => instance.noSuchMethod),
      'paint': VmProxy(identifier: 'paint', externalInstancePropertyReader: (ZyDraw instance) => instance.paint),
      'removeListener': VmProxy(identifier: 'removeListener', externalInstancePropertyReader: (ZyDraw instance) => instance.removeListener),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDraw instance) => instance.runtimeType),
      'semanticsBuilder': VmProxy(identifier: 'semanticsBuilder', externalInstancePropertyReader: (ZyDraw instance) => instance.semanticsBuilder),
      'shouldRebuildSemantics': VmProxy(identifier: 'shouldRebuildSemantics', externalInstancePropertyReader: (ZyDraw instance) => instance.shouldRebuildSemantics),
      'shouldRepaint': VmProxy(identifier: 'shouldRepaint', externalInstancePropertyReader: (ZyDraw instance) => instance.shouldRepaint),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyDraw instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyDraw instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDraw instance) => instance.toString),
    },
  );

  ///class ZyDrawBox
  static final classZyDrawBox = VmClass<ZyDrawBox>(
    identifier: 'ZyDrawBox',
    superclassNames: ['Object', 'BoxPainter', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDrawBox.new),
      'dispose': VmProxy(identifier: 'dispose', externalInstancePropertyReader: (ZyDrawBox instance) => instance.dispose),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyDrawBox instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyDrawBox instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDrawBox instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyDrawBox instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyDrawBox instance) => instance.isInitedByVmware),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDrawBox instance) => instance.noSuchMethod),
      'onChanged': VmProxy(identifier: 'onChanged', externalInstancePropertyReader: (ZyDrawBox instance) => instance.onChanged),
      'paint': VmProxy(identifier: 'paint', externalInstancePropertyReader: (ZyDrawBox instance) => instance.paint),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDrawBox instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyDrawBox instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyDrawBox instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDrawBox instance) => instance.toString),
    },
  );

  ///class ZyDrawDecoration
  static final classZyDrawDecoration = VmClass<ZyDrawDecoration>(
    identifier: 'ZyDrawDecoration',
    superclassNames: ['Object', 'Diagnosticable', 'Decoration', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyDrawDecoration.new),
      'createBoxPainter': VmProxy(identifier: 'createBoxPainter', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.createBoxPainter),
      'createDrawBox': VmProxy(identifier: 'createDrawBox', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.createDrawBox),
      'debugAssertIsValid': VmProxy(identifier: 'debugAssertIsValid', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.debugAssertIsValid),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.debugFillProperties),
      'getClipPath': VmProxy(identifier: 'getClipPath', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.getClipPath),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.hasSuperProperty),
      'hitTest': VmProxy(identifier: 'hitTest', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.hitTest),
      'isComplex': VmProxy(identifier: 'isComplex', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.isComplex),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.isInitedByVmware),
      'lerpFrom': VmProxy(identifier: 'lerpFrom', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.lerpFrom),
      'lerpTo': VmProxy(identifier: 'lerpTo', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.lerpTo),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.noSuchMethod),
      'padding': VmProxy(identifier: 'padding', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.padding),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.thisNativeValue),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.toDiagnosticsNode),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.toString),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyDrawDecoration instance) => instance.toStringShort),
    },
  );

  ///class ZyEditor
  static final classZyEditor = VmClass<ZyEditor>(
    identifier: 'ZyEditor',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyEditor.new, externalStaticFunctionCaller: ({key, deltaJson, controller, boxRadius, boxDirection = VerticalDirection.down, barColor, barPadding, barDivider, bodyScrollable = false, bodyPadding, bodyAutoFocus = false, bodyReadOnly = false, bodyExpands = false, bodyShowCursor, bodyPlaceholder, bodyScrollPhysics, axis = Axis.horizontal, toolbarIconSize = 18.0, toolbarSectionSpacing = 4.0, toolbarIconAlignment = WrapAlignment.center, toolbarIconCrossAlignment = WrapCrossAlignment.center, multiRowsDisplay = true, showDividers = true, showFontFamily = true, showFontSize = true, showBoldButton = true, showItalicButton = true, showSmallButton = true, showUnderLineButton = true, showStrikeThrough = true, showInlineCode = true, showColorButton = true, showBackgroundColorButton = true, showClearFormat = true, showAlignmentButtons = true, showLeftAlignment = true, showCenterAlignment = true, showRightAlignment = true, showJustifyAlignment = true, showHeaderStyle = true, showListNumbers = true, showListBullets = true, showListCheck = true, showCodeBlock = true, showQuote = true, showIndent = true, showLink = true, showUndo = true, showRedo = true, showDirection = true, showSearchButton = true, showSubscript = true, showSuperscript = true, imageButtonEnable = false, imageButtonTooltip, onImageFormatUrl, onImagePickCallback}) => ZyEditor.new(key: key, deltaJson: deltaJson, controller: controller, boxRadius: boxRadius, boxDirection: boxDirection, barColor: barColor, barPadding: barPadding, barDivider: barDivider, bodyScrollable: bodyScrollable, bodyPadding: bodyPadding, bodyAutoFocus: bodyAutoFocus, bodyReadOnly: bodyReadOnly, bodyExpands: bodyExpands, bodyShowCursor: bodyShowCursor, bodyPlaceholder: bodyPlaceholder, bodyScrollPhysics: bodyScrollPhysics, axis: axis, toolbarIconSize: toolbarIconSize, toolbarSectionSpacing: toolbarSectionSpacing, toolbarIconAlignment: toolbarIconAlignment, toolbarIconCrossAlignment: toolbarIconCrossAlignment, multiRowsDisplay: multiRowsDisplay, showDividers: showDividers, showFontFamily: showFontFamily, showFontSize: showFontSize, showBoldButton: showBoldButton, showItalicButton: showItalicButton, showSmallButton: showSmallButton, showUnderLineButton: showUnderLineButton, showStrikeThrough: showStrikeThrough, showInlineCode: showInlineCode, showColorButton: showColorButton, showBackgroundColorButton: showBackgroundColorButton, showClearFormat: showClearFormat, showAlignmentButtons: showAlignmentButtons, showLeftAlignment: showLeftAlignment, showCenterAlignment: showCenterAlignment, showRightAlignment: showRightAlignment, showJustifyAlignment: showJustifyAlignment, showHeaderStyle: showHeaderStyle, showListNumbers: showListNumbers, showListBullets: showListBullets, showListCheck: showListCheck, showCodeBlock: showCodeBlock, showQuote: showQuote, showIndent: showIndent, showLink: showLink, showUndo: showUndo, showRedo: showRedo, showDirection: showDirection, showSearchButton: showSearchButton, showSubscript: showSubscript, showSuperscript: showSuperscript, imageButtonEnable: imageButtonEnable, imageButtonTooltip: imageButtonTooltip, onImageFormatUrl: onImageFormatUrl == null ? null : (b0) => onImageFormatUrl(b0), onImagePickCallback: onImagePickCallback == null ? null : (b0) => onImagePickCallback(b0))),
      'axis': VmProxy(identifier: 'axis', externalInstancePropertyReader: (ZyEditor instance) => instance.axis),
      'barColor': VmProxy(identifier: 'barColor', externalInstancePropertyReader: (ZyEditor instance) => instance.barColor),
      'barDivider': VmProxy(identifier: 'barDivider', externalInstancePropertyReader: (ZyEditor instance) => instance.barDivider),
      'barPadding': VmProxy(identifier: 'barPadding', externalInstancePropertyReader: (ZyEditor instance) => instance.barPadding),
      'bodyAutoFocus': VmProxy(identifier: 'bodyAutoFocus', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyAutoFocus),
      'bodyExpands': VmProxy(identifier: 'bodyExpands', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyExpands),
      'bodyPadding': VmProxy(identifier: 'bodyPadding', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyPadding),
      'bodyPlaceholder': VmProxy(identifier: 'bodyPlaceholder', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyPlaceholder),
      'bodyReadOnly': VmProxy(identifier: 'bodyReadOnly', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyReadOnly),
      'bodyScrollable': VmProxy(identifier: 'bodyScrollable', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyScrollable),
      'bodyScrollPhysics': VmProxy(identifier: 'bodyScrollPhysics', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyScrollPhysics),
      'bodyShowCursor': VmProxy(identifier: 'bodyShowCursor', externalInstancePropertyReader: (ZyEditor instance) => instance.bodyShowCursor),
      'boxDirection': VmProxy(identifier: 'boxDirection', externalInstancePropertyReader: (ZyEditor instance) => instance.boxDirection),
      'boxRadius': VmProxy(identifier: 'boxRadius', externalInstancePropertyReader: (ZyEditor instance) => instance.boxRadius),
      'controller': VmProxy(identifier: 'controller', externalInstancePropertyReader: (ZyEditor instance) => instance.controller),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyEditor instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyEditor instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyEditor instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyEditor instance) => instance.debugFillProperties),
      'deltaJson': VmProxy(identifier: 'deltaJson', externalInstancePropertyReader: (ZyEditor instance) => instance.deltaJson),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyEditor instance) => instance.hashCode),
      'imageButtonEnable': VmProxy(identifier: 'imageButtonEnable', externalInstancePropertyReader: (ZyEditor instance) => instance.imageButtonEnable),
      'imageButtonTooltip': VmProxy(identifier: 'imageButtonTooltip', externalInstancePropertyReader: (ZyEditor instance) => instance.imageButtonTooltip),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyEditor instance) => instance.key),
      'multiRowsDisplay': VmProxy(identifier: 'multiRowsDisplay', externalInstancePropertyReader: (ZyEditor instance) => instance.multiRowsDisplay),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyEditor instance) => instance.noSuchMethod),
      'onImageFormatUrl': VmProxy(identifier: 'onImageFormatUrl', externalInstancePropertyReader: (ZyEditor instance) => instance.onImageFormatUrl),
      'onImagePickCallback': VmProxy(identifier: 'onImagePickCallback', externalInstancePropertyReader: (ZyEditor instance) => instance.onImagePickCallback),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyEditor instance) => instance.runtimeType),
      'showAlignmentButtons': VmProxy(identifier: 'showAlignmentButtons', externalInstancePropertyReader: (ZyEditor instance) => instance.showAlignmentButtons),
      'showBackgroundColorButton': VmProxy(identifier: 'showBackgroundColorButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showBackgroundColorButton),
      'showBoldButton': VmProxy(identifier: 'showBoldButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showBoldButton),
      'showCenterAlignment': VmProxy(identifier: 'showCenterAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.showCenterAlignment),
      'showClearFormat': VmProxy(identifier: 'showClearFormat', externalInstancePropertyReader: (ZyEditor instance) => instance.showClearFormat),
      'showCodeBlock': VmProxy(identifier: 'showCodeBlock', externalInstancePropertyReader: (ZyEditor instance) => instance.showCodeBlock),
      'showColorButton': VmProxy(identifier: 'showColorButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showColorButton),
      'showDirection': VmProxy(identifier: 'showDirection', externalInstancePropertyReader: (ZyEditor instance) => instance.showDirection),
      'showDividers': VmProxy(identifier: 'showDividers', externalInstancePropertyReader: (ZyEditor instance) => instance.showDividers),
      'showFontFamily': VmProxy(identifier: 'showFontFamily', externalInstancePropertyReader: (ZyEditor instance) => instance.showFontFamily),
      'showFontSize': VmProxy(identifier: 'showFontSize', externalInstancePropertyReader: (ZyEditor instance) => instance.showFontSize),
      'showHeaderStyle': VmProxy(identifier: 'showHeaderStyle', externalInstancePropertyReader: (ZyEditor instance) => instance.showHeaderStyle),
      'showIndent': VmProxy(identifier: 'showIndent', externalInstancePropertyReader: (ZyEditor instance) => instance.showIndent),
      'showInlineCode': VmProxy(identifier: 'showInlineCode', externalInstancePropertyReader: (ZyEditor instance) => instance.showInlineCode),
      'showItalicButton': VmProxy(identifier: 'showItalicButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showItalicButton),
      'showJustifyAlignment': VmProxy(identifier: 'showJustifyAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.showJustifyAlignment),
      'showLeftAlignment': VmProxy(identifier: 'showLeftAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.showLeftAlignment),
      'showLink': VmProxy(identifier: 'showLink', externalInstancePropertyReader: (ZyEditor instance) => instance.showLink),
      'showListBullets': VmProxy(identifier: 'showListBullets', externalInstancePropertyReader: (ZyEditor instance) => instance.showListBullets),
      'showListCheck': VmProxy(identifier: 'showListCheck', externalInstancePropertyReader: (ZyEditor instance) => instance.showListCheck),
      'showListNumbers': VmProxy(identifier: 'showListNumbers', externalInstancePropertyReader: (ZyEditor instance) => instance.showListNumbers),
      'showQuote': VmProxy(identifier: 'showQuote', externalInstancePropertyReader: (ZyEditor instance) => instance.showQuote),
      'showRedo': VmProxy(identifier: 'showRedo', externalInstancePropertyReader: (ZyEditor instance) => instance.showRedo),
      'showRightAlignment': VmProxy(identifier: 'showRightAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.showRightAlignment),
      'showSearchButton': VmProxy(identifier: 'showSearchButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showSearchButton),
      'showSmallButton': VmProxy(identifier: 'showSmallButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showSmallButton),
      'showStrikeThrough': VmProxy(identifier: 'showStrikeThrough', externalInstancePropertyReader: (ZyEditor instance) => instance.showStrikeThrough),
      'showSubscript': VmProxy(identifier: 'showSubscript', externalInstancePropertyReader: (ZyEditor instance) => instance.showSubscript),
      'showSuperscript': VmProxy(identifier: 'showSuperscript', externalInstancePropertyReader: (ZyEditor instance) => instance.showSuperscript),
      'showUnderLineButton': VmProxy(identifier: 'showUnderLineButton', externalInstancePropertyReader: (ZyEditor instance) => instance.showUnderLineButton),
      'showUndo': VmProxy(identifier: 'showUndo', externalInstancePropertyReader: (ZyEditor instance) => instance.showUndo),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyEditor instance) => instance.toDiagnosticsNode),
      'toolbarIconAlignment': VmProxy(identifier: 'toolbarIconAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.toolbarIconAlignment),
      'toolbarIconCrossAlignment': VmProxy(identifier: 'toolbarIconCrossAlignment', externalInstancePropertyReader: (ZyEditor instance) => instance.toolbarIconCrossAlignment),
      'toolbarIconSize': VmProxy(identifier: 'toolbarIconSize', externalInstancePropertyReader: (ZyEditor instance) => instance.toolbarIconSize),
      'toolbarSectionSpacing': VmProxy(identifier: 'toolbarSectionSpacing', externalInstancePropertyReader: (ZyEditor instance) => instance.toolbarSectionSpacing),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyEditor instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyEditor instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyEditor instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyEditor instance) => instance.toStringShort),
    },
  );

  ///class ZyEditorController
  static final classZyEditorController = VmClass<ZyEditorController>(
    identifier: 'ZyEditorController',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyEditorController.new),
      'dispose': VmProxy(identifier: 'dispose', externalInstancePropertyReader: (ZyEditorController instance) => instance.dispose),
      'getDeltaJson': VmProxy(identifier: 'getDeltaJson', externalInstancePropertyReader: (ZyEditorController instance) => instance.getDeltaJson),
      'getImagePaths': VmProxy(identifier: 'getImagePaths', externalInstancePropertyReader: (ZyEditorController instance) => instance.getImagePaths),
      'getPreviewText': VmProxy(identifier: 'getPreviewText', externalInstancePropertyReader: (ZyEditorController instance) => instance.getPreviewText),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyEditorController instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyEditorController instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyEditorController instance) => instance.runtimeType),
      'setDeltaJson': VmProxy(identifier: 'setDeltaJson', externalInstancePropertyReader: (ZyEditorController instance) => instance.setDeltaJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyEditorController instance) => instance.toString),
    },
  );

  ///class ZyEmojis
  static final classZyEmojis = VmClass<ZyEmojis>(
    identifier: 'ZyEmojis',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyEmojis.new, externalStaticFunctionCaller: ({key, pageColor, gridColumn = 7, gridPaddingV = 8.0, gridItemStyle = const TextStyle(fontSize: 26), typeBarHeight = 58.0, typeBarColor, typeItemFontSize = 26.0, typeNormalColor, typeActiveColor, dividerColor, onEmojiSelected, onBackspaceTap}) => ZyEmojis.new(key: key, pageColor: pageColor, gridColumn: gridColumn, gridPaddingV: gridPaddingV, gridItemStyle: gridItemStyle, typeBarHeight: typeBarHeight, typeBarColor: typeBarColor, typeItemFontSize: typeItemFontSize, typeNormalColor: typeNormalColor, typeActiveColor: typeActiveColor, dividerColor: dividerColor, onEmojiSelected: onEmojiSelected == null ? null : (b0) => onEmojiSelected(b0), onBackspaceTap: onBackspaceTap)),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyEmojis instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyEmojis instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyEmojis instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyEmojis instance) => instance.debugFillProperties),
      'dividerColor': VmProxy(identifier: 'dividerColor', externalInstancePropertyReader: (ZyEmojis instance) => instance.dividerColor),
      'gridColumn': VmProxy(identifier: 'gridColumn', externalInstancePropertyReader: (ZyEmojis instance) => instance.gridColumn),
      'gridItemStyle': VmProxy(identifier: 'gridItemStyle', externalInstancePropertyReader: (ZyEmojis instance) => instance.gridItemStyle),
      'gridPaddingV': VmProxy(identifier: 'gridPaddingV', externalInstancePropertyReader: (ZyEmojis instance) => instance.gridPaddingV),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyEmojis instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyEmojis instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyEmojis instance) => instance.noSuchMethod),
      'onBackspaceTap': VmProxy(identifier: 'onBackspaceTap', externalInstancePropertyReader: (ZyEmojis instance) => instance.onBackspaceTap),
      'onEmojiSelected': VmProxy(identifier: 'onEmojiSelected', externalInstancePropertyReader: (ZyEmojis instance) => instance.onEmojiSelected),
      'pageColor': VmProxy(identifier: 'pageColor', externalInstancePropertyReader: (ZyEmojis instance) => instance.pageColor),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyEmojis instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyEmojis instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyEmojis instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyEmojis instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyEmojis instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyEmojis instance) => instance.toStringShort),
      'typeActiveColor': VmProxy(identifier: 'typeActiveColor', externalInstancePropertyReader: (ZyEmojis instance) => instance.typeActiveColor),
      'typeBarColor': VmProxy(identifier: 'typeBarColor', externalInstancePropertyReader: (ZyEmojis instance) => instance.typeBarColor),
      'typeBarHeight': VmProxy(identifier: 'typeBarHeight', externalInstancePropertyReader: (ZyEmojis instance) => instance.typeBarHeight),
      'typeItemFontSize': VmProxy(identifier: 'typeItemFontSize', externalInstancePropertyReader: (ZyEmojis instance) => instance.typeItemFontSize),
      'typeNormalColor': VmProxy(identifier: 'typeNormalColor', externalInstancePropertyReader: (ZyEmojis instance) => instance.typeNormalColor),
    },
  );

  ///class ZyFlexBox
  static final classZyFlexBox = VmClass<ZyFlexBox>(
    identifier: 'ZyFlexBox',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyFlexBox.new, externalStaticFunctionCaller: ({key, itemCount = 0, itemBuilder, direction = Axis.horizontal, mainAxisAlignment = MainAxisAlignment.start, mainAxisSize = MainAxisSize.max, crossAxisAlignment = CrossAxisAlignment.stretch, textDirection, verticalDirection = VerticalDirection.down, textBaseline, clipBehavior = Clip.none}) => ZyFlexBox.new(key: key, itemCount: itemCount, itemBuilder: (b0, b1) => itemBuilder(b0, b1), direction: direction, mainAxisAlignment: mainAxisAlignment, mainAxisSize: mainAxisSize, crossAxisAlignment: crossAxisAlignment, textDirection: textDirection, verticalDirection: verticalDirection, textBaseline: textBaseline, clipBehavior: clipBehavior)),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyFlexBox instance) => instance.build),
      'clipBehavior': VmProxy(identifier: 'clipBehavior', externalInstancePropertyReader: (ZyFlexBox instance) => instance.clipBehavior),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyFlexBox instance) => instance.createElement),
      'crossAxisAlignment': VmProxy(identifier: 'crossAxisAlignment', externalInstancePropertyReader: (ZyFlexBox instance) => instance.crossAxisAlignment),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyFlexBox instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyFlexBox instance) => instance.debugFillProperties),
      'direction': VmProxy(identifier: 'direction', externalInstancePropertyReader: (ZyFlexBox instance) => instance.direction),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyFlexBox instance) => instance.hashCode),
      'itemBuilder': VmProxy(identifier: 'itemBuilder', externalInstancePropertyReader: (ZyFlexBox instance) => instance.itemBuilder),
      'itemCount': VmProxy(identifier: 'itemCount', externalInstancePropertyReader: (ZyFlexBox instance) => instance.itemCount),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyFlexBox instance) => instance.key),
      'mainAxisAlignment': VmProxy(identifier: 'mainAxisAlignment', externalInstancePropertyReader: (ZyFlexBox instance) => instance.mainAxisAlignment),
      'mainAxisSize': VmProxy(identifier: 'mainAxisSize', externalInstancePropertyReader: (ZyFlexBox instance) => instance.mainAxisSize),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyFlexBox instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyFlexBox instance) => instance.runtimeType),
      'textBaseline': VmProxy(identifier: 'textBaseline', externalInstancePropertyReader: (ZyFlexBox instance) => instance.textBaseline),
      'textDirection': VmProxy(identifier: 'textDirection', externalInstancePropertyReader: (ZyFlexBox instance) => instance.textDirection),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyFlexBox instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyFlexBox instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyFlexBox instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyFlexBox instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyFlexBox instance) => instance.toStringShort),
      'verticalDirection': VmProxy(identifier: 'verticalDirection', externalInstancePropertyReader: (ZyFlexBox instance) => instance.verticalDirection),
    },
  );

  ///class ZyFreeBox
  static final classZyFreeBox = VmClass<ZyFreeBox>(
    identifier: 'ZyFreeBox',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyFreeBox.new, externalStaticFunctionCaller: ({key, itemCount = 0, itemBuilder, alignment = AlignmentDirectional.topStart, textDirection, fit = StackFit.loose, clipBehavior = Clip.hardEdge}) => ZyFreeBox.new(key: key, itemCount: itemCount, itemBuilder: (b0, b1) => itemBuilder(b0, b1), alignment: alignment, textDirection: textDirection, fit: fit, clipBehavior: clipBehavior)),
      'alignment': VmProxy(identifier: 'alignment', externalInstancePropertyReader: (ZyFreeBox instance) => instance.alignment),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyFreeBox instance) => instance.build),
      'clipBehavior': VmProxy(identifier: 'clipBehavior', externalInstancePropertyReader: (ZyFreeBox instance) => instance.clipBehavior),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyFreeBox instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyFreeBox instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyFreeBox instance) => instance.debugFillProperties),
      'fit': VmProxy(identifier: 'fit', externalInstancePropertyReader: (ZyFreeBox instance) => instance.fit),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyFreeBox instance) => instance.hashCode),
      'itemBuilder': VmProxy(identifier: 'itemBuilder', externalInstancePropertyReader: (ZyFreeBox instance) => instance.itemBuilder),
      'itemCount': VmProxy(identifier: 'itemCount', externalInstancePropertyReader: (ZyFreeBox instance) => instance.itemCount),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyFreeBox instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyFreeBox instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyFreeBox instance) => instance.runtimeType),
      'textDirection': VmProxy(identifier: 'textDirection', externalInstancePropertyReader: (ZyFreeBox instance) => instance.textDirection),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyFreeBox instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyFreeBox instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyFreeBox instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyFreeBox instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyFreeBox instance) => instance.toStringShort),
    },
  );

  ///class ZyImage
  static final classZyImage = VmClass<ZyImage>(
    identifier: 'ZyImage',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyImage.new, externalStaticFunctionCaller: ({key, url = '', data, bytes, onFormatUrl, fit = BoxFit.cover, blankBoxSize = 58.0, errorWidget, loadingWidget}) => ZyImage.new(key: key, url: url, data: data, bytes: bytes, onFormatUrl: (b0) => onFormatUrl(b0), fit: fit, blankBoxSize: blankBoxSize, errorWidget: errorWidget, loadingWidget: loadingWidget)),
      'blankBoxSize': VmProxy(identifier: 'blankBoxSize', externalInstancePropertyReader: (ZyImage instance) => instance.blankBoxSize),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyImage instance) => instance.build),
      'bytes': VmProxy(identifier: 'bytes', externalInstancePropertyReader: (ZyImage instance) => instance.bytes),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyImage instance) => instance.createElement),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (ZyImage instance) => instance.data),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyImage instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyImage instance) => instance.debugFillProperties),
      'errorWidget': VmProxy(identifier: 'errorWidget', externalInstancePropertyReader: (ZyImage instance) => instance.errorWidget),
      'fit': VmProxy(identifier: 'fit', externalInstancePropertyReader: (ZyImage instance) => instance.fit),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyImage instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyImage instance) => instance.key),
      'loadingWidget': VmProxy(identifier: 'loadingWidget', externalInstancePropertyReader: (ZyImage instance) => instance.loadingWidget),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyImage instance) => instance.noSuchMethod),
      'onFormatUrl': VmProxy(identifier: 'onFormatUrl', externalInstancePropertyReader: (ZyImage instance) => instance.onFormatUrl),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyImage instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyImage instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyImage instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyImage instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyImage instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyImage instance) => instance.toStringShort),
      'url': VmProxy(identifier: 'url', externalInstancePropertyReader: (ZyImage instance) => instance.url),
    },
  );

  ///class ZyLetters
  static final classZyLetters = VmClass<ZyLetters>(
    identifier: 'ZyLetters',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyLetters.new, externalStaticFunctionCaller: ({key, letters, sliderWidth = 30.0, sliderColor = Colors.transparent, bubbleWidth = ZyLetters.bubbleDefaultWidth, bubbleHeight = ZyLetters.bubbleDefaultHeight, bubbleRadius = ZyLetters.bubbleDefaultRadius, bubbleTextSize = 38.0, bubbleTextColor = Colors.white, bubbleTailOffsetX = -10.0, onDrag}) => ZyLetters.new(key: key, letters: letters, sliderWidth: sliderWidth, sliderColor: sliderColor, bubbleWidth: bubbleWidth, bubbleHeight: bubbleHeight, bubbleRadius: bubbleRadius, bubbleTextSize: bubbleTextSize, bubbleTextColor: bubbleTextColor, bubbleTailOffsetX: bubbleTailOffsetX, onDrag: (b0) => onDrag(b0))),
      'bubbleDefaultHeight': VmProxy(identifier: 'bubbleDefaultHeight', externalStaticPropertyReader: () => ZyLetters.bubbleDefaultHeight),
      'bubbleDefaultRadius': VmProxy(identifier: 'bubbleDefaultRadius', externalStaticPropertyReader: () => ZyLetters.bubbleDefaultRadius),
      'bubbleDefaultWidth': VmProxy(identifier: 'bubbleDefaultWidth', externalStaticPropertyReader: () => ZyLetters.bubbleDefaultWidth),
      'bubbleHeight': VmProxy(identifier: 'bubbleHeight', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleHeight),
      'bubbleRadius': VmProxy(identifier: 'bubbleRadius', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleRadius),
      'bubbleTailOffsetX': VmProxy(identifier: 'bubbleTailOffsetX', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleTailOffsetX),
      'bubbleTextColor': VmProxy(identifier: 'bubbleTextColor', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleTextColor),
      'bubbleTextSize': VmProxy(identifier: 'bubbleTextSize', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleTextSize),
      'bubbleWidth': VmProxy(identifier: 'bubbleWidth', externalInstancePropertyReader: (ZyLetters instance) => instance.bubbleWidth),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyLetters instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyLetters instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyLetters instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyLetters instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyLetters instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyLetters instance) => instance.key),
      'letters': VmProxy(identifier: 'letters', externalInstancePropertyReader: (ZyLetters instance) => instance.letters),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyLetters instance) => instance.noSuchMethod),
      'onDrag': VmProxy(identifier: 'onDrag', externalInstancePropertyReader: (ZyLetters instance) => instance.onDrag),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyLetters instance) => instance.runtimeType),
      'sliderColor': VmProxy(identifier: 'sliderColor', externalInstancePropertyReader: (ZyLetters instance) => instance.sliderColor),
      'sliderWidth': VmProxy(identifier: 'sliderWidth', externalInstancePropertyReader: (ZyLetters instance) => instance.sliderWidth),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyLetters instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyLetters instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyLetters instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyLetters instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyLetters instance) => instance.toStringShort),
    },
  );

  ///class ZyListTile
  static final classZyListTile = VmClass<ZyListTile>(
    identifier: 'ZyListTile',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyListTile.new),
      'defaultMultiline': VmProxy(identifier: 'defaultMultiline', externalStaticPropertyReader: () => ZyListTile.defaultMultiline, externalStaticPropertyWriter: (value) => ZyListTile.defaultMultiline = value),
      'border': VmProxy(identifier: 'border', externalInstancePropertyReader: (ZyListTile instance) => instance.border),
      'borderColor': VmProxy(identifier: 'borderColor', externalInstancePropertyReader: (ZyListTile instance) => instance.borderColor),
      'borderSize': VmProxy(identifier: 'borderSize', externalInstancePropertyReader: (ZyListTile instance) => instance.borderSize),
      'bottomChildren': VmProxy(identifier: 'bottomChildren', externalInstancePropertyReader: (ZyListTile instance) => instance.bottomChildren),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyListTile instance) => instance.build),
      'childC': VmProxy(identifier: 'childC', externalInstancePropertyReader: (ZyListTile instance) => instance.childC),
      'childL': VmProxy(identifier: 'childL', externalInstancePropertyReader: (ZyListTile instance) => instance.childL),
      'childR': VmProxy(identifier: 'childR', externalInstancePropertyReader: (ZyListTile instance) => instance.childR),
      'contentPadding': VmProxy(identifier: 'contentPadding', externalInstancePropertyReader: (ZyListTile instance) => instance.contentPadding),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyListTile instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyListTile instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyListTile instance) => instance.debugFillProperties),
      'hasChild': VmProxy(identifier: 'hasChild', externalInstancePropertyReader: (ZyListTile instance) => instance.hasChild),
      'hasChildFix': VmProxy(identifier: 'hasChildFix', externalInstancePropertyReader: (ZyListTile instance) => instance.hasChildFix),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyListTile instance) => instance.hashCode),
      'hasSubChild': VmProxy(identifier: 'hasSubChild', externalInstancePropertyReader: (ZyListTile instance) => instance.hasSubChild),
      'horizontalGap': VmProxy(identifier: 'horizontalGap', externalInstancePropertyReader: (ZyListTile instance) => instance.horizontalGap),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyListTile instance) => instance.key),
      'leading': VmProxy(identifier: 'leading', externalInstancePropertyReader: (ZyListTile instance) => instance.leading),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyListTile instance) => instance.noSuchMethod),
      'onLongPressed': VmProxy(identifier: 'onLongPressed', externalInstancePropertyReader: (ZyListTile instance) => instance.onLongPressed),
      'onPressed': VmProxy(identifier: 'onPressed', externalInstancePropertyReader: (ZyListTile instance) => instance.onPressed),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZyListTile instance) => instance.radius),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyListTile instance) => instance.runtimeType),
      'shape': VmProxy(identifier: 'shape', externalInstancePropertyReader: (ZyListTile instance) => instance.shape),
      'subChildC': VmProxy(identifier: 'subChildC', externalInstancePropertyReader: (ZyListTile instance) => instance.subChildC),
      'subChildL': VmProxy(identifier: 'subChildL', externalInstancePropertyReader: (ZyListTile instance) => instance.subChildL),
      'subChildR': VmProxy(identifier: 'subChildR', externalInstancePropertyReader: (ZyListTile instance) => instance.subChildR),
      'subTitleC': VmProxy(identifier: 'subTitleC', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleC),
      'subTitleL': VmProxy(identifier: 'subTitleL', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleL),
      'subTitleMultiline': VmProxy(identifier: 'subTitleMultiline', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleMultiline),
      'subTitleR': VmProxy(identifier: 'subTitleR', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleR),
      'subTitleStyleC': VmProxy(identifier: 'subTitleStyleC', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleStyleC),
      'subTitleStyleL': VmProxy(identifier: 'subTitleStyleL', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleStyleL),
      'subTitleStyleR': VmProxy(identifier: 'subTitleStyleR', externalInstancePropertyReader: (ZyListTile instance) => instance.subTitleStyleR),
      'threeChildren': VmProxy(identifier: 'threeChildren', externalInstancePropertyReader: (ZyListTile instance) => instance.threeChildren),
      'tileColor': VmProxy(identifier: 'tileColor', externalInstancePropertyReader: (ZyListTile instance) => instance.tileColor),
      'titleC': VmProxy(identifier: 'titleC', externalInstancePropertyReader: (ZyListTile instance) => instance.titleC),
      'titleL': VmProxy(identifier: 'titleL', externalInstancePropertyReader: (ZyListTile instance) => instance.titleL),
      'titleMultiline': VmProxy(identifier: 'titleMultiline', externalInstancePropertyReader: (ZyListTile instance) => instance.titleMultiline),
      'titleR': VmProxy(identifier: 'titleR', externalInstancePropertyReader: (ZyListTile instance) => instance.titleR),
      'titleStyleC': VmProxy(identifier: 'titleStyleC', externalInstancePropertyReader: (ZyListTile instance) => instance.titleStyleC),
      'titleStyleL': VmProxy(identifier: 'titleStyleL', externalInstancePropertyReader: (ZyListTile instance) => instance.titleStyleL),
      'titleStyleR': VmProxy(identifier: 'titleStyleR', externalInstancePropertyReader: (ZyListTile instance) => instance.titleStyleR),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyListTile instance) => instance.toDiagnosticsNode),
      'topChildren': VmProxy(identifier: 'topChildren', externalInstancePropertyReader: (ZyListTile instance) => instance.topChildren),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyListTile instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyListTile instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyListTile instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyListTile instance) => instance.toStringShort),
      'trailing': VmProxy(identifier: 'trailing', externalInstancePropertyReader: (ZyListTile instance) => instance.trailing),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyListTile instance) => instance.type),
      'verticalGap': VmProxy(identifier: 'verticalGap', externalInstancePropertyReader: (ZyListTile instance) => instance.verticalGap),
    },
  );

  ///class ZyListTileType
  static final classZyListTileType = VmClass<ZyListTileType>(
    identifier: 'ZyListTileType',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'around': VmProxy(identifier: 'around', externalStaticPropertyReader: () => ZyListTileType.around),
      'aroundArrow': VmProxy(identifier: 'aroundArrow', externalStaticPropertyReader: () => ZyListTileType.aroundArrow),
      'aroundSmall': VmProxy(identifier: 'aroundSmall', externalStaticPropertyReader: () => ZyListTileType.aroundSmall),
      'denseMedium': VmProxy(identifier: 'denseMedium', externalStaticPropertyReader: () => ZyListTileType.denseMedium),
      'denseMediumArrow': VmProxy(identifier: 'denseMediumArrow', externalStaticPropertyReader: () => ZyListTileType.denseMediumArrow),
      'denseSmall': VmProxy(identifier: 'denseSmall', externalStaticPropertyReader: () => ZyListTileType.denseSmall),
      'denseSmallArrow': VmProxy(identifier: 'denseSmallArrow', externalStaticPropertyReader: () => ZyListTileType.denseSmallArrow),
      'microSwitch': VmProxy(identifier: 'microSwitch', externalStaticPropertyReader: () => ZyListTileType.microSwitch),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyListTileType instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyListTileType instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyListTileType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyListTileType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyListTileType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyListTileType instance) => instance.toString),
    },
  );

  ///class ZyLoading
  static final classZyLoading = VmClass<ZyLoading>(
    identifier: 'ZyLoading',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyLoading.new),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyLoading instance) => instance.build),
      'content': VmProxy(identifier: 'content', externalInstancePropertyReader: (ZyLoading instance) => instance.content),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyLoading instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyLoading instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyLoading instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyLoading instance) => instance.hashCode),
      'iconSize': VmProxy(identifier: 'iconSize', externalInstancePropertyReader: (ZyLoading instance) => instance.iconSize),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyLoading instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyLoading instance) => instance.noSuchMethod),
      'padding': VmProxy(identifier: 'padding', externalInstancePropertyReader: (ZyLoading instance) => instance.padding),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZyLoading instance) => instance.radius),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyLoading instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyLoading instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyLoading instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyLoading instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyLoading instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyLoading instance) => instance.toStringShort),
    },
  );

  ///class ZyMerger
  static final classZyMerger = VmClass<ZyMerger>(
    identifier: 'ZyMerger',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyMerger.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ZyMerger instance) => instance.add),
      'blendMode': VmProxy(identifier: 'blendMode', externalInstancePropertyReader: (ZyMerger instance) => instance.blendMode),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (ZyMerger instance) => instance.clear),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyMerger instance) => instance.hashCode),
      'isAntiAlias': VmProxy(identifier: 'isAntiAlias', externalInstancePropertyReader: (ZyMerger instance) => instance.isAntiAlias),
      'merge': VmProxy(identifier: 'merge', externalInstancePropertyReader: (ZyMerger instance) => instance.merge),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyMerger instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyMerger instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyMerger instance) => instance.toString),
    },
  );

  ///class ZyModel
  static final classZyModel = VmClass<ZyModel>(
    identifier: 'ZyModel',
    superclassNames: ['Object', 'DbBaseModel', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyModel.new),
      'toBaseType': VmProxy(identifier: 'toBaseType', externalStaticPropertyReader: () => ZyModel.toBaseType),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyModel instance) => instance.buildTarget),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyModel instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyModel instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyModel instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyModel instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyModel instance) => instance.isInitedByVmware),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyModel instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyModel instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyModel instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyModel instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyModel instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyModel instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyModel instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyModel instance) => instance.updateByKValues),
    },
  );

  ///class ZyMovie
  static final classZyMovie = VmClass<ZyMovie>(
    identifier: 'ZyMovie',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyMovie.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => ZyMovie.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => ZyMovie.fromString),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyMovie instance) => instance.buildTarget),
      'dirD': VmProxy(identifier: 'dirD', externalInstancePropertyReader: (ZyMovie instance) => instance.dirD, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.dirD = value),
      'dirL': VmProxy(identifier: 'dirL', externalInstancePropertyReader: (ZyMovie instance) => instance.dirL, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.dirL = value),
      'dirR': VmProxy(identifier: 'dirR', externalInstancePropertyReader: (ZyMovie instance) => instance.dirR, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.dirR = value),
      'dirU': VmProxy(identifier: 'dirU', externalInstancePropertyReader: (ZyMovie instance) => instance.dirU, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.dirU = value),
      'getSpriteBattle': VmProxy(identifier: 'getSpriteBattle', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteBattle),
      'getSpriteDirD': VmProxy(identifier: 'getSpriteDirD', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteDirD),
      'getSpriteDirL': VmProxy(identifier: 'getSpriteDirL', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteDirL),
      'getSpriteDirR': VmProxy(identifier: 'getSpriteDirR', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteDirR),
      'getSpriteDirU': VmProxy(identifier: 'getSpriteDirU', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteDirU),
      'getSpriteMain': VmProxy(identifier: 'getSpriteMain', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteMain),
      'getSpriteVice': VmProxy(identifier: 'getSpriteVice', externalInstancePropertyReader: (ZyMovie instance) => instance.getSpriteVice),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyMovie instance) => instance.hashCode),
      'main': VmProxy(identifier: 'main', externalInstancePropertyReader: (ZyMovie instance) => instance.main, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.main = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyMovie instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyMovie instance) => instance.runtimeType),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyMovie instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyMovie instance) => instance.toKValues),
      'tone': VmProxy(identifier: 'tone', externalInstancePropertyReader: (ZyMovie instance) => instance.tone, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.tone = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyMovie instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyMovie instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyMovie instance) => instance.updateByKValues),
      'vice': VmProxy(identifier: 'vice', externalInstancePropertyReader: (ZyMovie instance) => instance.vice, externalInstancePropertyWriter: (ZyMovie instance, value) => instance.vice = value),
    },
  );

  ///class ZyPage
  static final classZyPage = VmClass<ZyPage>(
    identifier: 'ZyPage',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyPage.new),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyPage instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyPage instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyPage instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyPage instance) => instance.debugFillProperties),
      'defaultRouteName': VmProxy(identifier: 'defaultRouteName', externalInstancePropertyReader: (ZyPage instance) => instance.defaultRouteName),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyPage instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyPage instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyPage instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyPage instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyPage instance) => instance.isInitedByVmware),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyPage instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyPage instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyPage instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyPage instance) => instance.thisNativeValue),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyPage instance) => instance.toDiagnosticsNode),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyPage instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyPage instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyPage instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyPage instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyPage instance) => instance.toStringShort),
      'watchControllers': VmProxy(identifier: 'watchControllers', externalInstancePropertyReader: (ZyPage instance) => instance.watchControllers),
      'watchControllersLogLabels': VmProxy(identifier: 'watchControllersLogLabels', externalInstancePropertyReader: (ZyPage instance) => instance.watchControllersLogLabels),
      'widgetLogLabel': VmProxy(identifier: 'widgetLogLabel', externalInstancePropertyReader: (ZyPage instance) => instance.widgetLogLabel),
      'widgetName': VmProxy(identifier: 'widgetName', externalInstancePropertyReader: (ZyPage instance) => instance.widgetName),
    },
  );

  ///class ZyPageState
  static final classZyPageState = VmClass<ZyPageState>(
    identifier: 'ZyPageState',
    superclassNames: ['Object', 'Diagnosticable', 'State', 'ZyWatchTarget', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyPageState.new),
      'activate': VmProxy(identifier: 'activate', externalInstancePropertyReader: (ZyPageState instance) => instance.activate),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyPageState instance) => instance.build),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ZyPageState instance) => instance.close),
      'context': VmProxy(identifier: 'context', externalInstancePropertyReader: (ZyPageState instance) => instance.context),
      'deactivate': VmProxy(identifier: 'deactivate', externalInstancePropertyReader: (ZyPageState instance) => instance.deactivate),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyPageState instance) => instance.debugFillProperties),
      'didChangeDependencies': VmProxy(identifier: 'didChangeDependencies', externalInstancePropertyReader: (ZyPageState instance) => instance.didChangeDependencies),
      'didUpdateWidget': VmProxy(identifier: 'didUpdateWidget', externalInstancePropertyReader: (ZyPageState instance) => instance.didUpdateWidget),
      'dispose': VmProxy(identifier: 'dispose', externalInstancePropertyReader: (ZyPageState instance) => instance.dispose),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyPageState instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyPageState instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyPageState instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyPageState instance) => instance.hasSuperProperty),
      'initState': VmProxy(identifier: 'initState', externalInstancePropertyReader: (ZyPageState instance) => instance.initState),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyPageState instance) => instance.isInitedByVmware),
      'mounted': VmProxy(identifier: 'mounted', externalInstancePropertyReader: (ZyPageState instance) => instance.mounted),
      'nextFocus': VmProxy(identifier: 'nextFocus', externalInstancePropertyReader: (ZyPageState instance) => instance.nextFocus),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyPageState instance) => instance.noSuchMethod),
      'onPacket': VmProxy(identifier: 'onPacket', externalInstancePropertyReader: (ZyPageState instance) => instance.onPacket),
      'reassemble': VmProxy(identifier: 'reassemble', externalInstancePropertyReader: (ZyPageState instance) => instance.reassemble),
      'refresh': VmProxy(identifier: 'refresh', externalInstancePropertyReader: (ZyPageState instance) => instance.refresh),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZyPageState instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyPageState instance) => instance.runtimeType),
      'setState': VmProxy(identifier: 'setState', externalInstancePropertyReader: (ZyPageState instance) => instance.setState),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (ZyPageState instance) => instance.start),
      'stateLogLabel': VmProxy(identifier: 'stateLogLabel', externalInstancePropertyReader: (ZyPageState instance) => instance.stateLogLabel),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyPageState instance) => instance.thisNativeValue),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyPageState instance) => instance.toDiagnosticsNode),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyPageState instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyPageState instance) => instance.toString),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyPageState instance) => instance.toStringShort),
      'unfocus': VmProxy(identifier: 'unfocus', externalInstancePropertyReader: (ZyPageState instance) => instance.unfocus),
      'widget': VmProxy(identifier: 'widget', externalInstancePropertyReader: (ZyPageState instance) => instance.widget),
    },
  );

  ///class ZyPicture
  static final classZyPicture = VmClass<ZyPicture>(
    identifier: 'ZyPicture',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyPicture.new, externalStaticFunctionCaller: ({key, type, urlList, heroList, initialPage, onFormatUrl, blankBoxSize = 58.0, errorWidget, loadingWidget, editTitle, editBytes, cropOnly = false, cropAspectRatio = 1.0, jpgQuality = 70, pngLevel = 6, gifFactor = 10, outputResize = true, outputResizeWidth = 1280, outputResizeHeight = 1280, graffitiMaskColor = const Color(0x382196F3), graffitiLineColor = Colors.red, graffitiThickness = 3.0, bottomToolBarHeight = 58.0, bottomToolBarPadding = EdgeInsets.zero}) => ZyPicture.new(key: key, type: type, urlList: urlList, heroList: heroList, initialPage: initialPage, onFormatUrl: onFormatUrl == null ? null : (b0) => onFormatUrl(b0), blankBoxSize: blankBoxSize, errorWidget: errorWidget, loadingWidget: loadingWidget, editTitle: editTitle, editBytes: editBytes, cropOnly: cropOnly, cropAspectRatio: cropAspectRatio, jpgQuality: jpgQuality, pngLevel: pngLevel, gifFactor: gifFactor, outputResize: outputResize, outputResizeWidth: outputResizeWidth, outputResizeHeight: outputResizeHeight, graffitiMaskColor: graffitiMaskColor, graffitiLineColor: graffitiLineColor, graffitiThickness: graffitiThickness, bottomToolBarHeight: bottomToolBarHeight, bottomToolBarPadding: bottomToolBarPadding)),
      'encodePictureBytes': VmProxy(identifier: 'encodePictureBytes', externalStaticPropertyReader: () => ZyPicture.encodePictureBytes),
      'mediaTypeGif': VmProxy(identifier: 'mediaTypeGif', externalStaticPropertyReader: () => ZyPicture.mediaTypeGif),
      'mediaTypeJpg': VmProxy(identifier: 'mediaTypeJpg', externalStaticPropertyReader: () => ZyPicture.mediaTypeJpg),
      'mediaTypePng': VmProxy(identifier: 'mediaTypePng', externalStaticPropertyReader: () => ZyPicture.mediaTypePng),
      'pickFromCamera': VmProxy(identifier: 'pickFromCamera', externalStaticPropertyReader: () => ZyPicture.pickFromCamera),
      'pickFromGallery': VmProxy(identifier: 'pickFromGallery', externalStaticPropertyReader: () => ZyPicture.pickFromGallery),
      'blankBoxSize': VmProxy(identifier: 'blankBoxSize', externalInstancePropertyReader: (ZyPicture instance) => instance.blankBoxSize),
      'bottomToolBarHeight': VmProxy(identifier: 'bottomToolBarHeight', externalInstancePropertyReader: (ZyPicture instance) => instance.bottomToolBarHeight),
      'bottomToolBarPadding': VmProxy(identifier: 'bottomToolBarPadding', externalInstancePropertyReader: (ZyPicture instance) => instance.bottomToolBarPadding),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyPicture instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyPicture instance) => instance.createState),
      'cropAspectRatio': VmProxy(identifier: 'cropAspectRatio', externalInstancePropertyReader: (ZyPicture instance) => instance.cropAspectRatio),
      'cropOnly': VmProxy(identifier: 'cropOnly', externalInstancePropertyReader: (ZyPicture instance) => instance.cropOnly),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyPicture instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyPicture instance) => instance.debugFillProperties),
      'editBytes': VmProxy(identifier: 'editBytes', externalInstancePropertyReader: (ZyPicture instance) => instance.editBytes),
      'editTitle': VmProxy(identifier: 'editTitle', externalInstancePropertyReader: (ZyPicture instance) => instance.editTitle),
      'errorWidget': VmProxy(identifier: 'errorWidget', externalInstancePropertyReader: (ZyPicture instance) => instance.errorWidget),
      'gifFactor': VmProxy(identifier: 'gifFactor', externalInstancePropertyReader: (ZyPicture instance) => instance.gifFactor),
      'graffitiLineColor': VmProxy(identifier: 'graffitiLineColor', externalInstancePropertyReader: (ZyPicture instance) => instance.graffitiLineColor),
      'graffitiMaskColor': VmProxy(identifier: 'graffitiMaskColor', externalInstancePropertyReader: (ZyPicture instance) => instance.graffitiMaskColor),
      'graffitiThickness': VmProxy(identifier: 'graffitiThickness', externalInstancePropertyReader: (ZyPicture instance) => instance.graffitiThickness),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyPicture instance) => instance.hashCode),
      'heroList': VmProxy(identifier: 'heroList', externalInstancePropertyReader: (ZyPicture instance) => instance.heroList),
      'initialPage': VmProxy(identifier: 'initialPage', externalInstancePropertyReader: (ZyPicture instance) => instance.initialPage),
      'jpgQuality': VmProxy(identifier: 'jpgQuality', externalInstancePropertyReader: (ZyPicture instance) => instance.jpgQuality),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyPicture instance) => instance.key),
      'loadingWidget': VmProxy(identifier: 'loadingWidget', externalInstancePropertyReader: (ZyPicture instance) => instance.loadingWidget),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyPicture instance) => instance.noSuchMethod),
      'onFormatUrl': VmProxy(identifier: 'onFormatUrl', externalInstancePropertyReader: (ZyPicture instance) => instance.onFormatUrl),
      'outputResize': VmProxy(identifier: 'outputResize', externalInstancePropertyReader: (ZyPicture instance) => instance.outputResize),
      'outputResizeHeight': VmProxy(identifier: 'outputResizeHeight', externalInstancePropertyReader: (ZyPicture instance) => instance.outputResizeHeight),
      'outputResizeWidth': VmProxy(identifier: 'outputResizeWidth', externalInstancePropertyReader: (ZyPicture instance) => instance.outputResizeWidth),
      'pngLevel': VmProxy(identifier: 'pngLevel', externalInstancePropertyReader: (ZyPicture instance) => instance.pngLevel),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyPicture instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyPicture instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyPicture instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyPicture instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyPicture instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyPicture instance) => instance.toStringShort),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyPicture instance) => instance.type),
      'urlList': VmProxy(identifier: 'urlList', externalInstancePropertyReader: (ZyPicture instance) => instance.urlList),
    },
  );

  ///class ZyPictureType
  static final classZyPictureType = VmClass<ZyPictureType>(
    identifier: 'ZyPictureType',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'editAsGif': VmProxy(identifier: 'editAsGif', externalStaticPropertyReader: () => ZyPictureType.editAsGif),
      'editAsJpg': VmProxy(identifier: 'editAsJpg', externalStaticPropertyReader: () => ZyPictureType.editAsJpg),
      'editAsPng': VmProxy(identifier: 'editAsPng', externalStaticPropertyReader: () => ZyPictureType.editAsPng),
      'viewer': VmProxy(identifier: 'viewer', externalStaticPropertyReader: () => ZyPictureType.viewer),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyPictureType instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyPictureType instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyPictureType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyPictureType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyPictureType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyPictureType instance) => instance.toString),
    },
  );

  ///class ZyQrcode
  static final classZyQrcode = VmClass<ZyQrcode>(
    identifier: 'ZyQrcode',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyQrcode.new),
      'boxOffsetB': VmProxy(identifier: 'boxOffsetB', externalInstancePropertyReader: (ZyQrcode instance) => instance.boxOffsetB),
      'boxPadding': VmProxy(identifier: 'boxPadding', externalInstancePropertyReader: (ZyQrcode instance) => instance.boxPadding),
      'boxRadius': VmProxy(identifier: 'boxRadius', externalInstancePropertyReader: (ZyQrcode instance) => instance.boxRadius),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyQrcode instance) => instance.build),
      'codeElementColor': VmProxy(identifier: 'codeElementColor', externalInstancePropertyReader: (ZyQrcode instance) => instance.codeElementColor),
      'codeErrorCorrectLevel': VmProxy(identifier: 'codeErrorCorrectLevel', externalInstancePropertyReader: (ZyQrcode instance) => instance.codeErrorCorrectLevel),
      'codeRoundEdges': VmProxy(identifier: 'codeRoundEdges', externalInstancePropertyReader: (ZyQrcode instance) => instance.codeRoundEdges),
      'codeTypeNumber': VmProxy(identifier: 'codeTypeNumber', externalInstancePropertyReader: (ZyQrcode instance) => instance.codeTypeNumber),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyQrcode instance) => instance.createElement),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (ZyQrcode instance) => instance.data),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyQrcode instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyQrcode instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyQrcode instance) => instance.hashCode),
      'hint': VmProxy(identifier: 'hint', externalInstancePropertyReader: (ZyQrcode instance) => instance.hint),
      'icon': VmProxy(identifier: 'icon', externalInstancePropertyReader: (ZyQrcode instance) => instance.icon),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyQrcode instance) => instance.key),
      'logo': VmProxy(identifier: 'logo', externalInstancePropertyReader: (ZyQrcode instance) => instance.logo),
      'nick': VmProxy(identifier: 'nick', externalInstancePropertyReader: (ZyQrcode instance) => instance.nick),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyQrcode instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyQrcode instance) => instance.runtimeType),
      'title': VmProxy(identifier: 'title', externalInstancePropertyReader: (ZyQrcode instance) => instance.title),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyQrcode instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyQrcode instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyQrcode instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyQrcode instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyQrcode instance) => instance.toStringShort),
    },
  );

  ///class ZyQrscan
  static final classZyQrscan = VmClass<ZyQrscan>(
    identifier: 'ZyQrscan',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyQrscan.new, externalStaticFunctionCaller: ({key, overlayColor = const Color.fromRGBO(0, 0, 0, 80), borderColor = Colors.red, borderWidth = 3.0, borderRadius = 0.0, borderLength = 40.0, cutOutSize, cutOutWidth, cutOutHeight, cutOutBottomOffset = 0.0, buttonIconSize = 32.0, buttonIconColor = Colors.white, buttonBoxOffsetB = 0.7, unsupportMessage = 'The platform not support code scanning!', autoCloseOnFinished = true, onResultCallback}) => ZyQrscan.new(key: key, overlayColor: overlayColor, borderColor: borderColor, borderWidth: borderWidth, borderRadius: borderRadius, borderLength: borderLength, cutOutSize: cutOutSize, cutOutWidth: cutOutWidth, cutOutHeight: cutOutHeight, cutOutBottomOffset: cutOutBottomOffset, buttonIconSize: buttonIconSize, buttonIconColor: buttonIconColor, buttonBoxOffsetB: buttonBoxOffsetB, unsupportMessage: unsupportMessage, autoCloseOnFinished: autoCloseOnFinished, onResultCallback: (b0, b1) => onResultCallback(b0, b1))),
      'autoCloseOnFinished': VmProxy(identifier: 'autoCloseOnFinished', externalInstancePropertyReader: (ZyQrscan instance) => instance.autoCloseOnFinished),
      'borderColor': VmProxy(identifier: 'borderColor', externalInstancePropertyReader: (ZyQrscan instance) => instance.borderColor),
      'borderLength': VmProxy(identifier: 'borderLength', externalInstancePropertyReader: (ZyQrscan instance) => instance.borderLength),
      'borderRadius': VmProxy(identifier: 'borderRadius', externalInstancePropertyReader: (ZyQrscan instance) => instance.borderRadius),
      'borderWidth': VmProxy(identifier: 'borderWidth', externalInstancePropertyReader: (ZyQrscan instance) => instance.borderWidth),
      'buttonBoxOffsetB': VmProxy(identifier: 'buttonBoxOffsetB', externalInstancePropertyReader: (ZyQrscan instance) => instance.buttonBoxOffsetB),
      'buttonIconColor': VmProxy(identifier: 'buttonIconColor', externalInstancePropertyReader: (ZyQrscan instance) => instance.buttonIconColor),
      'buttonIconSize': VmProxy(identifier: 'buttonIconSize', externalInstancePropertyReader: (ZyQrscan instance) => instance.buttonIconSize),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyQrscan instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyQrscan instance) => instance.createState),
      'cutOutBottomOffset': VmProxy(identifier: 'cutOutBottomOffset', externalInstancePropertyReader: (ZyQrscan instance) => instance.cutOutBottomOffset),
      'cutOutHeight': VmProxy(identifier: 'cutOutHeight', externalInstancePropertyReader: (ZyQrscan instance) => instance.cutOutHeight),
      'cutOutSize': VmProxy(identifier: 'cutOutSize', externalInstancePropertyReader: (ZyQrscan instance) => instance.cutOutSize),
      'cutOutWidth': VmProxy(identifier: 'cutOutWidth', externalInstancePropertyReader: (ZyQrscan instance) => instance.cutOutWidth),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyQrscan instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyQrscan instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyQrscan instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyQrscan instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyQrscan instance) => instance.noSuchMethod),
      'onResultCallback': VmProxy(identifier: 'onResultCallback', externalInstancePropertyReader: (ZyQrscan instance) => instance.onResultCallback),
      'overlayColor': VmProxy(identifier: 'overlayColor', externalInstancePropertyReader: (ZyQrscan instance) => instance.overlayColor),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyQrscan instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyQrscan instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyQrscan instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyQrscan instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyQrscan instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyQrscan instance) => instance.toStringShort),
      'unsupportMessage': VmProxy(identifier: 'unsupportMessage', externalInstancePropertyReader: (ZyQrscan instance) => instance.unsupportMessage),
    },
  );

  ///class ZyRecord
  static final classZyRecord = VmClass<ZyRecord>(
    identifier: 'ZyRecord',
    superclassNames: ['Object', 'DbBaseModel', 'VmSuper', 'ZyModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyRecord.new),
      '\$desc': VmProxy(identifier: '\$desc', externalInstancePropertyReader: (ZyRecord instance) => instance.$desc),
      '\$displayDesc': VmProxy(identifier: '\$displayDesc', externalInstancePropertyReader: (ZyRecord instance) => instance.$displayDesc),
      '\$displayName': VmProxy(identifier: '\$displayName', externalInstancePropertyReader: (ZyRecord instance) => instance.$displayName),
      '\$id': VmProxy(identifier: '\$id', externalInstancePropertyReader: (ZyRecord instance) => instance.$id),
      '\$movie': VmProxy(identifier: '\$movie', externalInstancePropertyReader: (ZyRecord instance) => instance.$movie),
      '\$name': VmProxy(identifier: '\$name', externalInstancePropertyReader: (ZyRecord instance) => instance.$name),
      '\$type': VmProxy(identifier: '\$type', externalInstancePropertyReader: (ZyRecord instance) => instance.$type),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyRecord instance) => instance.buildTarget),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyRecord instance) => instance.getProperty),
      'getSprite': VmProxy(identifier: 'getSprite', externalInstancePropertyReader: (ZyRecord instance) => instance.getSprite),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyRecord instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyRecord instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyRecord instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyRecord instance) => instance.isInitedByVmware),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyRecord instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyRecord instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyRecord instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyRecord instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyRecord instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyRecord instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyRecord instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyRecord instance) => instance.updateByKValues),
    },
  );

  ///class ZyRefer
  static final classZyRefer = VmClass<ZyRefer>(
    identifier: 'ZyRefer',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyRefer.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => ZyRefer.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => ZyRefer.fromString),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZyRefer instance) => instance.buildTarget),
      'cnt': VmProxy(identifier: 'cnt', externalInstancePropertyReader: (ZyRefer instance) => instance.cnt, externalInstancePropertyWriter: (ZyRefer instance, value) => instance.cnt = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyRefer instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyRefer instance) => instance.noSuchMethod),
      'rid': VmProxy(identifier: 'rid', externalInstancePropertyReader: (ZyRefer instance) => instance.rid, externalInstancePropertyWriter: (ZyRefer instance, value) => instance.rid = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyRefer instance) => instance.runtimeType),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyRefer instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZyRefer instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyRefer instance) => instance.toString),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZyRefer instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZyRefer instance) => instance.updateByKValues),
    },
  );

  ///class ZyService
  static final classZyService = VmClass<ZyService>(
    identifier: 'ZyService',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyService.new),
      'cancelAllNotificationMessages': VmProxy(identifier: 'cancelAllNotificationMessages', externalStaticPropertyReader: () => ZyService.cancelAllNotificationMessages),
      'createWebViewController': VmProxy(identifier: 'createWebViewController', externalStaticPropertyReader: () => ZyService.createWebViewController),
      'deleteCustomKeyboardText': VmProxy(identifier: 'deleteCustomKeyboardText', externalStaticPropertyReader: () => ZyService.deleteCustomKeyboardText),
      'disableBackgroundExecution': VmProxy(identifier: 'disableBackgroundExecution', externalStaticPropertyReader: () => ZyService.disableBackgroundExecution),
      'enableBackgroundExecution': VmProxy(identifier: 'enableBackgroundExecution', externalStaticPropertyReader: () => ZyService.enableBackgroundExecution),
      'getDisplayMedia': VmProxy(identifier: 'getDisplayMedia', externalStaticPropertyReader: () => ZyService.getDisplayMedia),
      'getSupportedConstraints': VmProxy(identifier: 'getSupportedConstraints', externalStaticPropertyReader: () => ZyService.getSupportedConstraints),
      'getUserMedia': VmProxy(identifier: 'getUserMedia', externalStaticPropertyReader: () => ZyService.getUserMedia),
      'hasBackgroundPermissions': VmProxy(identifier: 'hasBackgroundPermissions', externalStaticPropertyReader: () => ZyService.hasBackgroundPermissions),
      'insertCustomKeyboardText': VmProxy(identifier: 'insertCustomKeyboardText', externalStaticPropertyReader: () => ZyService.insertCustomKeyboardText),
      'moveTaskToBackground': VmProxy(identifier: 'moveTaskToBackground', externalStaticPropertyReader: () => ZyService.moveTaskToBackground),
      'showNotificationMessage': VmProxy(identifier: 'showNotificationMessage', externalStaticPropertyReader: () => ZyService.showNotificationMessage),
      'startForegroundService': VmProxy(identifier: 'startForegroundService', externalStaticPropertyReader: () => ZyService.startForegroundService),
      'startNotificationService': VmProxy(identifier: 'startNotificationService', externalStaticPropertyReader: () => ZyService.startNotificationService),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyService instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyService instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyService instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyService instance) => instance.toString),
    },
  );

  ///class ZySheet
  static final classZySheet = VmClass<ZySheet>(
    identifier: 'ZySheet',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheet.new),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZySheet instance) => instance.build),
      'cancelSpace': VmProxy(identifier: 'cancelSpace', externalInstancePropertyReader: (ZySheet instance) => instance.cancelSpace),
      'cancelText': VmProxy(identifier: 'cancelText', externalInstancePropertyReader: (ZySheet instance) => instance.cancelText),
      'cityParams': VmProxy(identifier: 'cityParams', externalInstancePropertyReader: (ZySheet instance) => instance.cityParams),
      'codeParams': VmProxy(identifier: 'codeParams', externalInstancePropertyReader: (ZySheet instance) => instance.codeParams),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZySheet instance) => instance.createElement),
      'dateParams': VmProxy(identifier: 'dateParams', externalInstancePropertyReader: (ZySheet instance) => instance.dateParams),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZySheet instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZySheet instance) => instance.debugFillProperties),
      'freeWidget': VmProxy(identifier: 'freeWidget', externalInstancePropertyReader: (ZySheet instance) => instance.freeWidget),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheet instance) => instance.hashCode),
      'heightFactor': VmProxy(identifier: 'heightFactor', externalInstancePropertyReader: (ZySheet instance) => instance.heightFactor),
      'iconSize': VmProxy(identifier: 'iconSize', externalInstancePropertyReader: (ZySheet instance) => instance.iconSize),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZySheet instance) => instance.key),
      'listParams': VmProxy(identifier: 'listParams', externalInstancePropertyReader: (ZySheet instance) => instance.listParams),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheet instance) => instance.noSuchMethod),
      'padding': VmProxy(identifier: 'padding', externalInstancePropertyReader: (ZySheet instance) => instance.padding),
      'radius': VmProxy(identifier: 'radius', externalInstancePropertyReader: (ZySheet instance) => instance.radius),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheet instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZySheet instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheet instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZySheet instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZySheet instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZySheet instance) => instance.toStringShort),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZySheet instance) => instance.type),
    },
  );

  ///class ZySheetCityParams
  static final classZySheetCityParams = VmClass<ZySheetCityParams>(
    identifier: 'ZySheetCityParams',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetCityParams.new),
      'city': VmProxy(identifier: 'city', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.city, externalInstancePropertyWriter: (ZySheetCityParams instance, value) => instance.city = value),
      'code': VmProxy(identifier: 'code', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.code, externalInstancePropertyWriter: (ZySheetCityParams instance, value) => instance.code = value),
      'district': VmProxy(identifier: 'district', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.district, externalInstancePropertyWriter: (ZySheetCityParams instance, value) => instance.district = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.hashCode),
      'initCity': VmProxy(identifier: 'initCity', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.initCity),
      'initCode': VmProxy(identifier: 'initCode', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.initCode),
      'initDistrict': VmProxy(identifier: 'initDistrict', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.initDistrict),
      'initProvince': VmProxy(identifier: 'initProvince', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.initProvince),
      'itemExtent': VmProxy(identifier: 'itemExtent', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.itemExtent),
      'itemPadding': VmProxy(identifier: 'itemPadding', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.itemPadding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.noSuchMethod),
      'province': VmProxy(identifier: 'province', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.province, externalInstancePropertyWriter: (ZySheetCityParams instance, value) => instance.province = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetCityParams instance) => instance.toString),
    },
  );

  ///class ZySheetCityPicker
  static final classZySheetCityPicker = VmClass<ZySheetCityPicker>(
    identifier: 'ZySheetCityPicker',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetCityPicker.new, externalStaticFunctionCaller: ({key, initParams, onValueChange}) => ZySheetCityPicker.new(key: key, initParams: initParams, onValueChange: (b0) => onValueChange(b0))),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.hashCode),
      'initParams': VmProxy(identifier: 'initParams', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.initParams),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.noSuchMethod),
      'onValueChange': VmProxy(identifier: 'onValueChange', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.onValueChange),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZySheetCityPicker instance) => instance.toStringShort),
    },
  );

  ///class ZySheetCodeInput
  static final classZySheetCodeInput = VmClass<ZySheetCodeInput>(
    identifier: 'ZySheetCodeInput',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetCodeInput.new, externalStaticFunctionCaller: ({key, initParams, onValueChange}) => ZySheetCodeInput.new(key: key, initParams: initParams, onValueChange: (b0) => onValueChange(b0))),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.hashCode),
      'initParams': VmProxy(identifier: 'initParams', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.initParams),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.noSuchMethod),
      'onValueChange': VmProxy(identifier: 'onValueChange', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.onValueChange),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZySheetCodeInput instance) => instance.toStringShort),
    },
  );

  ///class ZySheetCodeParams
  static final classZySheetCodeParams = VmClass<ZySheetCodeParams>(
    identifier: 'ZySheetCodeParams',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetCodeParams.new),
      'empty': VmProxy(identifier: 'empty', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.empty),
      'emptyText': VmProxy(identifier: 'emptyText', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.emptyText),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.hashCode),
      'hintText': VmProxy(identifier: 'hintText', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.hintText),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.length),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.runtimeType),
      'topIcon': VmProxy(identifier: 'topIcon', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.topIcon),
      'topText': VmProxy(identifier: 'topText', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.topText),
      'topUnit': VmProxy(identifier: 'topUnit', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.topUnit),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.toString),
      'value': VmProxy(identifier: 'value', externalInstancePropertyReader: (ZySheetCodeParams instance) => instance.value, externalInstancePropertyWriter: (ZySheetCodeParams instance, value) => instance.value = value),
    },
  );

  ///class ZySheetDateParams
  static final classZySheetDateParams = VmClass<ZySheetDateParams>(
    identifier: 'ZySheetDateParams',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetDateParams.new),
      'backgroundColor': VmProxy(identifier: 'backgroundColor', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.backgroundColor),
      'dateOrder': VmProxy(identifier: 'dateOrder', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.dateOrder),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.hashCode),
      'initialDateTime': VmProxy(identifier: 'initialDateTime', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.initialDateTime),
      'maximumDate': VmProxy(identifier: 'maximumDate', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.maximumDate),
      'maximumYear': VmProxy(identifier: 'maximumYear', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.maximumYear),
      'minimumDate': VmProxy(identifier: 'minimumDate', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.minimumDate),
      'minimumYear': VmProxy(identifier: 'minimumYear', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.minimumYear),
      'minuteInterval': VmProxy(identifier: 'minuteInterval', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.minuteInterval),
      'mode': VmProxy(identifier: 'mode', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.mode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.toString),
      'use24hFormat': VmProxy(identifier: 'use24hFormat', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.use24hFormat),
      'value': VmProxy(identifier: 'value', externalInstancePropertyReader: (ZySheetDateParams instance) => instance.value, externalInstancePropertyWriter: (ZySheetDateParams instance, value) => instance.value = value),
    },
  );

  ///class ZySheetItemParams
  static final classZySheetItemParams = VmClass<ZySheetItemParams>(
    identifier: 'ZySheetItemParams',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySheetItemParams.new),
      'color': VmProxy(identifier: 'color', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.color),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.data),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.hashCode),
      'id': VmProxy(identifier: 'id', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.id),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.runtimeType),
      'text': VmProxy(identifier: 'text', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.text),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetItemParams instance) => instance.toString),
    },
  );

  ///class ZySheetType
  static final classZySheetType = VmClass<ZySheetType>(
    identifier: 'ZySheetType',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'city': VmProxy(identifier: 'city', externalStaticPropertyReader: () => ZySheetType.city),
      'code': VmProxy(identifier: 'code', externalStaticPropertyReader: () => ZySheetType.code),
      'date': VmProxy(identifier: 'date', externalStaticPropertyReader: () => ZySheetType.date),
      'free': VmProxy(identifier: 'free', externalStaticPropertyReader: () => ZySheetType.free),
      'list': VmProxy(identifier: 'list', externalStaticPropertyReader: () => ZySheetType.list),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySheetType instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZySheetType instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZySheetType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySheetType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySheetType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySheetType instance) => instance.toString),
    },
  );

  ///class ZySignal
  static final classZySignal = VmClass<ZySignal>(
    identifier: 'ZySignal',
    superclassNames: ['Object', 'DbBaseModel'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySignal.new),
      'fromJson': VmProxy(identifier: 'fromJson', externalStaticPropertyReader: () => ZySignal.fromJson),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => ZySignal.fromString),
      'attrs': VmProxy(identifier: 'attrs', externalInstancePropertyReader: (ZySignal instance) => instance.attrs, externalInstancePropertyWriter: (ZySignal instance, value) => instance.attrs = value),
      'buildTarget': VmProxy(identifier: 'buildTarget', externalInstancePropertyReader: (ZySignal instance) => instance.buildTarget),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySignal instance) => instance.hashCode),
      'ident': VmProxy(identifier: 'ident', externalInstancePropertyReader: (ZySignal instance) => instance.ident, externalInstancePropertyWriter: (ZySignal instance, value) => instance.ident = value),
      'items': VmProxy(identifier: 'items', externalInstancePropertyReader: (ZySignal instance) => instance.items, externalInstancePropertyWriter: (ZySignal instance, value) => instance.items = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySignal instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySignal instance) => instance.runtimeType),
      'text': VmProxy(identifier: 'text', externalInstancePropertyReader: (ZySignal instance) => instance.text, externalInstancePropertyWriter: (ZySignal instance, value) => instance.text = value),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZySignal instance) => instance.toJson),
      'toKValues': VmProxy(identifier: 'toKValues', externalInstancePropertyReader: (ZySignal instance) => instance.toKValues),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySignal instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZySignal instance) => instance.type, externalInstancePropertyWriter: (ZySignal instance, value) => instance.type = value),
      'updateByJson': VmProxy(identifier: 'updateByJson', externalInstancePropertyReader: (ZySignal instance) => instance.updateByJson),
      'updateByKValues': VmProxy(identifier: 'updateByKValues', externalInstancePropertyReader: (ZySignal instance) => instance.updateByKValues),
    },
  );

  ///class ZySound
  static final classZySound = VmClass<ZySound>(
    identifier: 'ZySound',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySound.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySound instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySound instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySound instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySound instance) => instance.toString),
    },
  );

  ///class ZySprite
  static final classZySprite = VmClass<ZySprite>(
    identifier: 'ZySprite',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySprite.new),
      'collisionRectAndRect': VmProxy(identifier: 'collisionRectAndRect', externalStaticPropertyReader: () => ZySprite.collisionRectAndRect),
      'countDzSorter': VmProxy(identifier: 'countDzSorter', externalStaticPropertyReader: () => ZySprite.countDzSorter),
      'aliveGroup': VmProxy(identifier: 'aliveGroup', externalInstancePropertyReader: (ZySprite instance) => instance.aliveGroup, externalInstancePropertyWriter: (ZySprite instance, value) => instance.aliveGroup = value),
      'aliveState': VmProxy(identifier: 'aliveState', externalInstancePropertyReader: (ZySprite instance) => instance.aliveState, externalInstancePropertyWriter: (ZySprite instance, value) => instance.aliveState = value),
      'clone': VmProxy(identifier: 'clone', externalInstancePropertyReader: (ZySprite instance) => instance.clone),
      'cloneByGroup': VmProxy(identifier: 'cloneByGroup', externalInstancePropertyReader: (ZySprite instance) => instance.cloneByGroup),
      'collisionBattleAndBattle': VmProxy(identifier: 'collisionBattleAndBattle', externalInstancePropertyReader: (ZySprite instance) => instance.collisionBattleAndBattle),
      'collisionBattleAndRect': VmProxy(identifier: 'collisionBattleAndRect', externalInstancePropertyReader: (ZySprite instance) => instance.collisionBattleAndRect),
      'collisionMovingAndMoving': VmProxy(identifier: 'collisionMovingAndMoving', externalInstancePropertyReader: (ZySprite instance) => instance.collisionMovingAndMoving),
      'dx': VmProxy(identifier: 'dx', externalInstancePropertyReader: (ZySprite instance) => instance.dx),
      'dy': VmProxy(identifier: 'dy', externalInstancePropertyReader: (ZySprite instance) => instance.dy),
      'dz': VmProxy(identifier: 'dz', externalInstancePropertyReader: (ZySprite instance) => instance.dz),
      'enableAlive': VmProxy(identifier: 'enableAlive', externalInstancePropertyWriter: (ZySprite instance, value) => instance.enableAlive = value),
      'enableRects': VmProxy(identifier: 'enableRects', externalInstancePropertyWriter: (ZySprite instance, value) => instance.enableRects = value),
      'fliped': VmProxy(identifier: 'fliped', externalInstancePropertyWriter: (ZySprite instance, value) => instance.fliped = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySprite instance) => instance.hashCode),
      'initGroups': VmProxy(identifier: 'initGroups', externalInstancePropertyReader: (ZySprite instance) => instance.initGroups),
      'isAlive': VmProxy(identifier: 'isAlive', externalInstancePropertyReader: (ZySprite instance) => instance.isAlive),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ZySprite instance) => instance.isEmpty),
      'isEnd': VmProxy(identifier: 'isEnd', externalInstancePropertyReader: (ZySprite instance) => instance.isEnd),
      'isFrame': VmProxy(identifier: 'isFrame', externalInstancePropertyReader: (ZySprite instance) => instance.isFrame),
      'isGroup': VmProxy(identifier: 'isGroup', externalInstancePropertyReader: (ZySprite instance) => instance.isGroup),
      'isMovie': VmProxy(identifier: 'isMovie', externalInstancePropertyReader: (ZySprite instance) => instance.isMovie),
      'isOrder': VmProxy(identifier: 'isOrder', externalInstancePropertyReader: (ZySprite instance) => instance.isOrder),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZySprite instance) => instance.key),
      'label': VmProxy(identifier: 'label', externalInstancePropertyWriter: (ZySprite instance, value) => instance.label = value),
      'labelRound': VmProxy(identifier: 'labelRound', externalInstancePropertyWriter: (ZySprite instance, value) => instance.labelRound = value),
      'nextFrame': VmProxy(identifier: 'nextFrame', externalInstancePropertyReader: (ZySprite instance) => instance.nextFrame),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySprite instance) => instance.noSuchMethod),
      'position': VmProxy(identifier: 'position', externalInstancePropertyWriter: (ZySprite instance, value) => instance.position = value),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySprite instance) => instance.render),
      'rotate': VmProxy(identifier: 'rotate', externalInstancePropertyWriter: (ZySprite instance, value) => instance.rotate = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySprite instance) => instance.runtimeType),
      'setFrame': VmProxy(identifier: 'setFrame', externalInstancePropertyReader: (ZySprite instance) => instance.setFrame),
      'setGroup': VmProxy(identifier: 'setGroup', externalInstancePropertyReader: (ZySprite instance) => instance.setGroup),
      'setRcOffset': VmProxy(identifier: 'setRcOffset', externalInstancePropertyReader: (ZySprite instance) => instance.setRcOffset),
      'shapeBattle': VmProxy(identifier: 'shapeBattle', externalInstancePropertyWriter: (ZySprite instance, value) => instance.shapeBattle = value),
      'shapeMaxbox': VmProxy(identifier: 'shapeMaxbox', externalInstancePropertyWriter: (ZySprite instance, value) => instance.shapeMaxbox = value),
      'shapeMoving': VmProxy(identifier: 'shapeMoving', externalInstancePropertyWriter: (ZySprite instance, value) => instance.shapeMoving = value),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (ZySprite instance) => instance.size),
      'sorter': VmProxy(identifier: 'sorter', externalInstancePropertyWriter: (ZySprite instance, value) => instance.sorter = value),
      'spId': VmProxy(identifier: 'spId', externalInstancePropertyReader: (ZySprite instance) => instance.spId),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySprite instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZySprite instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZySprite instance) => instance.type),
    },
  );

  ///class ZySpriteImage
  static final classZySpriteImage = VmClass<ZySpriteImage>(
    identifier: 'ZySpriteImage',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteImage.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteImage instance) => instance.hashCode),
      'image': VmProxy(identifier: 'image', externalInstancePropertyReader: (ZySpriteImage instance) => instance.image),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteImage instance) => instance.noSuchMethod),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySpriteImage instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteImage instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (ZySpriteImage instance) => instance.size),
      'source': VmProxy(identifier: 'source', externalInstancePropertyReader: (ZySpriteImage instance) => instance.source),
      'toImage': VmProxy(identifier: 'toImage', externalInstancePropertyReader: (ZySpriteImage instance) => instance.toImage),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteImage instance) => instance.toString),
    },
  );

  ///class ZySpriteLabel
  static final classZySpriteLabel = VmClass<ZySpriteLabel>(
    identifier: 'ZySpriteLabel',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteLabel.new),
      'clearLabelCache': VmProxy(identifier: 'clearLabelCache', externalStaticPropertyReader: () => ZySpriteLabel.clearLabelCache),
      'clearPainterCache': VmProxy(identifier: 'clearPainterCache', externalStaticPropertyReader: () => ZySpriteLabel.clearPainterCache),
      'getLabel': VmProxy(identifier: 'getLabel', externalStaticPropertyReader: () => ZySpriteLabel.getLabel),
      'getPainterByChar': VmProxy(identifier: 'getPainterByChar', externalStaticPropertyReader: () => ZySpriteLabel.getPainterByChar),
      'column': VmProxy(identifier: 'column', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.column),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.noSuchMethod),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.render),
      'renderForState': VmProxy(identifier: 'renderForState', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.renderForState),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.runtimeType),
      'setLabel': VmProxy(identifier: 'setLabel', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.setLabel),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.size),
      'stateX': VmProxy(identifier: 'stateX', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.stateX, externalInstancePropertyWriter: (ZySpriteLabel instance, value) => instance.stateX = value),
      'stateY': VmProxy(identifier: 'stateY', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.stateY, externalInstancePropertyWriter: (ZySpriteLabel instance, value) => instance.stateY = value),
      'text': VmProxy(identifier: 'text', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.text),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteLabel instance) => instance.toString),
    },
  );

  ///class ZySpriteLayer
  static final classZySpriteLayer = VmClass<ZySpriteLayer>(
    identifier: 'ZySpriteLayer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteLayer.new),
      'countRcKey': VmProxy(identifier: 'countRcKey', externalStaticPropertyReader: () => ZySpriteLayer.countRcKey),
      'countRowCol': VmProxy(identifier: 'countRowCol', externalStaticPropertyReader: () => ZySpriteLayer.countRowCol),
      'aliveSprites': VmProxy(identifier: 'aliveSprites', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.aliveSprites),
      'collisionBattleAndBattleByTxsp': VmProxy(identifier: 'collisionBattleAndBattleByTxsp', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.collisionBattleAndBattleByTxsp),
      'collisionBattleForPrepareByTxsp': VmProxy(identifier: 'collisionBattleForPrepareByTxsp', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.collisionBattleForPrepareByTxsp),
      'collisionMovingAndMovingByMark': VmProxy(identifier: 'collisionMovingAndMovingByMark', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.collisionMovingAndMovingByMark),
      'collisionMovingAndMovingByTxsp': VmProxy(identifier: 'collisionMovingAndMovingByTxsp', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.collisionMovingAndMovingByTxsp),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.noSuchMethod),
      'orderSprites': VmProxy(identifier: 'orderSprites', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.orderSprites),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.runtimeType),
      'syncFrameNo': VmProxy(identifier: 'syncFrameNo', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.syncFrameNo, externalInstancePropertyWriter: (ZySpriteLayer instance, value) => instance.syncFrameNo = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteLayer instance) => instance.toString),
    },
  );

  ///class ZySpriteShape
  static final classZySpriteShape = VmClass<ZySpriteShape>(
    identifier: 'ZySpriteShape',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteShape.new),
      'getShape': VmProxy(identifier: 'getShape', externalStaticPropertyReader: () => ZySpriteShape.getShape),
      'getShapeSprite': VmProxy(identifier: 'getShapeSprite', externalStaticPropertyReader: () => ZySpriteShape.getShapeSprite),
      'getShapeSpriteList': VmProxy(identifier: 'getShapeSpriteList', externalStaticPropertyReader: () => ZySpriteShape.getShapeSpriteList),
      'hasIndex': VmProxy(identifier: 'hasIndex', externalStaticPropertyReader: () => ZySpriteShape.hasIndex),
      'initCaches': VmProxy(identifier: 'initCaches', externalStaticPropertyReader: () => ZySpriteShape.initCaches),
      'ec': VmProxy(identifier: 'ec', externalInstancePropertyReader: (ZySpriteShape instance) => instance.ec),
      'er': VmProxy(identifier: 'er', externalInstancePropertyReader: (ZySpriteShape instance) => instance.er),
      'getRect': VmProxy(identifier: 'getRect', externalInstancePropertyReader: (ZySpriteShape instance) => instance.getRect),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteShape instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteShape instance) => instance.noSuchMethod),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySpriteShape instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteShape instance) => instance.runtimeType),
      'sc': VmProxy(identifier: 'sc', externalInstancePropertyReader: (ZySpriteShape instance) => instance.sc),
      'split': VmProxy(identifier: 'split', externalInstancePropertyReader: (ZySpriteShape instance) => instance.split),
      'sr': VmProxy(identifier: 'sr', externalInstancePropertyReader: (ZySpriteShape instance) => instance.sr),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteShape instance) => instance.toString),
    },
  );

  ///class ZySpriteSheet
  static final classZySpriteSheet = VmClass<ZySpriteSheet>(
    identifier: 'ZySpriteSheet',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteSheet.new),
      'getSpriteImage': VmProxy(identifier: 'getSpriteImage', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.getSpriteImage),
      'getSpriteImageById': VmProxy(identifier: 'getSpriteImageById', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.getSpriteImageById),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.hashCode),
      'image': VmProxy(identifier: 'image', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.image),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.runtimeType),
      'srcSize': VmProxy(identifier: 'srcSize', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.srcSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.toString),
      'totalCol': VmProxy(identifier: 'totalCol', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.totalCol),
      'totalRow': VmProxy(identifier: 'totalRow', externalInstancePropertyReader: (ZySpriteSheet instance) => instance.totalRow),
    },
  );

  ///class ZySpriteState
  static final classZySpriteState = VmClass<ZySpriteState>(
    identifier: 'ZySpriteState',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteState.new),
      'addLRDownLabel': VmProxy(identifier: 'addLRDownLabel', externalInstancePropertyReader: (ZySpriteState instance) => instance.addLRDownLabel),
      'addLRGrowLabel': VmProxy(identifier: 'addLRGrowLabel', externalInstancePropertyReader: (ZySpriteState instance) => instance.addLRGrowLabel),
      'addStateSprite': VmProxy(identifier: 'addStateSprite', externalInstancePropertyReader: (ZySpriteState instance) => instance.addStateSprite),
      'addTopGrowLabel': VmProxy(identifier: 'addTopGrowLabel', externalInstancePropertyReader: (ZySpriteState instance) => instance.addTopGrowLabel),
      'bgHeight': VmProxy(identifier: 'bgHeight', externalInstancePropertyReader: (ZySpriteState instance) => instance.bgHeight),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteState instance) => instance.hashCode),
      'hp': VmProxy(identifier: 'hp', externalInstancePropertyReader: (ZySpriteState instance) => instance.hp, externalInstancePropertyWriter: (ZySpriteState instance, value) => instance.hp = value),
      'hpHeight': VmProxy(identifier: 'hpHeight', externalInstancePropertyReader: (ZySpriteState instance) => instance.hpHeight),
      'margin': VmProxy(identifier: 'margin', externalInstancePropertyReader: (ZySpriteState instance) => instance.margin),
      'maxHp': VmProxy(identifier: 'maxHp', externalInstancePropertyReader: (ZySpriteState instance) => instance.maxHp, externalInstancePropertyWriter: (ZySpriteState instance, value) => instance.maxHp = value),
      'maxMp': VmProxy(identifier: 'maxMp', externalInstancePropertyReader: (ZySpriteState instance) => instance.maxMp, externalInstancePropertyWriter: (ZySpriteState instance, value) => instance.maxMp = value),
      'mp': VmProxy(identifier: 'mp', externalInstancePropertyReader: (ZySpriteState instance) => instance.mp, externalInstancePropertyWriter: (ZySpriteState instance, value) => instance.mp = value),
      'mpHeight': VmProxy(identifier: 'mpHeight', externalInstancePropertyReader: (ZySpriteState instance) => instance.mpHeight),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteState instance) => instance.noSuchMethod),
      'randomer': VmProxy(identifier: 'randomer', externalInstancePropertyReader: (ZySpriteState instance) => instance.randomer),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZySpriteState instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteState instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (ZySpriteState instance) => instance.size),
      'speedX': VmProxy(identifier: 'speedX', externalInstancePropertyReader: (ZySpriteState instance) => instance.speedX),
      'speedY': VmProxy(identifier: 'speedY', externalInstancePropertyReader: (ZySpriteState instance) => instance.speedY),
      'spritesNextFrame': VmProxy(identifier: 'spritesNextFrame', externalInstancePropertyReader: (ZySpriteState instance) => instance.spritesNextFrame),
      'stateText': VmProxy(identifier: 'stateText', externalInstancePropertyWriter: (ZySpriteState instance, value) => instance.stateText = value),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteState instance) => instance.toString),
    },
  );

  ///class ZySpriteStyle
  static final classZySpriteStyle = VmClass<ZySpriteStyle>(
    identifier: 'ZySpriteStyle',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZySpriteStyle.new),
      'axis0Paint': VmProxy(identifier: 'axis0Paint', externalStaticPropertyReader: () => ZySpriteStyle.axis0Paint),
      'axis1Paint': VmProxy(identifier: 'axis1Paint', externalStaticPropertyReader: () => ZySpriteStyle.axis1Paint),
      'axisXPaint': VmProxy(identifier: 'axisXPaint', externalStaticPropertyReader: () => ZySpriteStyle.axisXPaint),
      'battlePaint': VmProxy(identifier: 'battlePaint', externalStaticPropertyReader: () => ZySpriteStyle.battlePaint),
      'bgBarPaint': VmProxy(identifier: 'bgBarPaint', externalStaticPropertyReader: () => ZySpriteStyle.bgBarPaint),
      'coordStyle': VmProxy(identifier: 'coordStyle', externalStaticPropertyReader: () => ZySpriteStyle.coordStyle),
      'defExpRange': VmProxy(identifier: 'defExpRange', externalStaticPropertyReader: () => ZySpriteStyle.defExpRange),
      'defUnitSize': VmProxy(identifier: 'defUnitSize', externalStaticPropertyReader: () => ZySpriteStyle.defUnitSize),
      'hpBarPaint': VmProxy(identifier: 'hpBarPaint', externalStaticPropertyReader: () => ZySpriteStyle.hpBarPaint),
      'imagePaint': VmProxy(identifier: 'imagePaint', externalStaticPropertyReader: () => ZySpriteStyle.imagePaint),
      'initStyles': VmProxy(identifier: 'initStyles', externalStaticPropertyReader: () => ZySpriteStyle.initStyles),
      'labelStyle': VmProxy(identifier: 'labelStyle', externalStaticPropertyReader: () => ZySpriteStyle.labelStyle),
      'markPaint': VmProxy(identifier: 'markPaint', externalStaticPropertyReader: () => ZySpriteStyle.markPaint),
      'maxboxPaint': VmProxy(identifier: 'maxboxPaint', externalStaticPropertyReader: () => ZySpriteStyle.maxboxPaint),
      'maxCoordColumn': VmProxy(identifier: 'maxCoordColumn', externalStaticPropertyReader: () => ZySpriteStyle.maxCoordColumn),
      'maxLabelColumn': VmProxy(identifier: 'maxLabelColumn', externalStaticPropertyReader: () => ZySpriteStyle.maxLabelColumn),
      'maxShapeSplit': VmProxy(identifier: 'maxShapeSplit', externalStaticPropertyReader: () => ZySpriteStyle.maxShapeSplit),
      'maxStateColumn': VmProxy(identifier: 'maxStateColumn', externalStaticPropertyReader: () => ZySpriteStyle.maxStateColumn),
      'minSpriteSize': VmProxy(identifier: 'minSpriteSize', externalStaticPropertyReader: () => ZySpriteStyle.minSpriteSize),
      'movingPaint': VmProxy(identifier: 'movingPaint', externalStaticPropertyReader: () => ZySpriteStyle.movingPaint),
      'mpBarPaint': VmProxy(identifier: 'mpBarPaint', externalStaticPropertyReader: () => ZySpriteStyle.mpBarPaint),
      'pickPaint': VmProxy(identifier: 'pickPaint', externalStaticPropertyReader: () => ZySpriteStyle.pickPaint),
      'stateStyle': VmProxy(identifier: 'stateStyle', externalStaticPropertyReader: () => ZySpriteStyle.stateStyle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZySpriteStyle instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZySpriteStyle instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZySpriteStyle instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZySpriteStyle instance) => instance.toString),
    },
  );

  ///class ZyStorage
  static final classZyStorage = VmClass<ZyStorage>(
    identifier: 'ZyStorage',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyStorage.new),
      'closeDB': VmProxy(identifier: 'closeDB', externalStaticPropertyReader: () => ZyStorage.closeDB),
      'deleteAll': VmProxy(identifier: 'deleteAll', externalStaticPropertyReader: () => ZyStorage.deleteAll),
      'deleteAllInTable': VmProxy(identifier: 'deleteAllInTable', externalStaticPropertyReader: () => ZyStorage.deleteAllInTable),
      'deleteMany': VmProxy(identifier: 'deleteMany', externalStaticPropertyReader: () => ZyStorage.deleteMany),
      'deleteManyInTable': VmProxy(identifier: 'deleteManyInTable', externalStaticPropertyReader: () => ZyStorage.deleteManyInTable),
      'deleteOne': VmProxy(identifier: 'deleteOne', externalStaticPropertyReader: () => ZyStorage.deleteOne),
      'deleteOneInTable': VmProxy(identifier: 'deleteOneInTable', externalStaticPropertyReader: () => ZyStorage.deleteOneInTable),
      'getAllKeys': VmProxy(identifier: 'getAllKeys', externalStaticPropertyReader: () => ZyStorage.getAllKeys),
      'getAllKeysInTable': VmProxy(identifier: 'getAllKeysInTable', externalStaticPropertyReader: () => ZyStorage.getAllKeysInTable),
      'getAllValues': VmProxy(identifier: 'getAllValues', externalStaticPropertyReader: () => ZyStorage.getAllValues),
      'getAllValuesInTable': VmProxy(identifier: 'getAllValuesInTable', externalStaticPropertyReader: () => ZyStorage.getAllValuesInTable),
      'getMany': VmProxy(identifier: 'getMany', externalStaticPropertyReader: () => ZyStorage.getMany),
      'getManyInTable': VmProxy(identifier: 'getManyInTable', externalStaticPropertyReader: () => ZyStorage.getManyInTable),
      'getOne': VmProxy(identifier: 'getOne', externalStaticPropertyReader: () => ZyStorage.getOne),
      'getOneInTable': VmProxy(identifier: 'getOneInTable', externalStaticPropertyReader: () => ZyStorage.getOneInTable),
      'openDB': VmProxy(identifier: 'openDB', externalStaticPropertyReader: () => ZyStorage.openDB),
      'openTable': VmProxy(identifier: 'openTable', externalStaticPropertyReader: () => ZyStorage.openTable),
      'setOne': VmProxy(identifier: 'setOne', externalStaticPropertyReader: () => ZyStorage.setOne),
      'setOneInTable': VmProxy(identifier: 'setOneInTable', externalStaticPropertyReader: () => ZyStorage.setOneInTable),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyStorage instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyStorage instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyStorage instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyStorage instance) => instance.toString),
    },
  );

  ///class ZyStrokeText
  static final classZyStrokeText = VmClass<ZyStrokeText>(
    identifier: 'ZyStrokeText',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyStrokeText.new),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyStrokeText instance) => instance.build),
      'child': VmProxy(identifier: 'child', externalInstancePropertyReader: (ZyStrokeText instance) => instance.child),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyStrokeText instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyStrokeText instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyStrokeText instance) => instance.debugFillProperties),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyStrokeText instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyStrokeText instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyStrokeText instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyStrokeText instance) => instance.runtimeType),
      'strokeCap': VmProxy(identifier: 'strokeCap', externalInstancePropertyReader: (ZyStrokeText instance) => instance.strokeCap),
      'strokeColor': VmProxy(identifier: 'strokeColor', externalInstancePropertyReader: (ZyStrokeText instance) => instance.strokeColor),
      'strokeJoin': VmProxy(identifier: 'strokeJoin', externalInstancePropertyReader: (ZyStrokeText instance) => instance.strokeJoin),
      'strokeWidth': VmProxy(identifier: 'strokeWidth', externalInstancePropertyReader: (ZyStrokeText instance) => instance.strokeWidth),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyStrokeText instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyStrokeText instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyStrokeText instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyStrokeText instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyStrokeText instance) => instance.toStringShort),
    },
  );

  ///class ZyTabPageState
  static final classZyTabPageState = VmClass<ZyTabPageState>(
    identifier: 'ZyTabPageState',
    superclassNames: ['Object', 'Diagnosticable', 'State', 'ZyWatchTarget', 'VmSuper', 'ZyPageState', 'TickerProvider', 'SingleTickerProviderStateMixin'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyTabPageState.new),
      'activate': VmProxy(identifier: 'activate', externalInstancePropertyReader: (ZyTabPageState instance) => instance.activate),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyTabPageState instance) => instance.build),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ZyTabPageState instance) => instance.close),
      'context': VmProxy(identifier: 'context', externalInstancePropertyReader: (ZyTabPageState instance) => instance.context),
      'createTicker': VmProxy(identifier: 'createTicker', externalInstancePropertyReader: (ZyTabPageState instance) => instance.createTicker, externalInstanceFunctionCaller: (ZyTabPageState instance, a0) => instance.createTicker((b0) => a0(b0))),
      'deactivate': VmProxy(identifier: 'deactivate', externalInstancePropertyReader: (ZyTabPageState instance) => instance.deactivate),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyTabPageState instance) => instance.debugFillProperties),
      'didChangeDependencies': VmProxy(identifier: 'didChangeDependencies', externalInstancePropertyReader: (ZyTabPageState instance) => instance.didChangeDependencies),
      'didUpdateWidget': VmProxy(identifier: 'didUpdateWidget', externalInstancePropertyReader: (ZyTabPageState instance) => instance.didUpdateWidget),
      'dispose': VmProxy(identifier: 'dispose', externalInstancePropertyReader: (ZyTabPageState instance) => instance.dispose),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyTabPageState instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyTabPageState instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTabPageState instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyTabPageState instance) => instance.hasSuperProperty),
      'initState': VmProxy(identifier: 'initState', externalInstancePropertyReader: (ZyTabPageState instance) => instance.initState),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyTabPageState instance) => instance.isInitedByVmware),
      'mounted': VmProxy(identifier: 'mounted', externalInstancePropertyReader: (ZyTabPageState instance) => instance.mounted),
      'nextFocus': VmProxy(identifier: 'nextFocus', externalInstancePropertyReader: (ZyTabPageState instance) => instance.nextFocus),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTabPageState instance) => instance.noSuchMethod),
      'onPacket': VmProxy(identifier: 'onPacket', externalInstancePropertyReader: (ZyTabPageState instance) => instance.onPacket),
      'reassemble': VmProxy(identifier: 'reassemble', externalInstancePropertyReader: (ZyTabPageState instance) => instance.reassemble),
      'refresh': VmProxy(identifier: 'refresh', externalInstancePropertyReader: (ZyTabPageState instance) => instance.refresh),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZyTabPageState instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTabPageState instance) => instance.runtimeType),
      'setState': VmProxy(identifier: 'setState', externalInstancePropertyReader: (ZyTabPageState instance) => instance.setState),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (ZyTabPageState instance) => instance.start),
      'stateLogLabel': VmProxy(identifier: 'stateLogLabel', externalInstancePropertyReader: (ZyTabPageState instance) => instance.stateLogLabel),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyTabPageState instance) => instance.thisNativeValue),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyTabPageState instance) => instance.toDiagnosticsNode),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyTabPageState instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTabPageState instance) => instance.toString),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyTabPageState instance) => instance.toStringShort),
      'unfocus': VmProxy(identifier: 'unfocus', externalInstancePropertyReader: (ZyTabPageState instance) => instance.unfocus),
      'widget': VmProxy(identifier: 'widget', externalInstancePropertyReader: (ZyTabPageState instance) => instance.widget),
    },
  );

  ///class ZyTexture
  static final classZyTexture = VmClass<ZyTexture>(
    identifier: 'ZyTexture',
    superclassNames: ['Object'],
    externalProxyMap: {
      'create': VmProxy(identifier: 'create', externalStaticPropertyReader: () => ZyTexture.create, externalStaticFunctionCaller: ({type = 0, txId = 0, path = '', frameSize, spriteSize = 0.0, onDecodeError, cacheEnable = true, logCacheState = false}) => ZyTexture.create(type: type, txId: txId, path: path, frameSize: frameSize, spriteSize: spriteSize, onDecodeError: onDecodeError == null ? null : (b0, b1) => onDecodeError(b0, b1), cacheEnable: cacheEnable, logCacheState: logCacheState)),
      'autoSpriteGrid': VmProxy(identifier: 'autoSpriteGrid', externalStaticPropertyReader: () => ZyTexture.autoSpriteGrid),
      'autoTileColumn': VmProxy(identifier: 'autoTileColumn', externalStaticPropertyReader: () => ZyTexture.autoTileColumn),
      'clearTextureCache': VmProxy(identifier: 'clearTextureCache', externalStaticPropertyReader: () => ZyTexture.clearTextureCache),
      'getSpriteByArgs': VmProxy(identifier: 'getSpriteByArgs', externalStaticPropertyReader: () => ZyTexture.getSpriteByArgs),
      'getSpriteByGrid': VmProxy(identifier: 'getSpriteByGrid', externalStaticPropertyReader: () => ZyTexture.getSpriteByGrid),
      'getTextureById': VmProxy(identifier: 'getTextureById', externalStaticPropertyReader: () => ZyTexture.getTextureById),
      'typeFloor': VmProxy(identifier: 'typeFloor', externalStaticPropertyReader: () => ZyTexture.typeFloor),
      'typeIcon': VmProxy(identifier: 'typeIcon', externalStaticPropertyReader: () => ZyTexture.typeIcon),
      'typeMovie': VmProxy(identifier: 'typeMovie', externalStaticPropertyReader: () => ZyTexture.typeMovie),
      'typeRole': VmProxy(identifier: 'typeRole', externalStaticPropertyReader: () => ZyTexture.typeRole),
      'typeWall': VmProxy(identifier: 'typeWall', externalStaticPropertyReader: () => ZyTexture.typeWall),
      'typeWaterfall': VmProxy(identifier: 'typeWaterfall', externalStaticPropertyReader: () => ZyTexture.typeWaterfall),
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTexture instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTexture instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTexture instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTexture instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTexture instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTexture instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTexture instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTexture instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTexture instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTexture instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTexture instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTexture instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTexture instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTexture instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTexture instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTexture instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTexture instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTexture instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTexture instance) => instance.type),
    },
  );

  ///class ZyTextureFloor
  static final classZyTextureFloor = VmClass<ZyTextureFloor>(
    identifier: 'ZyTextureFloor',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureFloor instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureFloor instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureFloor instance) => instance.type),
    },
  );

  ///class ZyTextureIcon
  static final classZyTextureIcon = VmClass<ZyTextureIcon>(
    identifier: 'ZyTextureIcon',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureIcon instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureIcon instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureIcon instance) => instance.type),
    },
  );

  ///class ZyTextureMovie
  static final classZyTextureMovie = VmClass<ZyTextureMovie>(
    identifier: 'ZyTextureMovie',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureMovie instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureMovie instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureMovie instance) => instance.type),
    },
  );

  ///class ZyTextureRole
  static final classZyTextureRole = VmClass<ZyTextureRole>(
    identifier: 'ZyTextureRole',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'directD': VmProxy(identifier: 'directD', externalStaticPropertyReader: () => ZyTextureRole.directD),
      'directFramesMap': VmProxy(identifier: 'directFramesMap', externalStaticPropertyReader: () => ZyTextureRole.directFramesMap),
      'directL': VmProxy(identifier: 'directL', externalStaticPropertyReader: () => ZyTextureRole.directL),
      'directR': VmProxy(identifier: 'directR', externalStaticPropertyReader: () => ZyTextureRole.directR),
      'directU': VmProxy(identifier: 'directU', externalStaticPropertyReader: () => ZyTextureRole.directU),
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureRole instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureRole instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureRole instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureRole instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureRole instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureRole instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureRole instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureRole instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureRole instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureRole instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureRole instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureRole instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureRole instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureRole instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureRole instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureRole instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureRole instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureRole instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureRole instance) => instance.type),
    },
  );

  ///class ZyTextureWall
  static final classZyTextureWall = VmClass<ZyTextureWall>(
    identifier: 'ZyTextureWall',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureWall instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureWall instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureWall instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureWall instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureWall instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureWall instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureWall instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureWall instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureWall instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureWall instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureWall instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureWall instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureWall instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureWall instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureWall instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureWall instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureWall instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureWall instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureWall instance) => instance.type),
    },
  );

  ///class ZyTextureWaterfall
  static final classZyTextureWaterfall = VmClass<ZyTextureWaterfall>(
    identifier: 'ZyTextureWaterfall',
    superclassNames: ['Object', 'ZyTexture'],
    externalProxyMap: {
      'addDecodeListener': VmProxy(identifier: 'addDecodeListener', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.addDecodeListener, externalInstanceFunctionCaller: (ZyTextureWaterfall instance, a0) => instance.addDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.decode),
      'delDecodeListener': VmProxy(identifier: 'delDecodeListener', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.delDecodeListener, externalInstanceFunctionCaller: (ZyTextureWaterfall instance, a0) => instance.delDecodeListener((b0, b1, b2) => a0(b0, b1, b2))),
      'displaySpriteFirst': VmProxy(identifier: 'displaySpriteFirst', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.displaySpriteFirst),
      'displaySpriteLast': VmProxy(identifier: 'displaySpriteLast', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.displaySpriteLast),
      'displaySpriteList': VmProxy(identifier: 'displaySpriteList', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.displaySpriteList),
      'frameSize': VmProxy(identifier: 'frameSize', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.frameSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.hashCode),
      'isDecodeSuccess': VmProxy(identifier: 'isDecodeSuccess', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.isDecodeSuccess),
      'isDecoding': VmProxy(identifier: 'isDecoding', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.isDecoding),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.runtimeType),
      'spriteSize': VmProxy(identifier: 'spriteSize', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.spriteSize),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.toString),
      'txId': VmProxy(identifier: 'txId', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.txId),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (ZyTextureWaterfall instance) => instance.type),
    },
  );

  ///class ZyTextureWidget
  static final classZyTextureWidget = VmClass<ZyTextureWidget>(
    identifier: 'ZyTextureWidget',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyTextureWidget.new),
      'autoPlay': VmProxy(identifier: 'autoPlay', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.autoPlay),
      'blankEmpty': VmProxy(identifier: 'blankEmpty', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.blankEmpty),
      'blankFitted': VmProxy(identifier: 'blankFitted', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.blankFitted),
      'blankIconColor': VmProxy(identifier: 'blankIconColor', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.blankIconColor),
      'blankIconSize': VmProxy(identifier: 'blankIconSize', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.blankIconSize),
      'blankWidget': VmProxy(identifier: 'blankWidget', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.blankWidget),
      'cloneSprite': VmProxy(identifier: 'cloneSprite', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.cloneSprite),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.debugFillProperties),
      'displayItems': VmProxy(identifier: 'displayItems', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.displayItems),
      'forceFitted': VmProxy(identifier: 'forceFitted', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.forceFitted),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.key),
      'logDebugInfo': VmProxy(identifier: 'logDebugInfo', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.logDebugInfo),
      'logFrameCycle': VmProxy(identifier: 'logFrameCycle', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.logFrameCycle),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.noSuchMethod),
      'oncePlayFinished': VmProxy(identifier: 'oncePlayFinished', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.oncePlayFinished),
      'repaintId': VmProxy(identifier: 'repaintId', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.repaintId),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.runtimeType),
      'sprite': VmProxy(identifier: 'sprite', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.sprite),
      'texture': VmProxy(identifier: 'texture', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.texture),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.toStringShort),
      'tweenMillis': VmProxy(identifier: 'tweenMillis', externalInstancePropertyReader: (ZyTextureWidget instance) => instance.tweenMillis),
    },
  );

  ///class ZyView
  static final classZyView = VmClass<ZyView>(
    identifier: 'ZyView',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatelessWidget', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyView.new),
      'build': VmProxy(identifier: 'build', externalInstancePropertyReader: (ZyView instance) => instance.build),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyView instance) => instance.createElement),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyView instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyView instance) => instance.debugFillProperties),
      'defaultRouteName': VmProxy(identifier: 'defaultRouteName', externalInstancePropertyReader: (ZyView instance) => instance.defaultRouteName),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyView instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyView instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyView instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyView instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyView instance) => instance.isInitedByVmware),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyView instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyView instance) => instance.noSuchMethod),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZyView instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyView instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyView instance) => instance.thisNativeValue),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyView instance) => instance.toDiagnosticsNode),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyView instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyView instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyView instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyView instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyView instance) => instance.toStringShort),
      'widgetLogLabel': VmProxy(identifier: 'widgetLogLabel', externalInstancePropertyReader: (ZyView instance) => instance.widgetLogLabel),
      'widgetName': VmProxy(identifier: 'widgetName', externalInstancePropertyReader: (ZyView instance) => instance.widgetName),
    },
  );

  ///class ZyWatch
  static final classZyWatch = VmClass<ZyWatch>(
    identifier: 'ZyWatch',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWatch.new, externalStaticFunctionCaller: ({key, widgetName = 'ZyWatch', watchControllers, render}) => ZyWatch.new(key: key, widgetName: widgetName, watchControllers: watchControllers, render: (b0) => render(b0))),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyWatch instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyWatch instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyWatch instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyWatch instance) => instance.debugFillProperties),
      'defaultRouteName': VmProxy(identifier: 'defaultRouteName', externalInstancePropertyReader: (ZyWatch instance) => instance.defaultRouteName),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWatch instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyWatch instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWatch instance) => instance.noSuchMethod),
      'render': VmProxy(identifier: 'render', externalInstancePropertyReader: (ZyWatch instance) => instance.render),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWatch instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyWatch instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWatch instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyWatch instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyWatch instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyWatch instance) => instance.toStringShort),
      'watchControllers': VmProxy(identifier: 'watchControllers', externalInstancePropertyReader: (ZyWatch instance) => instance.watchControllers),
      'watchControllersLogLabels': VmProxy(identifier: 'watchControllersLogLabels', externalInstancePropertyReader: (ZyWatch instance) => instance.watchControllersLogLabels),
      'widgetLogLabel': VmProxy(identifier: 'widgetLogLabel', externalInstancePropertyReader: (ZyWatch instance) => instance.widgetLogLabel),
      'widgetName': VmProxy(identifier: 'widgetName', externalInstancePropertyReader: (ZyWatch instance) => instance.widgetName),
    },
  );

  ///class ZyWatchController
  static final classZyWatchController = VmClass<ZyWatchController>(
    identifier: 'ZyWatchController',
    superclassNames: ['Object', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWatchController.new),
      'addWatchTarget': VmProxy(identifier: 'addWatchTarget', externalInstancePropertyReader: (ZyWatchController instance) => instance.addWatchTarget),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ZyWatchController instance) => instance.close),
      'controllerLogLabel': VmProxy(identifier: 'controllerLogLabel', externalInstancePropertyReader: (ZyWatchController instance) => instance.controllerLogLabel),
      'controllerName': VmProxy(identifier: 'controllerName', externalInstancePropertyReader: (ZyWatchController instance) => instance.controllerName),
      'delWatchTarget': VmProxy(identifier: 'delWatchTarget', externalInstancePropertyReader: (ZyWatchController instance) => instance.delWatchTarget),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyWatchController instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyWatchController instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWatchController instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyWatchController instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyWatchController instance) => instance.isInitedByVmware),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWatchController instance) => instance.noSuchMethod),
      'notifyChanged': VmProxy(identifier: 'notifyChanged', externalInstancePropertyReader: (ZyWatchController instance) => instance.notifyChanged),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWatchController instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (ZyWatchController instance) => instance.start),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyWatchController instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyWatchController instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWatchController instance) => instance.toString),
    },
  );

  ///class ZyWatchTarget
  static final classZyWatchTarget = VmClass<ZyWatchTarget>(
    identifier: 'ZyWatchTarget',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.noSuchMethod),
      'onPacket': VmProxy(identifier: 'onPacket', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.onPacket),
      'refresh': VmProxy(identifier: 'refresh', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.refresh),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWatchTarget instance) => instance.toString),
    },
  );

  ///class ZyWindow
  static final classZyWindow = VmClass<ZyWindow>(
    identifier: 'ZyWindow',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWindow.new),
      'alert': VmProxy(identifier: 'alert', externalStaticPropertyReader: () => ZyWindow.alert),
      'dismissLoading': VmProxy(identifier: 'dismissLoading', externalStaticPropertyReader: () => ZyWindow.dismissLoading),
      'displayLoading': VmProxy(identifier: 'displayLoading', externalStaticPropertyReader: () => ZyWindow.displayLoading),
      'globalOverlaySupport': VmProxy(identifier: 'globalOverlaySupport', externalStaticPropertyReader: () => ZyWindow.globalOverlaySupport),
      'localOverlaySupport': VmProxy(identifier: 'localOverlaySupport', externalStaticPropertyReader: () => ZyWindow.localOverlaySupport),
      'showOverlay': VmProxy(identifier: 'showOverlay', externalStaticPropertyReader: () => ZyWindow.showOverlay, externalStaticFunctionCaller: ({builder, curve, duration, key, context, animationDuration, reverseAnimationDuration}) => ZyWindow.showOverlay(builder: (b0, b1) => builder(b0, b1), curve: curve, duration: duration, key: key, context: context, animationDuration: animationDuration, reverseAnimationDuration: reverseAnimationDuration)),
      'showOverlayNotification': VmProxy(identifier: 'showOverlayNotification', externalStaticPropertyReader: () => ZyWindow.showOverlayNotification, externalStaticFunctionCaller: ({builder, duration, key, position = ZyWindowAlign.top, context}) => ZyWindow.showOverlayNotification(builder: (b0) => builder(b0), duration: duration, key: key, position: position, context: context)),
      'showPictureViewer': VmProxy(identifier: 'showPictureViewer', externalStaticPropertyReader: () => ZyWindow.showPictureViewer, externalStaticFunctionCaller: ({urlList, heroList = const [], initialPage, onFormatUrl}) => ZyWindow.showPictureViewer(urlList: urlList, heroList: heroList, initialPage: initialPage, onFormatUrl: (b0) => onFormatUrl(b0))),
      'showSimpleNotification': VmProxy(identifier: 'showSimpleNotification', externalStaticPropertyReader: () => ZyWindow.showSimpleNotification),
      'toast': VmProxy(identifier: 'toast', externalStaticPropertyReader: () => ZyWindow.toast),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWindow instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWindow instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWindow instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWindow instance) => instance.toString),
    },
  );

  ///class ZyWindowAlign
  static final classZyWindowAlign = VmClass<ZyWindowAlign>(
    identifier: 'ZyWindowAlign',
    superclassNames: ['Object', 'Enum'],
    externalProxyMap: {
      'bottom': VmProxy(identifier: 'bottom', externalStaticPropertyReader: () => ZyWindowAlign.bottom),
      'center': VmProxy(identifier: 'center', externalStaticPropertyReader: () => ZyWindowAlign.center),
      'top': VmProxy(identifier: 'top', externalStaticPropertyReader: () => ZyWindowAlign.top),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWindowAlign instance) => instance.toString),
    },
  );

  ///class ZyWindowOverlayEntry
  static final classZyWindowOverlayEntry = VmClass<ZyWindowOverlayEntry>(
    identifier: 'ZyWindowOverlayEntry',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWindowOverlayEntry.new),
      'dismiss': VmProxy(identifier: 'dismiss', externalInstancePropertyReader: (ZyWindowOverlayEntry instance) => instance.dismiss),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWindowOverlayEntry instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWindowOverlayEntry instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWindowOverlayEntry instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWindowOverlayEntry instance) => instance.toString),
    },
  );

  ///class ZyWorld
  static final classZyWorld = VmClass<ZyWorld>(
    identifier: 'ZyWorld',
    superclassNames: ['Object', 'VmSuper'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWorld.new),
      'canvasSize': VmProxy(identifier: 'canvasSize', externalInstancePropertyReader: (ZyWorld instance) => instance.canvasSize),
      'fpsMaxQueue': VmProxy(identifier: 'fpsMaxQueue', externalInstancePropertyReader: (ZyWorld instance) => instance.fpsMaxQueue),
      'getProperty': VmProxy(identifier: 'getProperty', externalInstancePropertyReader: (ZyWorld instance) => instance.getProperty),
      'hasChildProperty': VmProxy(identifier: 'hasChildProperty', externalInstancePropertyReader: (ZyWorld instance) => instance.hasChildProperty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWorld instance) => instance.hashCode),
      'hasSuperProperty': VmProxy(identifier: 'hasSuperProperty', externalInstancePropertyReader: (ZyWorld instance) => instance.hasSuperProperty),
      'isInitedByVmware': VmProxy(identifier: 'isInitedByVmware', externalInstancePropertyReader: (ZyWorld instance) => instance.isInitedByVmware),
      'isPaused': VmProxy(identifier: 'isPaused', externalInstancePropertyReader: (ZyWorld instance) => instance.isPaused),
      'needRepaint': VmProxy(identifier: 'needRepaint', externalInstancePropertyReader: (ZyWorld instance) => instance.needRepaint, externalInstancePropertyWriter: (ZyWorld instance, value) => instance.needRepaint = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWorld instance) => instance.noSuchMethod),
      'onKeyEvent': VmProxy(identifier: 'onKeyEvent', externalInstancePropertyReader: (ZyWorld instance) => instance.onKeyEvent),
      'onRender': VmProxy(identifier: 'onRender', externalInstancePropertyReader: (ZyWorld instance) => instance.onRender),
      'onUpdate': VmProxy(identifier: 'onUpdate', externalInstancePropertyReader: (ZyWorld instance) => instance.onUpdate),
      'pause': VmProxy(identifier: 'pause', externalInstancePropertyReader: (ZyWorld instance) => instance.pause),
      'resume': VmProxy(identifier: 'resume', externalInstancePropertyReader: (ZyWorld instance) => instance.resume),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWorld instance) => instance.runtimeType),
      'thisNativeValue': VmProxy(identifier: 'thisNativeValue', externalInstancePropertyReader: (ZyWorld instance) => instance.thisNativeValue),
      'toJson': VmProxy(identifier: 'toJson', externalInstancePropertyReader: (ZyWorld instance) => instance.toJson),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWorld instance) => instance.toString),
    },
  );

  ///class ZyWorldWidget
  static final classZyWorldWidget = VmClass<ZyWorldWidget>(
    identifier: 'ZyWorldWidget',
    superclassNames: ['Object', 'Diagnosticable', 'DiagnosticableTree', 'Widget', 'StatefulWidget'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZyWorldWidget.new),
      'createElement': VmProxy(identifier: 'createElement', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.createElement),
      'createState': VmProxy(identifier: 'createState', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.createState),
      'debugDescribeChildren': VmProxy(identifier: 'debugDescribeChildren', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.debugDescribeChildren),
      'debugFillProperties': VmProxy(identifier: 'debugFillProperties', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.debugFillProperties),
      'handle': VmProxy(identifier: 'handle', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.handle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.runtimeType),
      'toDiagnosticsNode': VmProxy(identifier: 'toDiagnosticsNode', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.toDiagnosticsNode),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.toString),
      'toStringDeep': VmProxy(identifier: 'toStringDeep', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.toStringDeep),
      'toStringShallow': VmProxy(identifier: 'toStringShallow', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.toStringShallow),
      'toStringShort': VmProxy(identifier: 'toStringShort', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.toStringShort),
      'world': VmProxy(identifier: 'world', externalInstancePropertyReader: (ZyWorldWidget instance) => instance.world),
    },
  );

  ///all class list
  static final libraryClassList = <VmClass>[
    classZyAnchor,
    classZyApp,
    classZyAppLocalizations,
    classZyAppNavigatorObserver,
    classZyAvator,
    classZyAvatorType,
    classZyBadge,
    classZyBadgeAlign,
    classZyBlock,
    classZyBorder,
    classZyButton,
    classZyCoord,
    classZyDeviceDetail,
    classZyDeviceInfo,
    classZyDevicePackge,
    classZyDeviceType,
    classZyDialog,
    classZyDivider,
    classZyDraw,
    classZyDrawBox,
    classZyDrawDecoration,
    classZyEditor,
    classZyEditorController,
    classZyEmojis,
    classZyFlexBox,
    classZyFreeBox,
    classZyImage,
    classZyLetters,
    classZyListTile,
    classZyListTileType,
    classZyLoading,
    classZyMerger,
    classZyModel,
    classZyMovie,
    classZyPage,
    classZyPageState,
    classZyPicture,
    classZyPictureType,
    classZyQrcode,
    classZyQrscan,
    classZyRecord,
    classZyRefer,
    classZyService,
    classZySheet,
    classZySheetCityParams,
    classZySheetCityPicker,
    classZySheetCodeInput,
    classZySheetCodeParams,
    classZySheetDateParams,
    classZySheetItemParams,
    classZySheetType,
    classZySignal,
    classZySound,
    classZySprite,
    classZySpriteImage,
    classZySpriteLabel,
    classZySpriteLayer,
    classZySpriteShape,
    classZySpriteSheet,
    classZySpriteState,
    classZySpriteStyle,
    classZyStorage,
    classZyStrokeText,
    classZyTabPageState,
    classZyTexture,
    classZyTextureFloor,
    classZyTextureIcon,
    classZyTextureMovie,
    classZyTextureRole,
    classZyTextureWall,
    classZyTextureWaterfall,
    classZyTextureWidget,
    classZyView,
    classZyWatch,
    classZyWatchController,
    classZyWatchTarget,
    classZyWindow,
    classZyWindowAlign,
    classZyWindowOverlayEntry,
    classZyWorld,
    classZyWorldWidget,
  ];

  ///all proxy list
  static final libraryProxyList = <VmProxy<void>>[];
}
